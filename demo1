import { useEffect, useState } from "react";
import { Col, Container, Modal, Row } from "react-bootstrap";
import { useQuerySuggestions, useSearch } from "../../../../domain/search/hooks";
import { SearchResultDetail } from "../../../../domain/search/models";
import { useNavigator } from "../../navigator/navigator";
import { VZModalBody } from "../commonStyles";
import { CloseableModalProps } from "../props";
import {
  AutocompleteText,
  ClearButton,
  DefaultResult,
  HintText,
  InputWrapper,
  ResultHeader,
  ResultRow,
  SearchContainer,
  StyledInput,
} from "./styles";

export const VZSearchModal: React.FC<CloseableModalProps> = (props) => {
  const { suggestQueries, suggestions, currentSuggestion, nextSuggestion, prevSuggestion } = useQuerySuggestions();
  const { invoke, data } = useSearch();
  const [query, setQuery] = useState("");
  const [searchResults, setSearchResults] = useState<SearchResultDetail[]>([]);
  const navigate = useNavigator();

  useEffect(() => {
    if (data !== undefined) {
      setSearchResults((_) => data);
    }
  }, [data]);

  useEffect(() => {
    suggestQueries(query);
    if (query.length > 5) {
      invoke(query);
    }
  }, [invoke, query, suggestQueries]);

  useEffect(() => {
    console.log(data);
  }, [data]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "ArrowDown") {
      nextSuggestion();
    } else if (e.key === "ArrowUp") {
      prevSuggestion();
    } else if (e.key === "Tab" && currentSuggestion) {
      e.preventDefault();
      setQuery(query + currentSuggestion);
    } else if (e.key === "Enter") {
      e.preventDefault();
      setQuery(query + (currentSuggestion ?? ""));
      invoke(query + (suggestions ?? ""));
    }
  };

  const onClearClick = () => {
    setQuery("");
    setSearchResults([]);
  };

  const onResultClick = (e: SearchResultDetail) => {
    navigate(e.routeType, { mode: e.contentMode });
    if (props.onDismissed !== undefined) {
      props.onDismissed();
    }
  };

  return (
    <Modal show={props.show} onHide={props.onDismissed} centered>
      <VZModalBody style={{ height: "40rem" }} className="">
        <div className="b py-2" style={{ fontSize: "0.813rem" }}>
          Enter your query here
        </div>
        <Row>
          <Row className="align-items-center pe-0">
            <SearchContainer className="mb-3">
              <InputWrapper className="mt-4">
                <AutocompleteText>
                  {query}
                  <span style={{ opacity: 0.5 }}>{currentSuggestion ?? ""}</span>
                </AutocompleteText>

                <StyledInput
                  type="text"
                  value={query}
                  onChange={handleInputChange}
                  onKeyDown={handleKeyDown}
                  placeholder="Search..."
                  autoFocus
                />
              </InputWrapper>
            </SearchContainer>
            <ClearButton className="col-auto" onClick={onClearClick}>
              Clear
            </ClearButton>
          </Row>
          <HintText>
            Use the Tab key to select a suggestion, or press Enter to search. You may use the "up" and "down" arrow keys
            to cycle through suggestions.
          </HintText>
        </Row>

        {searchResults.length !== 0 ? <Results data={searchResults} onRowClick={onResultClick} /> : <DefaultResults />}
      </VZModalBody>
    </Modal>
  );
};

const defaultSearchData = [
  "Change wifi password",
  "Disable 6Ghz radio",
  "Create a parental rule",
  "Expose a device to the internet",
  "Change admin password",
];

const DefaultResults = () => {
  return (
    <Row className="d-flex flex-1">
      <DefaultResult>
        Need some ideas? <br /> Try searching for "{defaultSearchData[Math.floor(Math.random() * 5)]}"
      </DefaultResult>
    </Row>
  );
};

type Props = {
  data: SearchResultDetail[];
  onRowClick: (item: SearchResultDetail) => void;
};

const Results: React.FC<Props> = ({ data, onRowClick }) => {
  return (
    <Container className="p-0 m-0 flex-1" style={{ maxHeight: "20rem", overflow: "scroll" }}>
      {data.map((resultItem) => (
        <ResultRow key={resultItem.id} onClick={() => onRowClick(resultItem)}>
          <ResultHeader className="b m-1">{resultItem.title}</ResultHeader>
          <Col className="m-1">{resultItem.description}</Col>
        </ResultRow>
      ))}
    </Container>
  );
};


I want to stop getting a new random message but it should be random but its getting changed on every rerender

import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import Cookies from 'universal-cookie';

import "./LoginPage.css"
import { ReactComponent as VZLogo } from "../../images/VZLogo.svg"
import RouterLogin from "../../images/cr1000a/VZRouterLogin.png"
import RouterFront from "../../images/cr1000a/RouterFront.png"
import Tooltip from '../../common/tooltip/Tooltip';
import getMenuListData from '../../constants/SideBarData';
import { HelpComponent } from '../../common/help/HelpComponent';
import Footer from '../../common/footer/Footer'
import TooltipContent from './TooltipContent'
import { prplStdHash, fieldRouterHash, userNameHash } from './LoginUtils';
import CONFIG from '../../config/env.json'
import { VZCheckbox } from '../../common/checkbox/VZCheckbox'
import { fetchRequests } from "../../utils/FetchRequest";
import { QSWFlowpage } from '../system/quick-setup-wizard/qsw-flow-page/QSWFlowPage';

const LoginPage = () => {

    const [rememberMe, setRememberMe] = useState(false)
    const [password, setPassword] = useState('')
    const [showModal, setShowModal] = useState(false)
    const [timeRemaining, setTimeRemaining] = useState(0)
    const [showPassword, setShowPassword] = useState(false)
    const [hideLoginWarning, setHideLoginWarning] = useState(true)
    const [disableLoginButton, setDisableLoginButton] = useState(false);
    const [currentPage, setCurrentPage] = useState(0);
    const navigate = useNavigate();
    const [isCustomPassword, setIsCustomPassword] = useState(false);
    const [loginNeeded, setLoginNeeded] = useState(true);
    const [cookieError, setCookieError] = useState(false);

    useEffect(() => {
        fetchRequests({ url: CONFIG?.LOGIN_META_DATA_URL }).then(metaData => {
            if (metaData?.adminPwdChanged !== undefined && metaData?.passwordRequired !== undefined) {
                setIsCustomPassword(metaData?.adminPwdChanged);
                setLoginNeeded(metaData?.passwordRequired)
            }
        })
        // eslint-disable-next-line
    }, []);
    const handleRememberMeChange = ()=>{
        setRememberMe(!rememberMe)
    }

    const handlePassword = event => {
        setPassword(event.target.value);
    }

    const getTimeRemainingStr = () => {
        if (timeRemaining < 60) {
            return timeRemaining + " seconds"
        } else {
            const h = Math.floor(timeRemaining / 3600);
            const m = Math.floor(timeRemaining % 3600 / 60);
            const s = Math.floor(timeRemaining % 3600 % 60);

            const hDisplay = h > 0 ? h + (h === 1 ? " hour " : " hours ") : "";
            const mDisplay = m > 0 ? m + (m === 1 ? " minute " : " minutes ") : "";
            const sDisplay = s > 0 ? s + (s === 1 ? " second" : " seconds") : "";

            return hDisplay + mDisplay + sDisplay;
        }
    }

    const loadQswPage = () => setCurrentPage(1);

    const goBack = () => setCurrentPage(e => --e);

    useEffect(() => {
        const onKeyDown = (e) => {
            if (e.key === 'Enter') {
                authenticate()
            }
        }
        window.addEventListener('keydown', onKeyDown)
        return () => window.removeEventListener('keydown', onKeyDown)
        // eslint-disable-next-line
    }, [password]);

    const setAuthCookie = (response) => {
        setHideLoginWarning(true);
        const cookies = new Cookies();

        if (response?.cookie) {
            cookies.set('MyNetworkSettingsAuth', response?.cookie);
        }
        else {
            setCookieError(true);
        }
    }

    const login = (token) => {
        const username = userNameHash('admin', token?.salt)
        const pass = token?.md5Hashed ? fieldRouterHash(password, token?.salt) : prplStdHash(password, token?.salt);

        fetchRequests({
            url: CONFIG.LOGIN_URL, body: JSON.stringify({ keepMeSignIn: rememberMe }),
            headers: loginNeeded ? { 'USERNAME': username, 'PASSWORD': pass } : {}
        }).then((response) => {
            window.attempts = token?.failedCount;
            if (response?.responseCode === "200 OK") {
                setAuthCookie(response)
                if (response?.QSWPerformed === 0) {
                    loadQswPage();
                } else {
                    navigate(getMenuListData('Basic')[0]['path']);
                }
            } else {
                setHideLoginWarning(false)
                setDisableLoginButton(false);
            }

        }).catch((e) => { throw (e) })
    }

    const authenticate = async () => {
        if (currentPage === 0) {
            setDisableLoginButton(true);

            fetchRequests({ url: CONFIG.LOGIN_TOKEN_URL }).then((token) => {
                let allowLogin = true;

                if (token?.failedCount > token?.banTime) {
                    const loginTimeRemaining = token?.failedCount < 50 ? 60 : 86400;

                    if (token?.timeRemaining < loginTimeRemaining && token?.timeRemaining !== 0) {
                        allowLogin = false;
                        setHideLoginWarning(false);
                        setTimeRemaining(loginTimeRemaining - token?.timeRemaining);
                    }
                }
                if (allowLogin) {
                    if (token?.md5Hashed !== undefined) {
                        login(token)
                    } else {
                        setCookieError(true);
                    }
                }
            })
            setDisableLoginButton(false);
        }
    }

    const handleHelpModal = () => {
        setShowModal(!showModal)
    }

    return (
        <div className='vz-full-page'>
            <div className='row custom_topbar'>
                <div className='div_heading'>
                    <div><VZLogo className='vz_logo_login' /></div>
                    <div className='custom_help' onClick={() => setShowModal(true)}>Help</div>
                </div>
            </div>
            <div className='login-container'>
                {currentPage === 0 &&
                    <div className='login-box'>
                        <div className={`qsw-flow-page-side-col qsw-flow-left-col login-img-container`}>
                            <img className={isCustomPassword ? "login-img-custom" : "login-img-default"} src={isCustomPassword ? RouterFront : RouterLogin} alt='' />
                        </div>
                        <div className='login-right-container'>
                            <div className='login-right-info'>
                                <div className='hb login_header'>Log in to Network Settings</div>
                                {
                                    loginNeeded && <>
                                        <div className='login-desc t'>Enter the Network Settings Password located on the information sticker on your router.</div>
                                        <div className='pass t'>Network Settings Password</div>
                                        <div className='password-box'>
                                            <input type={showPassword ? 'text' : 'password'} className={`login-password-field h ${!hideLoginWarning ? "warning_field" : ""}`} onChange={handlePassword} />
                                            <span onClick={() => setShowPassword(!showPassword)} className='icon-passwords' tabIndex="0">
                                                <i className="icon icon-accessibility"></i>
                                            </span>
                                        </div></>
                                }
                                <label className='warning' hidden={hideLoginWarning}>
                                    {
                                        timeRemaining > 0 ? "Login has been disabled for " + getTimeRemainingStr() + ". If you have not changed your password, you can find it on the router's sticker." :
                                            "Your password has an error, please try again. If you need to reset your password, you will need to reset the device to factory default by pressing the reset button on the back of the device for 15 seconds. To login use the password on the device."
                                    }
                                </label>

                                <label className='warning red-text' hidden={!cookieError}>
                                    {
                                        "Something went wrong. Please re-try"
                                    }
                                </label>
                                <div className='remember_section'>
                                    <VZCheckbox
                                        checked={rememberMe}
                                        onChange={handleRememberMeChange}
                                        className="remember_button"
                                    />
                                    <div className='hb checkbox_label'>Keep Me Signed In </div>
                                    <Tooltip content={<TooltipContent />}><i tabIndex="0" className='icon icon-tooltip'></i></Tooltip>
                                </div>
                                <div>
                                    <button className={`hb login_button ${disableLoginButton ? "disabled-login-button" : ""}`} onClick={authenticate} disabled={disableLoginButton} >Log In</button>
                                </div>
                            </div>
                            <Footer />
                        </div>
                    </div>
                }
                {currentPage === 1 && <QSWFlowpage backFunctionality={goBack} endFlow={() => navigate(getMenuListData('Basic')[0]['path'])} />}
            </div>
            <HelpComponent showHelpModel={showModal} onClick={handleHelpModal} />
        </div>
    )

}

export default LoginPage;

import React, { useEffect } from "react";
import { Navigate, Route, Routes, useLocation, useNavigate } from 'react-router-dom';

import "./css/App.css";
import { getCookie } from "./utils/common"
import lazyLoadingSpinner from './common/lazy-loading-spinner/LazyLoadingSpinner';
import Cookies from "universal-cookie";

//Please Replace the '/pages/placeholder-page/Placeholder' with respective Page is developed path
const LandingPage = lazyLoadingSpinner(() => import('./pages/landing-page/LandingPage'))
const FirmwarePage = lazyLoadingSpinner(() => import('./pages/firmware-page/FirmwarePage'))
const LoginPage = lazyLoadingSpinner(() => import('./pages/login-page/LoginPage'))
const DeveloperModePage = lazyLoadingSpinner(() => import('./pages/developer-mode-page/DeveloperModePage'))
//Home-pages
const HomePage = lazyLoadingSpinner(() => import('./pages/home/HomePage'))
const Notifications = lazyLoadingSpinner(() => import('./pages/placeholder-page/Placeholder'))  //under development-page
//Wi-if-pages
const BasicPrimaryNetwork = lazyLoadingSpinner(() => import('./pages/wifi/primary-network-page/basic/BasicPrimaryNetwork'))
const AdvancedPrimaryNetwork = lazyLoadingSpinner(() => import('./pages/wifi/primary-network-page/adv/AdvancedPrimaryNetwork'))
const GuestIotNetwork = lazyLoadingSpinner(() => import('./pages/wifi/guest-iot-network-page/GuestIoTNetwork'));
const WPSPage = lazyLoadingSpinner(() => import('./pages/wifi/wps-page/WPSPage'))
const RadioManagement = lazyLoadingSpinner(() => import('./pages/wifi/radio-management/RadioManagement'))
//Device-pages
const DevicePage = lazyLoadingSpinner(() => import('./pages/device-page/device/DevicePage'))
const DeviceOptimization = lazyLoadingSpinner(() => import('./pages/placeholder-page/Placeholder'))  //under development-page
const DeviceInformationPage = lazyLoadingSpinner(() => import('./pages/device-page/device/device-information/DeviceInformationPage'))
const ParentControlsPage = lazyLoadingSpinner(() => import('./pages/device-page/parental/ParentalControlsPage'))
const ParentalEditPage = lazyLoadingSpinner(() => import('./pages/device-page/parental/parental-edit-page/ParentalEditPage'))
//service-pages
/* uncomment this once requirement comes */
// const HomwNetworkProtection = lazyLoadingSpinner(() => import('./pages/placeholder-page/Placeholder'))   //under development-page
// const ServiceOptimization = lazyLoadingSpinner(() => import('./pages/placeholder-page/Placeholder'))    //under development-page
// const WifiSensing = lazyLoadingSpinner(() => import('./pages/placeholder-page/Placeholder'))            //under development-page
//security&Firewall-pages
const SecurityFirewall = lazyLoadingSpinner(() => import('./pages/security-firewall/general/General'))
const AccessControl = lazyLoadingSpinner(() => import('./pages/security-firewall/access-control/AccessControl'))
const DMZHost = lazyLoadingSpinner(() => import('./pages/security-firewall/DMZ-host/DMZHost'))
const IPv6Pinholes = lazyLoadingSpinner(() => import('./pages/security-firewall/ipv6-pinhole/IPv6Pinhole'))
const PortForwarding = lazyLoadingSpinner(() => import('./pages/security-firewall/port-forwarding/PortForwarding'))
const PortForwardingRules = lazyLoadingSpinner(() => import('./pages/security-firewall/port-forwarding-rules/PortForwardingRules'))
const PortTriggering = lazyLoadingSpinner(() => import('./pages/security-firewall/port-triggering/PortTriggering'))
const SchedulerRules = lazyLoadingSpinner(() => import('./pages/security-firewall/scheduler-rules/SchedulerRules'))
const RuleScheduler = lazyLoadingSpinner(() => import('./pages/security-firewall/scheduler-rules/rule-scheduler/RuleScheduler'))
const SipAlg = lazyLoadingSpinner(() => import('./pages/security-firewall/sip-alg/SipAlg'))
//network-pages
const ARPPage = lazyLoadingSpinner(() => import('./pages/network/arp-page/ARPPage'))
const DNSServer = lazyLoadingSpinner(() => import('./pages/network/dns-server/DNSServer'))
const DynamicDNS = lazyLoadingSpinner(() => import('./pages/network/dynamic-dns/DynamicDNS'))
const IPv4AddressDistributionPage = lazyLoadingSpinner(() => import('./pages/network/ipv4-address-distribution/IPv4AddressDistributionPage'))
const IPv4DHCPPage = lazyLoadingSpinner(() => import('./pages/network/ipv4-address-distribution/IPv4DHCPPage'))
const IPv4DHCPSettingsPage = lazyLoadingSpinner(() => import('./pages/network/ipv4-address-distribution/IPv4DHCPSettingsPage'))
const IPv4DHCPConnectionPage = lazyLoadingSpinner(() => import('./pages/network/ipv4-address-distribution/IPv4DHCPConnectionPage'))
const IPv6 = lazyLoadingSpinner(() => import('./pages/network/ipv6-configuration/IPv6Config'))
const IPv6AddressDistribution = lazyLoadingSpinner(() => import('./pages/network/ipv6-address-distribution/IPv6AddressDistribution'))
const IPv6AddressConnections = lazyLoadingSpinner(() => import('./pages/network/ipv6-address-distribution/IPv6AddressConnections'))
const IPv6DHCPSettings = lazyLoadingSpinner(() => import('./pages/network/ipv6-address-distribution/IPv6DHCPSettings'))
const NDPPage = lazyLoadingSpinner(() => import('./pages/network/ndp-page/NDPPage'))
const NetworkConnections = lazyLoadingSpinner(() => import('./pages/network/network-connections/main-page/NetworkConnectionsMainPage'))
const NetworkStatus = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-status-page/NetworkStatusPage'))
const ConnectionStatusPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-status-page/ConnectionStatusPage'))
const WiFiConnectionSettingsPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-settings-page/WiFiConnectionSettingsPage'))
const EthernetSettingsPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-settings-page/EthernetSettingsPage'))
const CoaxSettingsPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-settings-page/CoaxSettingsPage'))
const CoaxLanPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/coax-lan-page/CoaxLanPage'))
const BroadbandSettingsPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-settings-page/BroadbandSettingsPage'))
const HomeNetworkSettingsPage = lazyLoadingSpinner(() => import('./pages/network/network-connections/network-settings-page/HomeNetworkSettingsPage'))
const NetworkObjects = lazyLoadingSpinner(() => import('./pages/network/network-objects/NetworkObjects'))
const PortConfiguration = lazyLoadingSpinner(() => import('./pages/network/port-configuration/PortConfiguration'))
const Routing = lazyLoadingSpinner(() => import('./pages/network/routing/Routing'))
const StaticNAT = lazyLoadingSpinner(() => import('./pages/network/static-nat/StaticNat'))
//Diagnotic-pages
const Bandwidth = lazyLoadingSpinner(() => import('./pages/diagnostics-monitoring/bandwidth/Bandwidth'))
const Diagnostics = lazyLoadingSpinner(() => import('./pages/diagnostics-monitoring/diagnostics/Diagnostics'))
//TODO: uncomment this once requirement comes
// const SpeedTest = lazyLoadingSpinner(() => import('./pages/diagnostics-monitoring/speed-test/SpeedTest'))
const SystemLogging = lazyLoadingSpinner(() => import('./pages/diagnostics-monitoring/system-logging/SystemLogging'))
const SystemWideConnections = lazyLoadingSpinner(() => import('./pages/diagnostics-monitoring/system-wide-connections/SystemWideConnections'))
//System-pages
const SystemStatus = lazyLoadingSpinner(() => import('./pages/system/system-status/SystemStatus'))
const DateTimePage = lazyLoadingSpinner(() => import('./pages/system/date-time/DateTime'))
const FactoryReset = lazyLoadingSpinner(() => import('./pages/system/factory-reset/FactoryReset'))
const LEDPage = lazyLoadingSpinner(() => import('./pages/system/led/LEDBrightness'))
const OpenSourcePage = lazyLoadingSpinner(() => import('./pages/system/open-source/OpenSource'))
const Wizard = lazyLoadingSpinner(() => import('./pages/system/quick-setup-wizard/always-qsw-page/AlwaysQSW'))                       //under development-page
const RebootRouter = lazyLoadingSpinner(() => import('./pages/system/reboot-router/RebootRouter'))
const RemoteAdmin = lazyLoadingSpinner(() => import('./pages/system/remote-administration/RemoteAdministration'))
const SystemSettings = lazyLoadingSpinner(() => import('./pages/system/system-settings/SystemSettings'))
const EditService = lazyLoadingSpinner(() => import('./pages/security-firewall/port-forwarding-rules/edit-services/EditService'))

function Router() {
  const pathName = useLocation().pathname;
  const cookie = getCookie("MyNetworkSettingsAuth");

  const navigate = useNavigate();

  //Clears all stored timeouts
  const clearAllTimeoutsIntervals = () => {
    const timeouts = window.mynetworksettingsTimeouts;
    if (timeouts !== undefined)
      timeouts.forEach(val => clearTimeout(val))
    window.mynetworksettingsTimeouts = undefined

    const intervals = window.mynetworksettingsIntervals;
    if (intervals !== undefined)
      intervals.forEach(val => clearInterval(val))
    window.mynetworksettingsIntervals = undefined
  }

  const checkCookie = () => {
    if (pathName !== "/" && pathName !== "/login") {
      const cookie = getCookie("MyNetworkSettingsAuth");

      if (cookie === undefined || cookie === "") {
        navigate("/login");
      }
    }
    setTimeout(() => {
      checkCookie()
    }, 1000);
  }

  useEffect(() => { 
    checkCookie();
    const temp = ()=>{
        const cookies = new Cookies();
        cookies.remove('MyNetworkSettingsAuth');
    }
    window.addEventListener('beforeunload', temp);
    return ()=>{
      window.removeEventListener('beforeunload', temp);
    }
    // eslint-disable-next-line
  }, [])

  clearAllTimeoutsIntervals();

  if (pathName === "/") {
    return <Navigate to={{ pathname: "/login" }} />
  }

  if ((cookie === undefined || cookie === "") && (pathName !== "/" && pathName !== "/login")) {
    navigate("/login");
  }

  if (cookie && cookie !== "" && (pathName === "/" || pathName === "/login")) {
    navigate("/basic/home");
  }

  return (
    <div>
      <Routes>
        <Route path='/login' element={<LoginPage />} />
        <Route path='/basic' element={<LandingPage />}>
          { /* Home-pages*/}
          <Route path='/basic/home' element={<HomePage />} />
          { /* Wifi-pages*/}
          <Route path='/basic/wifi/primary' element={<BasicPrimaryNetwork />} />
          <Route path='/basic/wifi/guest' element={<GuestIotNetwork />} />
          <Route path='/basic/wifi/iot' element={<GuestIotNetwork />} />
          <Route path='/basic/wifi/wps' element={<WPSPage />} />
          { /* Devices-pages*/}
          <Route path='/basic/devices/list' element={<DevicePage />} />
          <Route path='/basic/devices/list/settings/:id' element={<DeviceInformationPage />} />
          <Route path='/basic/devices/parental' element={<ParentControlsPage />} />
          <Route path="/basic/devices/parental/:type" element={<ParentalEditPage />} />
          <Route path="/basic/devices/parental/:type/:id" element={<ParentalEditPage />} />
          { /* System-pages*/}
          <Route path='/basic/system/status' element={<SystemStatus />} />
          <Route path='/basic/system/opensource' element={<OpenSourcePage />} />
        </Route>
        <Route path='/adv' element={<LandingPage />}>
          { /* Home-pages*/}
          <Route path='/adv/home' element={<HomePage />} />
          <Route path='/adv/home/notifications' element={<Notifications />} />
          { /* Wifi-pages*/}
          <Route path='/adv/wifi/primary' element={<AdvancedPrimaryNetwork />} />
          <Route path='/adv/wifi/guest' element={<GuestIotNetwork />} />
          <Route path='/adv/wifi/iot' element={<GuestIotNetwork />} />
          <Route path='/adv/wifi/wps' element={<WPSPage />} />
          <Route path='/adv/wifi/channel/settings' element={<RadioManagement />} />
          <Route path='/adv/wifi/channel/history' element={<RadioManagement />} />
          { /* Devices-pages*/}
          <Route path='/adv/devices/list' element={<DevicePage />} />
          <Route path='/adv/devices/list/settings/:id' element={<DeviceInformationPage />} />
          <Route path='/adv/devices/optimization' element={<DeviceOptimization />} />
          <Route path='/adv/devices/parental' element={<ParentControlsPage />} />
          <Route path="/adv/devices/parental/:type/" element={<ParentalEditPage />} />
          <Route path="/adv/devices/parental/:type/:id" element={<ParentalEditPage />} />
          { /* Services-pages*/}
          {/* uncomment this once requirement comes */}
          {/* <Route path='/adv/services/homenetworkprotection' element={<HomwNetworkProtection />} />
            <Route path='/adv/devices/serviceoptimization' element={<ServiceOptimization />} />
            <Route path='/adv/devices/wifisensing' element={<WifiSensing />} /> */}
          { /* Firewall-pages*/}
          <Route path='/adv/firewall/general' element={<SecurityFirewall />} />
          <Route path='/adv/firewall/acl' element={<AccessControl />} />
          <Route path='/adv/firewall/dmzhost' element={<DMZHost />} />
          <Route path='/adv/firewall/pinholes' element={<IPv6Pinholes />} />
          <Route path='/adv/firewall/portforward' element={<PortForwarding />} />
          <Route path='/adv/firewall/portrules' element={<PortForwardingRules />} />
          <Route path='/adv/firewall/portrules/editservice' element={<EditService />} />
          <Route path='/adv/firewall/porttrigger' element={<PortTriggering />} />
          <Route path='/adv/firewall/schedules' element={<SchedulerRules />} />
          <Route path='/adv/firewall/schedules/create' element={<RuleScheduler />} />
          <Route path='/adv/firewall/sipalg' element={<SipAlg />} />
          { /* NetworkSetting-pages*/}
          <Route path='/adv/network/arp' element={<ARPPage />} />
          <Route path='/adv/network/dnsserver' element={<DNSServer />} />
          <Route path='/adv/network/ddns' element={<DynamicDNS />} />
          <Route path='/adv/network/ipv4distribution' element={<IPv4AddressDistributionPage />} />
          <Route path='/adv/network/ipv4distribution/dhcp_settings' element={<IPv4DHCPSettingsPage />} />
          <Route path='/adv/network/ipv4distribution/connection' element={<IPv4DHCPPage />} />
          <Route path='/adv/network/ipv4distribution/connection_edit/:id' element={<IPv4DHCPConnectionPage />} />
          <Route path='/adv/network/ipv6' element={<IPv6 />} />
          <Route path='/adv/network/ipv6distribution' element={<IPv6AddressDistribution />} />
          <Route path='/adv/network/ipv6distribution/connection' element={<IPv6AddressConnections />} />
          <Route path='/adv/network/ipv6distribution/dhcp_settings' element={<IPv6DHCPSettings />} />
          <Route path='/adv/network/ndp' element={<NDPPage />} />
          <Route path='/adv/network/networkconnections' element={<NetworkConnections />} />
          <Route path='/adv/network/networkconnections/networkstatus' element={<NetworkStatus />} />
          <Route path='/adv/network/networkconnections/networksettings' element={<HomeNetworkSettingsPage />} />
          <Route path='/adv/network/networkconnections/broadsettings' element={<BroadbandSettingsPage />} />
          <Route path='/adv/network/networkconnections/ethsettings' element={<EthernetSettingsPage />} />
          <Route path='/adv/network/networkconnections/coaxsettings' element={<CoaxSettingsPage />} />
          <Route path='/adv/network/networkconnections/lancoax' element={<CoaxLanPage />} />
          <Route path='/adv/network/networkconnections/wlsettings/:id' element={<WiFiConnectionSettingsPage />} />
          <Route path='/adv/network/networkconnections/:type' element={<ConnectionStatusPage />} />
          <Route path='/adv/network/networkconnections/:type/:id' element={<ConnectionStatusPage />} />
          <Route path='/adv/network/networkobjects' element={<NetworkObjects />} />
          <Route path='/adv/network/portconf' element={<PortConfiguration />} />
          <Route path='/adv/network/routing' element={<Routing />} />
          <Route path='/adv/network/staticnat' element={<StaticNAT />} />
          { /* Monitoring-pages*/}
          <Route path='/adv/monitoring/bandwidth' element={<Bandwidth />} />
          <Route path='/adv/monitoring/diagnostics' element={<Diagnostics />} />
          {/* Uncomment if requirement is brought back */}
          {/* <Route path='/adv/monitoring/speedtest' element={<SpeedTest />} /> */}
          <Route path='/adv/monitoring/log/:id' element={<SystemLogging />} />
          <Route path='/adv/monitoring/fullstatus' element={<SystemWideConnections />} />
          { /* System-pages*/}
          <Route path='/adv/system/status' element={<SystemStatus />} />
          <Route path='/adv/system/datetime' element={<DateTimePage />} />
          <Route path='/adv/system/saverestore' element={<FactoryReset />} />
          <Route path='/adv/system/brightness' element={<LEDPage />} />
          <Route path='/adv/system/opensource' element={<OpenSourcePage />} />
          <Route path='/adv/system/setup' element={<Wizard />} />
          <Route path='/adv/system/reboot' element={<RebootRouter />} />
          <Route path='/adv/system/remoteadmin' element={<RemoteAdmin />} />
          <Route path='/adv/system/system' element={<SystemSettings />} />
        </Route >
        {/* Hidden GUI Pages */}
        <Route path='/' element={<LandingPage isHidden={true} />}>
          <Route path='/firmware_upgrade/' element={<FirmwarePage />} />
          <Route path='/developer_mode/' element={<DeveloperModePage />} />
        </Route>
      </Routes >
    </div >
  );
}

export default Router;

I want to set the remember me as cookie and get it in the Router page 

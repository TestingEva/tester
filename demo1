import React, { useEffect, useMemo, useState } from 'react'

import { useDispatch, useSelector } from 'react-redux'
import { useNavigate, useParams } from 'react-router-dom'
import { v4 as uuidv4 } from 'uuid'
import Footer from '../../../common/footer/Footer'
import { HeaderWithBody } from '../../../common/header/Header'
import VZLoader from '../../../common/loader/Loader'
import CONFIG from '../../../config/env.json'
import { SystemLoggingConstants } from '../../../constants/Diagnostics'
import { fetchRequests } from '../../../utils/FetchRequest'
import { fetchDateTimeRequest } from '../../system/date-time/Action'
import { clearSysLogRequest, fetchSysLogRequest } from './Action'
import './SystemLogging.css'
import { TypeSelectionHeader } from './sys-log-components/TypeSelectionHeader'
import FirewallLoggingSettings from './sys-logging-pages/FirewallLoggingSettings'
import { MainLoggingPage } from './sys-logging-pages/MainLoggingPage'
import TimeSettingsPage from './sys-logging-pages/TimeSettingsPage'

const SystemLogging = () => {
    const apiData = useSelector((state) => {
        return state?.sysLog?.data
    })
    const localDateTimeData = useSelector((state) => state?.dateTime?.data)
    const params = useParams()
    const dispatch = useDispatch()
    const navigate = useNavigate()
    const [loadPage, setLoadPage] = useState(false)
    const [selectedLogType, setSelectedLogType] = useState('system')
    const [currentData, setCurrentData] = useState([])
    const [selectedPageType, setSelectedPageType] = useState(0)
    const [timeData, setTimeData] = useState({})
    const [startTimeData, setStartTimeData] = useState()
    const [endTimeData, setEndTimeData] = useState()
    const [componentId, setComponentId] = useState(uuidv4())
    const [cumulativeOffset, setCumulativeOffset] = useState(100)
    const [isDataRemaining, setIsDataRemaining] = useState(false)

    const requestData = useMemo(() => {
        return {
            requestId: componentId,
            logType: SystemLoggingConstants?.requestLogType?.[params?.id],
            startDateTime: startTimeData,
            endDateTime: endTimeData,
            offset: 0,
            limit: 100,
        }
    }, [params, startTimeData, endTimeData, componentId])


    const clearLog = () => {
        setCurrentData([])
        dispatch(
            clearSysLogRequest({
                body: { logType: SystemLoggingConstants?.requestLogType?.[params?.id] },
            })
        )
    }

    const subtractDaysFromLocalDateTime = (days) => {
        const localDate = new Date(timeData?.time)
        localDate?.setDate(localDate?.getDate() - days)
        return `${localDate?.toISOString()}`
    }

    const filterLogs = ({ type = 'prevDay', startTime, endTime }) => {

        switch (type) {
            case 'prevDay':
                setStartTimeData(subtractDaysFromLocalDateTime(1))
                setEndTimeData(new Date(timeData?.time).toISOString())
                break
            case 'prevWeek':
                setStartTimeData(subtractDaysFromLocalDateTime(7))
                setEndTimeData(new Date(timeData?.time).toISOString())
                break
            default:
                setStartTimeData(startTime)
                setEndTimeData(endTime)
                break
        }
        setSelectedPageType(0)
    }

    function saveLogs() {
        fetchRequests({ url: CONFIG?.SYS_LOGGING_DOWNLOAD_LOG, headers: { responseType: "blob" }, needJson: false, body: JSON.stringify({ logType: SystemLoggingConstants?.requestLogType?.[params?.id] }) }).then(rData => { return rData?.blob() }).then(res => {
            const blob = new Blob([res], { type: 'application/text' });
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = `messages_${SystemLoggingConstants?.logFileName?.[params?.id]}.log`;
            link.click();
            window.URL.revokeObjectURL(link.href);
        })
    }

    const refreshPage = () => {
        window.scrollTo(0, 0)
        setCurrentData([])
        setCumulativeOffset(100)
        filterLogs({ type: "prevDay" })
        setComponentId(uuidv4())
    }
    useEffect(() => {
        setSelectedLogType(params?.id)
        if (timeData?.time) {
            setStartTimeData(subtractDaysFromLocalDateTime(1))
            setEndTimeData(subtractDaysFromLocalDateTime(0))
        }
        // eslint-disable-next-line
    }, [params])

    useEffect(() => {
        if (startTimeData && endTimeData) {
            window.scrollTo(0, 0)
            setCurrentData([])
            setLoadPage(false)
            setCumulativeOffset(100)
            dispatch(fetchSysLogRequest({ body: { ...requestData, requestId: uuidv4() } }))
        }
        // eslint-disable-next-line
    }, [params.id, dispatch, requestData])

    useEffect(() => {
        if (localDateTimeData && Object.keys(localDateTimeData)?.length) {
            setTimeData({
                time: localDateTimeData?.localDateTime,
            })
        }
    }, [localDateTimeData])

    useEffect(() => {
        if (timeData?.time) {
            setStartTimeData(subtractDaysFromLocalDateTime(1))
            setEndTimeData(new Date(timeData?.time).toISOString())
        }
        // eslint-disable-next-line
    }, [timeData])

    useEffect(() => {
        dispatch(fetchDateTimeRequest())
        setComponentId(uuidv4())
        return () => {
            setComponentId(null)
        }
        // eslint-disable-next-line
    }, [])

    const callNextLogs = () => {
        const updatedRequestData = { ...requestData, offset: cumulativeOffset, }
        apiData?.logList?.length !== 0 && dispatch(fetchSysLogRequest({ body: updatedRequestData }))
        setCumulativeOffset((prev) => prev + requestData?.limit)
    }

    const HeaderOptions = () => {
        return (
            <div className="sys-log-option-row">
                {params?.id === 'firewall' && (
                    <button id="sysLogSettingsButton"
                        className="sys-log-button-1 b"
                        onClick={() => setSelectedPageType(2)}
                    >
                        {SystemLoggingConstants?.settings}
                    </button>
                )}
                <button id="sysLogOptionsButton"
                    className="sys-log-button-1 b"
                    onClick={() => setSelectedPageType(1)}
                >
                    {SystemLoggingConstants?.opt}
                </button>
                <button id="sysLogRefreshButton" className="sys-log-button-1 b" onClick={refreshPage}>
                    {SystemLoggingConstants?.refresh}
                </button>
                <button id="sysLogSaveButton"
                    className="sys-log-button-1 sys-log-save-button b"
                    onClick={saveLogs}
                >
                    {SystemLoggingConstants?.save}
                </button>
            </div>
        )
    }

    useEffect(() => {
        if (apiData && Object?.keys(apiData)?.length !== 0 && apiData?.isLogList) {
            setIsDataRemaining(apiData?.logList?.length !== 0)
            setCurrentData(c => { return [...c, ...apiData?.logList] })
            setLoadPage(true);
        }
    }, [apiData])

    return (
        <>
            <HeaderWithBody
                title={SystemLoggingConstants?.title}
                breadcrumbData={SystemLoggingConstants?.breadcrumbData?.concat([
                    [SystemLoggingConstants?.availablePages?.[params?.id], ''],
                ])}
                extra={TypeSelectionHeader({
                    currentSelectedType: selectedLogType,
                    setSelectedPageType: setSelectedPageType,
                    navigate: navigate,
                })}
                lineMargin={'sys-log-no-mar'}
                body={selectedPageType === 0 && HeaderOptions()}
            />
            {loadPage ?
                <div className="sys-log-page">
                    <div className="flex-1">
                        {selectedPageType === 0 &&
                            Object?.keys(
                                SystemLoggingConstants?.availablePages
                            )?.indexOf(params?.id) !== -1 && (
                                <MainLoggingPage
                                    selectedLogType={selectedLogType}
                                    currentValue={currentData}
                                    clearLog={clearLog}
                                    nextLog={callNextLogs}
                                    hasMore={isDataRemaining}
                                    defaultTimezone={localDateTimeData?.timeZone}
                                />
                            )}
                        {selectedPageType === 1 &&
                            Object?.keys(
                                SystemLoggingConstants?.availablePages
                            )?.indexOf(params?.id) !== -1 && (
                                <TimeSettingsPage
                                    filterLogs={filterLogs}
                                    back={() => setSelectedPageType(0)}
                                    defaultTime={localDateTimeData?.localDateTime?.endsWith('Z') ? localDateTimeData?.localDateTime?.slice(0, -1) : localDateTimeData?.localDateTime?.slice(0, -6)}
                                    defaultTimezone={localDateTimeData?.localDateTime?.endsWith('Z') ? "Z" : localDateTimeData?.localDateTime?.slice(-6)}
                                />
                            )}
                        {selectedPageType === 2 &&
                            Object?.keys(
                                SystemLoggingConstants?.availablePages
                            )?.indexOf(params?.id) !== -1 && (
                                <FirewallLoggingSettings
                                    back={() => setSelectedPageType(0)}
                                    refreshPage={refreshPage}
                                />
                            )}
                    </div>
                    {selectedPageType !== 0 && <Footer />}
                </div>
                : <VZLoader timeoutLoader={0} inDiv={true} />}
        </>
    )

}

export default SystemLogging


So I have a bug in this page regarding the refresh functionality 

System logging page 'refresh' button always refreshing same logs, as well as click on each logging page should refresh the logs as per PROD router, but that is not working.

could you help me to find out what is the bug all about

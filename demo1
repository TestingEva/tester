import { useMemo, useState } from "react";
import { useParams } from "react-router-dom";
import { RouteType } from "../../../domain/misc/models";
import {
  usePortForwardingRulesInfo,
  useUpdateCreatePortForwardingRuleInfo,
} from "../../../domain/port-forwarding-rules/hooks";
import {
  BaseServicePort,
  IcmpServicePort,
  OtherServicePort,
  PortForwardingRulesInfo,
  Protocol,
  TcpUdpServicePort,
} from "../../../domain/port-forwarding-rules/models";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { useFormState } from "../../components/form";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { useLocator, useNavigator } from "../../components/navigator/navigator";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { AddEditPortForwardingRuleEditView } from "./AddEditPortForwardingRulesEditView";
import { AddEditPortForwardingRulesListView } from "./AddEditPortForwardingRulesListView";
import { doesNameExist, initialPortForwardingRulesData, validatePortForwardingRule } from "./utils";

enum PortForwardingRulesActiveView {
  RulesList,
  RuleEdit,
}

export const initialPortForwardingRulesData: PortForwardingRulesInfo = {
  name: "",
  description: "",
  id: "",
  ports: [],
};

export type AddEditPortForwardingRuleModal = {
  data: BaseServicePort | TcpUdpServicePort | IcmpServicePort | OtherServicePort;
  index: number;
};

export const AddEditPortForwardingRules = () => {
  const { id } = useParams();
  const navigator = useNavigator();
  const { routeType } = useLocator();
  const { data, isError, isPending, isFetching } = usePortForwardingRulesInfo();
  const { invoke, isPending: isUpdating, isError: updateError } = useUpdateCreatePortForwardingRuleInfo();
  const [activePage, setActivePage] = useState(PortForwardingRulesActiveView.RulesList);
  const [selectedServicePort, setSelectedServicePort] = useState<AddEditPortForwardingRuleModal>();
  const [editingPortErrors, setEditingPortErrors] = useState<string[]>([]);

  const initialState = useMemo(() => {
    if (
      routeType === RouteType.PORT_FWD_RULES_CREATE ||
      data === undefined ||
      id === undefined ||
      data[Number(id)] === undefined
    ) {
      return initialPortForwardingRulesData;
    }
    return data[Number(id)];
    //eslint-disable-next-line
  }, [routeType, data, id, isFetching]);

  console.log(initialPortForwardingRulesData);

  const { currentState, setValue, changedValues } = useFormState<PortForwardingRulesInfo>(initialState);

  const showErrorModal = useMemo(() => {
    return editingPortErrors.length > 0;
  }, [editingPortErrors]);

  const onAddButtonClick = () => {
    setSelectedServicePort({
      data: {
        sourcePort: undefined,
        destinationPort: undefined,
        protocol: Protocol.Tcp,
      },
      index: -1,
    });
    setActivePage(PortForwardingRulesActiveView.RuleEdit);
  };

  const onEditClick = (editData: AddEditPortForwardingRuleModal) => {
    setSelectedServicePort(editData);
    setActivePage(PortForwardingRulesActiveView.RuleEdit);
  };

  const onListCancelClick = () => {
    navigator(RouteType.PORT_FWD_RULES);
  };

  const onEditCancelClick = () => {
    setActivePage(PortForwardingRulesActiveView.RulesList);
  };

  const onEditApplyClick = (currentStateParams: AddEditPortForwardingRuleModal) => {
    let error = validatePortForwardingRule(currentStateParams);
    setEditingPortErrors(error);
    if (error.length === 0) {
      const temp = currentState.ports;
      if (currentStateParams.index !== -1) {
        temp[currentStateParams.index] = currentStateParams.data;
      } else {
        temp.push(currentStateParams.data);
      }
      setValue("ports", temp);
      setActivePage(PortForwardingRulesActiveView.RulesList);
    }
  };

  const onApplyClick = async () => {
    let error = [];
    if (currentState.name === "") error.push("Service Name: A name must be specified.");
    if (
      (routeType === RouteType.PORT_FWD_RULES_CREATE && doesNameExist(data!, currentState.name)) ||
      (routeType === RouteType.PORT_FWD_RULES_EDIT &&
        changedValues.name !== undefined &&
        doesNameExist(data!, currentState.name))
    ) {
      error.push("Service Name: This name is already used by another protocol.");
    }
    if (currentState.ports.length === 0) {
      error.push("Server Ports: At least one server ports entry must be defined.");
    }
    setEditingPortErrors(error);
    if (error.length === 0) {
      await invoke(currentState);
      navigator(RouteType.PORT_FWD_RULES);
    }
  };

  if (isError || updateError) {
    return <ErrorIndicator />;
  }

  if (isPending || isFetching || data === undefined) {
    return <LoadingIndicator />;
  }

  //Display empty page when the Id is not present in the data
  if (routeType !== RouteType.PORT_FWD_RULES_CREATE && (isNaN(Number(id)) || data[Number(id)] === undefined)) {
    return <></>;
  }

  return (
    <>
      <VZHeader
        title="Edit Service"
        breadcrumbData={[
          { label: "Security & Firewall" },
          {
            label: "Port Forwarding Rules",
            destType: RouteType.PORT_FWD_RULES,
          },
          { label: "Edit Service" },
        ]}
      />
      {activePage === PortForwardingRulesActiveView.RuleEdit ? (
        <AddEditPortForwardingRuleEditView
          selectedServicePort={selectedServicePort!}
          errors={editingPortErrors}
          showErrorModal={showErrorModal}
          onCloseErrorModal={() => setEditingPortErrors([])}
          onEditApplyClick={onEditApplyClick}
          onEditCancelClick={onEditCancelClick}
        />
      ) : (
        <AddEditPortForwardingRulesListView
          data={currentState}
          setValue={setValue}
          onAddButtonClick={onAddButtonClick}
          onEditClick={onEditClick}
          onCancelClick={onListCancelClick}
          onCloseErrorModal={() => setEditingPortErrors([])}
          onApplyClick={onApplyClick}
          errors={editingPortErrors}
          showErrorModal={showErrorModal}
          isUpdating={isUpdating}
        />
      )}
    </>
  );
};

here why my initialPortForwardingRulesData is getting changed when i am not a all changing the value of initialPortForwardingRulesData anywhere in array some port data is comming 



type SortStateProps = {
  key: keyof PortTriggeringInfo;
  order: "asc" | "desc";
};

export const PortTriggering = () => {
  const { data, isError, isPending, isFetching } = usePortTriggeringInfo();
  const [triggerRules, setTriggerRules] = useState<PortTriggeringUiModel[]>([]);

  const initialData = useMemo(() => {
    if (data === undefined) {
      return [];
    }
    return data;
  }, [data]);
  const { addItem, removeItem, updateItem, getResult, list, hasChanges } = useListTracker(initialData, "id");

  useEffect(() => {
    if (data !== undefined) {
      const portTrigRules = data.map(convertPortTriggeringInfoToUiInfo);
      setTriggerRules([...portTrigRules]);
    }
    //eslint-disable-next-line
  }, [data, isFetching]);

  const defaultSortState: SortStateProps = useMemo(
    () => ({
      key: "name",
      order: "asc",
    }),
    // eslint-disable-next-line
    []
  );
  const [sortState, setSortState] = useState<SortStateProps>(defaultSortState);

  const sortedData = useMemo(() => {
    return sortBy(sortState.order, list, (item) => {
      const sortKey = sortState.key;
      if (sortKey === "schedule") {
        if (typeof item.schedule === "string") {
          return item.schedule;
        }
        return item.schedule.name;
      } else {
        return item[sortKey];
      }
    });
  }, [list, sortState.key, sortState.order]);

  const onSortClick = (key: keyof PortTriggeringInfo, sortOrder: "asc" | "desc") => {
    setSortState({ key: key, order: sortOrder });
    setTriggerRules(() => {
      if (triggerRules !== undefined) {
        return sortBy(sortState.order, triggerRules, (item) => {
          const sortKey = sortState.key;
          if (sortKey === "schedule") {
            if (typeof item.schedule === "string") {
              return item.schedule;
            }
            return item.schedule.name;
          } else {
            return item[sortKey];
          }
        });
      }
      return [];
    });
  };

  const onChange = <K extends keyof PortTriggeringUiModel>(index: number, key: K, value: PortTriggeringUiModel[K]) => {
    const temp = triggerRules;
    temp[index][key] = value;
    setTriggerRules([...temp]);
  };

  if (isError) {
    return <ErrorIndicator />;
  }

  if (data === undefined || isPending || triggerRules === undefined) {
    return <LoadingIndicator />;
  }

  return (
    <PortTriggeringView list={sortedData} triggerRules={triggerRules} onSortClick={onSortClick} onChange={onChange} />
  );
};


you did well but you need to reorder this triggerData in the order of the sortedData can you do this 

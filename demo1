import React, { useEffect, useMemo, useState } from "react";
import { Col } from "react-bootstrap";
import { RouteType } from "../../../../domain/misc/models";
import { RadioType, SonBandDetail, WifiBandDetails } from "../../../../domain/wifi/models";
import { OptionalComponent } from "../../../components/OptionalComponent";
import { useFormState } from "../../../components/form";
import { VZConfirmationModal } from "../../../components/vz-modal/confirmation-modal/VZConfirmationModal";
import { radioTypeToString } from "../status/utils";
import {
  BandEnableToggler,
  GroupKeyComponent,
  MacAuthComponent,
  MainWifiBandRow,
  SsidBroadcastComponent,
  WifiSecurityComponent,
  WmmConfigComponent,
} from "./WifiComponents";
import { WifiSubBandRow } from "./styles";

type Props = {
  currentState: SonBandDetail;
  isInteractionEnabled: boolean;
  isAdvContent: boolean;
  handleChange: (radioType: RadioType, newValue: Partial<WifiBandDetails>) => void;
  bandDetails: WifiBandDetails[];
  setValue: <
    K extends
      | "name"
      | "key"
      | "isEnabled"
      | "securityType"
      | "isSsidBroadcastEnabled"
      | "radioType"
      | "isRadioEnabled"
      | "macAddressControl"
  >(
    key: K,
    value: SonBandDetail[K]
  ) => void;
  routeType: RouteType;
};

export const SonEnabledView: React.FC<Props> = ({
  isInteractionEnabled,
  isAdvContent,
  handleChange,
  bandDetails,
  currentState,
  setValue,
  routeType,
}) => {
  const [showMoreOptions, setShowMoreOptions] = useState(false);
  const [isMainWifiBandEnabled, setIsMainWifiBandEnabled] = useState(false);
  const [bandFormDetails, setBandFormDetails] = useState(bandDetails);
  const [showWifiModal, setShowWifiModal] = useState(false);

  const isAnyBandEnabled = useMemo(() => {
    return bandFormDetails.some((bandInfo) => bandInfo.isEnabled);
  }, [bandFormDetails]);

  const isAllRadioDisabled = useMemo(() => {
    return bandDetails.every((bandInfo) => bandInfo.isRadioEnabled === false);
  }, [bandDetails]);

  useEffect(() => {
    setShowMoreOptions(false);
    setShowWifiModal(false);
  }, [routeType]);

  useEffect(() => {
    setIsMainWifiBandEnabled(isAnyBandEnabled);
  }, [isAnyBandEnabled]);

  const onMainBandToggle = () => {
    if (isAllRadioDisabled) {
      setShowWifiModal(true);
      return;
    }
    toggleBands();
    setIsMainWifiBandEnabled(!isMainWifiBandEnabled);
  };

  const onMainBandChange = <K extends keyof SonBandDetail>(key: K, value: SonBandDetail[K]) => {
    setValue(key, value);
  };

  const handleBandDetails = (bandInfo: WifiBandDetails, index: number) =>
    setBandFormDetails((prev) => {
      const temp = [...prev];
      temp[index] = bandInfo;
      return temp;
    });

  return (
    <>
      <MainWifiBandRow
        name={currentState.name}
        wifiKey={currentState.key}
        isBandEnabled={isMainWifiBandEnabled}
        isInteractionEnabled={isInteractionEnabled}
        onBandEnableToggle={onMainBandToggle}
        onKeyChange={(e: string) => onMainBandChange("key", e)}
        onNameChange={(e: string) => onMainBandChange("name", e)}
        showMoreOptions={showMoreOptions}
        toggleMoreOptions={() => setShowMoreOptions((prev) => !prev)}
        securityType={currentState.securityType}
      />
      <OptionalComponent show={showMoreOptions}>
        <WifiSecurityComponent
          securityType={currentState.securityType}
          radioType={currentState.radioType}
          isInteractionEnabled={isInteractionEnabled}
          onChange={(e) => onMainBandChange("securityType", e)}
        />
        <SsidBroadcastComponent
          isInteractionEnabled={isInteractionEnabled}
          onMainBandChange={onMainBandChange}
          isSsidBroadcastEnabled={currentState.isSsidBroadcastEnabled}
        />
        {currentState.macAddressControl !== undefined && (
          <MacAuthComponent
            macAccessControlinfo={currentState.macAddressControl}
            isInteractionEnabled={isInteractionEnabled}
            onApplyClick={(e) => {
              onMainBandChange("macAddressControl", e);
            }}
          />
        )}
      </OptionalComponent>
      {bandDetails.map((bandInfo, index) => (
        <BandRowDetail
          bandInfo={bandInfo}
          isInteractionEnabled={isInteractionEnabled}
          isAdvContent={isAdvContent}
          key={bandInfo.radioType}
          handleChange={handleChange}
          routeType={routeType}
          handleBandDetails={(e) => handleBandDetails(e, index)}
        />
      ))}
      <VZConfirmationModal
        title="Warning"
        show={showWifiModal}
        content={
          <>
            Wi-Fi cannot be enabled because the radio is disabled.
            <br />
            <br />
            Before enabling Wi-Fi, please first enable the radio which can be found on the following page: "Advanced{" "}
            {">"} Wi-Fi {">"} Radio Management"
          </>
        }
        warnTitle
        onSubmit={() => setShowWifiModal(false)}
        onClose={() => setShowWifiModal(false)}
        showSecondaryButton={false}
        positiveBtnText="Close"
      />
    </>
  );
};

type BandRowDetailProps = {
  bandInfo: WifiBandDetails;
  isAdvContent: boolean;
  isInteractionEnabled: boolean;
  handleChange: (radioType: RadioType, newValue: Partial<WifiBandDetails>) => void;
  routeType: RouteType;
  handleBandDetails: (bandInfo: WifiBandDetails) => void;
};

const BandRowDetail: React.FC<BandRowDetailProps> = ({
  bandInfo,
  isInteractionEnabled,
  isAdvContent,
  handleChange,
  routeType,
  handleBandDetails,
}) => {
  const { currentState, changedValues, setValue } = useFormState(bandInfo);
  const [showMoreOptions, setShowMoreOptions] = useState(false);

  const toggleBand = () => {
    setValue("isEnabled", false);
  };

  useEffect(() => {
    setShowMoreOptions(false);
  }, [routeType]);

  useEffect(() => {
    handleChange(currentState.radioType, changedValues);
    handleBandDetails(currentState);
    //eslint-disable-next-line
  }, [currentState, changedValues]);

  return (
    <>
      <WifiSubBandRow>
        <Col className="ps-0 align-content-center b">{radioTypeToString(currentState.radioType)}</Col>

        <BandEnableToggler
          isEnabled={currentState.isEnabled}
          setValue={setValue}
          isInteractionEnabled={isInteractionEnabled}
          setShowMoreOptions={setShowMoreOptions}
          showMoreOptions={showMoreOptions}
          isRadioEnabled={currentState.isRadioEnabled}
          isAdvContent={isAdvContent}
          radioType={currentState.radioType}
        />
      </WifiSubBandRow>
      <OptionalComponent
        show={showMoreOptions && (bandInfo.groupKeyConfig !== undefined || bandInfo.wmmConfig !== undefined)}
      >
        {bandInfo.groupKeyConfig !== undefined && (
          <GroupKeyComponent
            groupKeyConfig={currentState.groupKeyConfig!}
            isInteractionEnabled={isInteractionEnabled}
            setValue={setValue}
          />
        )}

        {bandInfo.wmmConfig !== undefined && (
          <WmmConfigComponent
            setValue={setValue}
            isInteractionEnabled={isInteractionEnabled}
            wmmConfig={currentState.wmmConfig!}
          />
        )}
      </OptionalComponent>
    </>
  );
};

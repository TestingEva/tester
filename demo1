import { renderHook } from "@testing-library/react";
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import fetchMock from "fetch-mock-jest";
import { useLoginMetadata } from "./hooks";

const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            retry: false
        }
    }
});

const wrapper = ({ children }: { children?: React.ReactNode }) => (
    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
);

const mockLoginMetadataResponse = {
    passwordRequired: true,
    adminPwdChanged: true
};

describe("useLoginMetadata", () => {
    afterEach(() => {
        fetchMock.restore();
    });

    test("should return login metadata", async () => {
        fetchMock.post(LOGIN_META_DATA_URL, mockLoginMetadataResponse);

        const { result, waitForNextUpdate } = renderHook(() => useLoginMetadata(), { wrapper });

        // Wait for the hook to resolve
        await waitForNextUpdate();

        expect(result.current.status).toBe("success");
        expect(result.current.data).toEqual({
            passwordLess: false,
            showRouterRearImage: false
        });
    });

    test("should handle API error", async () => {
        fetchMock.post(LOGIN_META_DATA_URL, 500);

        const { result, waitForNextUpdate } = renderHook(() => useLoginMetadata(), { wrapper });

        // Wait for the hook to resolve
        await waitForNextUpdate();

        expect(result.current.status).toBe("error");
        expect(result.current.error).toEqual(new Error("Failed to fetch login metadata"));
    });
});

let logs = {
  info: [],
  debug: [],
  warn: [],
  error: []
};

const MAX_LOGS = 10;

// Function to update logs array
const updateLogs = (level, tag, message) => {
  const timestamp = new Date().toISOString();

  // Add log entry to the appropriate log level
  logs[level].push([timestamp, level, tag, message]);

  // Check if the length of info logs array is equal to MAX_LOGS
  if (logs.info.length === MAX_LOGS) {
    // Call an API to send logs
    sendLogsToAPI(logs.info);
    // Clear the info logs array
    logs.info = [];
  }
};

// Function to send logs to API
const sendLogsToAPI = async (logArray) => {
  try {
    const response = await fetch('YOUR_API_ENDPOINT', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(logArray)
    });

    if (!response.ok) {
      throw new Error('Failed to send logs to API');
    }

    console.log('Logs successfully sent to API');
  } catch (error) {
    console.error('Error sending logs to API:', error);
  }
};

// Example usage:
updateLogs('info', 'PageLoad', 'Page loaded successfully');
updateLogs('debug', 'NetworkRequest', 'API request sent');
updateLogs('warn', 'Validation', 'Invalid input detected');
updateLogs('error', 'ServerResponse', 'Failed to fetch data from server');

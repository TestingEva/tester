import { getLoginMetadataApi, getLoginTokenApi, loginApi } from './api';
import { ApiError } from './api'; // Import ApiError if it's defined in a separate file

// Mocking the httpRequest function
jest.mock('./http_client', () => ({
  httpRequest: jest.fn(),
}));

describe('API Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('getLoginMetadataApi', () => {
    it('should return login metadata', async () => {
      // Mocking the response from httpRequest
      const mockResponse = { adminPwdChanged: true, passwordRequired: true };
      (httpRequest as jest.Mock).mockResolvedValueOnce(mockResponse);

      const result = await getLoginMetadataApi();
      expect(result).toEqual(mockResponse);
    });

    it('should throw an ApiError on failure', async () => {
      // Mocking the httpRequest to throw an error
      (httpRequest as jest.Mock).mockRejectedValueOnce(new Error('Network error'));

      await expect(getLoginMetadataApi()).rejects.toThrow(ApiError);
    });
  });

  describe('getLoginTokenApi', () => {
    it('should return login token', async () => {
      // Similar to getLoginMetadataApi test
    });

    it('should throw an ApiError on failure', async () => {
      // Similar to getLoginMetadataApi test
    });
  });

  describe('loginApi', () => {
    it('should return login response', async () => {
      // Similar to getLoginMetadataApi test
    });

    it('should throw an ApiError on failure', async () => {
      // Similar to getLoginMetadataApi test
    });
  });
});

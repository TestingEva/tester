import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { SipAlg } from "./SipAlg";
import { useSipAlgStatus, useUpdateSipAlgStatus } from "../../../domain/sip-alg/hooks";
import { useEventLogger } from "../../../domain/event-logger/hooks";

// Mock hooks
jest.mock("../../../domain/sip-alg/hooks");
jest.mock("../../../domain/event-logger/hooks");

// Mock components (if necessary)
jest.mock("../../components/loading-indicator/LoadingIndicator", () => ({
  LoadingIndicator: () => <div data-testid="loading-indicator">Loading...</div>,
}));

jest.mock("../../components/error-indicator/ErrorIndicator", () => ({
  ErrorIndicator: () => <div data-testid="error-indicator">Error!</div>,
}));

jest.mock("../../components/vz-modal/apply-settings-modal/VZApplySettingsModal", () => ({
  VZApplySettingsModal: ({ show }: { show: boolean }) =>
    show ? <div data-testid="apply-settings-modal">Apply Settings Modal</div> : null,
}));

describe("SipAlg Component", () => {
  const mockLogShaEvent = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();

    (useEventLogger as jest.Mock).mockReturnValue({
      logShaEvent: mockLogShaEvent,
    });
  });

  test("renders loading state", () => {
    (useSipAlgStatus as jest.Mock).mockReturnValue({
      isPending: true,
      isError: false,
      data: undefined,
    });

    render(<SipAlg />);

    expect(screen.getByTestId("loading-indicator")).toBeInTheDocument();
  });

  test("renders error state", () => {
    (useSipAlgStatus as jest.Mock).mockReturnValue({
      isPending: false,
      isError: true,
      data: undefined,
    });

    render(<SipAlg />);

    expect(screen.getByTestId("error-indicator")).toBeInTheDocument();
  });

  test("renders initial data and toggles state", async () => {
    const mockUpdateSipAlgStatus = jest.fn();

    (useSipAlgStatus as jest.Mock).mockReturnValue({
      isPending: false,
      isError: false,
      data: false, // Initially disabled
    });

    (useUpdateSipAlgStatus as jest.Mock).mockReturnValue({
      invoke: mockUpdateSipAlgStatus,
      isPending: false,
    });

    render(<SipAlg />);

    // Verify initial render
    expect(screen.getByText(/SIP ALG/i)).toBeInTheDocument();
    expect(screen.getByText(/Disabled/i)).toBeInTheDocument();

    // Toggle the state
    fireEvent.click(screen.getByRole("checkbox"));
    expect(screen.getByText(/Enabled/i)).toBeInTheDocument();

    // Verify logShaEvent is called
    expect(mockLogShaEvent).toHaveBeenCalledWith("sipAlgToggle");
  });

  test("enables apply changes button and calls update function", async () => {
    const mockUpdateSipAlgStatus = jest.fn();

    (useSipAlgStatus as jest.Mock).mockReturnValue({
      isPending: false,
      isError: false,
      data: false, // Initially disabled
    });

    (useUpdateSipAlgStatus as jest.Mock).mockReturnValue({
      invoke: mockUpdateSipAlgStatus,
      isPending: false,
    });

    render(<SipAlg />);

    // Toggle the state
    fireEvent.click(screen.getByRole("checkbox"));

    // Verify Apply Changes button is enabled
    const applyButton = screen.getByRole("button", { name: /apply changes/i });
    expect(applyButton).not.toBeDisabled();

    // Click Apply Changes
    fireEvent.click(applyButton);

    // Wait for async invocation
    await waitFor(() => expect(mockUpdateSipAlgStatus).toHaveBeenCalledWith(true));
    expect(mockLogShaEvent).toHaveBeenCalledWith("sipAlgApply");
  });

  test("shows modal when showApplyModal is true", () => {
    (useSipAlgStatus as jest.Mock).mockReturnValue({
      isPending: false,
      isError: false,
      data: true, // Initially enabled
    });

    (useUpdateSipAlgStatus as jest.Mock).mockReturnValue({
      invoke: jest.fn(),
      isPending: true, // Modal should be shown
    });

    render(<SipAlg />);

    expect(screen.getByTestId("apply-settings-modal")).toBeInTheDocument();
  });
});

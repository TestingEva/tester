import { fetchRequests } from "./FetchRequest";
import CONFIG from './../config/env.json'

let logs;
try {
    logs = JSON?.parse(localStorage?.getItem('logs'));
    if (!logs || typeof logs !== 'object') {
        logs = {
            info: [],
            debug: [],
            warn: [],
            error: [],
            events: []
        }
    }
}
catch (e) {
    logs = {
        info: [],
        debug: [],
        warn: [],
        error: [],
        events: []
    }
}

const threshold = {
    info: 50,
    debug: 50,
    warn: 10,
    error: 5,
    events: 50
}
const thresholdInterval = 5 * 60 * 1000;
const isConsole = false;
setInterval(async () => {
    const logArray = Object.keys(logs).reduce((acc, key) => acc.concat(logs[key]), [])
    if (logArray.length > 1) {
        await sendLogsToAPI(logArray);
        logs = {
            info: [],
            debug: [],
            warn: [],
            error: [],
            events: []
        }
        localStorage.setItem('logs', JSON.stringify(logs));
    }
}, thresholdInterval)

async function storeLogs(level) {
    if (logs[level]?.length === threshold[level]) {
        await sendLogsToAPI(logs[level]);
        logs[level] = [];
    }
    isConsole && console.log("logs", logs)
    localStorage.setItem('logs', JSON.stringify(logs));
}

export const logInfo = async (tag = "WebUi", message = "") => {
    const timestamp = new Date().toISOString();
    logs['info']?.push(`${timestamp} info ${tag} ${message}`)
    storeLogs('info');
}

export const logDebug = async (tag = "WebUi", message = "") => {
    const timestamp = new Date().toISOString();
    logs['debug']?.push(`${timestamp} debug ${tag} ${message}`)
    storeLogs('debug');
}

export const logWarn = async (tag = "WebUi", message = "") => {
    const timestamp = new Date().toISOString();
    logs['warn']?.push(`${timestamp} warn ${tag} ${message}`)
    storeLogs('warn');
}

export const logError = async (tag = "WebUi", message = "", stackTrace = "") => {
    const timestamp = new Date().toISOString();
    logs['error']?.push(`${timestamp} error ${tag} ${message} ${stackTrace}`)
    storeLogs('error');
}

export const logEvent = async (tag = "WebUi", message = "", context = "") => {
    const timestamp = new Date().toISOString();
    logs['events']?.push(`${timestamp} events ${tag} ${message} ${JSON?.stringify(context)}`)
    storeLogs('events');
}

const sendLogsToAPI = async (logArray) => {
    const formattedData = {
        logList: logArray
    }
    fetchRequests({ url: CONFIG?.SAVE_LOGS, body: JSON.stringify(formattedData) }).then(() => {
        logInfo("Logging", "Logged the Logs")
    })
};

can ypu optimize this code?

import { renderHook, waitFor } from "@testing-library/react";
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { useLoginMetadata } from "./hooks";
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';

const queryClient = new QueryClient(
    {
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    }
);

const server = setupServer(
    rest.post('http://localhost:3004/CRSP/getLoginMetadata', (req, res, ctx) => {
        return res(ctx.json({
            passwordLess: false,
            showRouterRearImage: true
        }));
    })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

type WrapperType = {
    children: JSX.Element;
}

const wrapper: React.FC<WrapperType> = (props) => (
    <QueryClientProvider client={queryClient}>{props.children}</QueryClientProvider>
);

describe("useLoginMetadata", () => {
    test("should return login metadata", async () => {
        const { result } = renderHook(() => useLoginMetadata(), { wrapper });

        await waitFor(() => expect(result.current.status).toBe("success"));

        expect(result.current.data).toEqual({
            passwordLess: false,
            showRouterRearImage: true
        });
    });

    test("should handle API error", async () => {
        server.use(
            rest.post('http://localhost:3004/CRSP/getLoginMetadata', (req, res, ctx) => {
                return res(ctx.status(500));
            })
        );

        const { result } = renderHook(() => useLoginMetadata(), { wrapper });

        await waitFor(() => expect(result.current.status).toBe("error"));

        expect(result.current.error).toEqual(new Error("Failed to fetch login metadata"));
    });
});

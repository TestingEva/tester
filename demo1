import './UniversalPnp.css'
import { useEffect, useState } from 'react'
import { RouterButton } from '../../../common/button/RouterButton'
import { VZCheckbox } from '../../../common/checkbox/VZCheckbox'
import Footer from '../../../common/footer/Footer'
import { HeaderWithBody } from '../../../common/header/Header'
import { UpnpConstants } from '../../../constants/DevicesData'
import { useDispatch, useSelector } from 'react-redux'
import { fetchUpnpRequest, updateUpnpRequest } from './Action'
import VZLoader from '../../../common/loader/Loader'
import ApplyModal from '../../../common/modal/apply-modal/ApplyModal'

const UniversalPnpPage = () => {
    const apiData = useSelector((state) => state?.universalpnp?.data)
    const dispatch = useDispatch();
    const [loadPage, setLoadPage] = useState(false);
    const [initialValue, setInitialValue] = useState({});
    const [currentValue, setCurrentValue] = useState({});
    const [disableApplyButton, setDisableApplyButton] = useState(true);
    const [showApplyModal, setShowApplyModal] = useState(false);
    const handleChange = (value, id) => {
        setCurrentValue({ ...currentValue, [id]: value });
    }
    const updateUpnp = () => {
        setShowApplyModal(true)
        dispatch(updateUpnpRequest({ body: currentValue }))
    }
    useEffect(() => {
        setDisableApplyButton(JSON.stringify(currentValue) === JSON.stringify(initialValue));
    }, [currentValue, initialValue])
    const LoadPage = () => (
        <>
            <HeaderWithBody
                title={UpnpConstants?.title}
                breadcrumbData={UpnpConstants?.breadcrumbData}
                body={
                    <RouterButton label={UpnpConstants?.apply} onEvent={updateUpnp} disable={disableApplyButton} />
                }
            />
            <div className="upnp-body">
                <div className='flex-1'>
                    <div className="upnp-content">
                        <div className="heading-body">{UpnpConstants?.body}</div>
                        {UpnpConstants?.enabledKeyValues?.map((val, index) => (
                            <div className="upnp-checkbox b" key={index}>
                                <VZCheckbox checked={currentValue?.[val?.key]} onChange={e => handleChange(e?.target?.checked, val?.key)} />
                                {val?.label}
                            </div>
                        ))}
                    </div>
                </div>
                <Footer />
            </div>
            <ApplyModal show={showApplyModal} setShowModal={setShowApplyModal} time={5000} />
        </>
    )
    useEffect(() => {
        dispatch(fetchUpnpRequest())
    }, [dispatch])
    useEffect(() => {
        if (apiData && Object?.keys(apiData)?.length !== 0) {
            setLoadPage(true);
            setCurrentValue(apiData?.data);
            setInitialValue(apiData?.data);
        }
    }, [apiData])
    return (
        <>
            {LoadPage()}
            {!loadPage && <VZLoader />}
        </>
    )
}

export default UniversalPnpPage

like currently i am sending 
{
    "autoCleanEnabled": true,
    "enabled": true
}
when the Apply changes have clicked but there is an change in the schema of the API it wants to have the payload of 
the parameters which have been changed 
like suppose 
{
    "autoCleanEnabled": false,
    "enabled": true
} was the initialValue and user changed only the autoCleanEnabled parameter so the payload must be 
{
    "autoCleanEnabled": true,
}
it must not have the enabled parameter since it doesnot got updated 
could you help me in achieving this functionality

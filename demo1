import React, { useEffect, useImperativeHandle, useMemo, useState } from "react";
import { Col } from "react-bootstrap";
import { Ipv6DeviceInfo } from "../../../domain/misc/models";
import { PinholePortRule, PinholeProtocol } from "../../../domain/pinholes/models";
import { SchedulerRuleInfo } from "../../../domain/scheduler-rules/models";
import { useFormState } from "../../components/form";
import { OptionalComponent } from "../../components/OptionalComponent";
import { VZCheckbox } from "../../components/vz-checkbox/VZCheckbox";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { getEnumValues } from "../../utils";
import { BWActionIcon } from "../bandwidth-monitoring/styles";
import { Ipv6PinholesUiModel, PinholeTableRowForwardProp, UIPinholePolicy } from "./models";
import {
  Ipv6PinholesDoneButton,
  Ipv6PinholesTableData,
  Ipv6PinholesTableRow,
  Ipv6PinholeTableHostData,
} from "./styles";
import {
  convertInternalHostToString,
  convertIpv6PinholeScheduleToUiString,
  convertPinholePolicyToUiInfo,
  convertPinholeProtocolToString,
  convertScheduleRuleToUIString,
} from "./utils";

type TableProps = {
  item: UIPinholePolicy;
  ipv6Devices: Ipv6DeviceInfo[];
  onCheckboxClick: () => void;
  onDeleteClick: () => void;
  availableSchedules: SchedulerRuleInfo[];
  onDoneClick: (
    currentState: Ipv6PinholesUiModel,
    initialPolicy: UIPinholePolicy,
    setIsEdit: React.Dispatch<React.SetStateAction<boolean>>
  ) => void;
  onEditSetNewSchedule: () => void;
};

export const Ipv6PinholesTableRowDetails = React.forwardRef<PinholeTableRowForwardProp, TableProps>(
  (
    { item, onCheckboxClick, onDeleteClick, ipv6Devices, availableSchedules, onDoneClick, onEditSetNewSchedule },
    ref
  ) => {
    const [showDetails, setShowDetails] = useState(false);
    const [isEdit, setIsEdit] = useState(false);
    const [newSch, setNewSch] = useState<string | undefined>();
    const initialData: Ipv6PinholesUiModel = useMemo(() => {
      return convertPinholePolicyToUiInfo(item, ipv6Devices, availableSchedules, newSch);
    }, [item, ipv6Devices, newSch, availableSchedules]);

    const { currentState, setValue } = useFormState(initialData);

    useImperativeHandle(ref, () => ({
      setRuleName(name) {
        setNewSch(name);
        console.log(name);
      },
    }));

    useEffect(() => {
      console.log(newSch);
    }, [newSch]);

    useEffect(() => {
      if (newSch !== undefined) {
        setIsEdit(true);
      }
    }, [newSch]);

    if (currentState.schedule === "User defined") {
      onEditSetNewSchedule();
    }

    return (
      <>
        <OptionalComponent show={isEdit === false}>
          <Ipv6PinholesTableRow key={item.id}>
            <Ipv6PinholeTableHostData className="ps-0 col-2">{item.externalHost.toString()}</Ipv6PinholeTableHostData>
            <Ipv6PinholeTableHostData className="col-2">
              {item.internalHostName !== undefined && item.internalHostName !== ""
                ? item.internalHostName
                : item.internalHost.toNormalizedString()}
            </Ipv6PinholeTableHostData>
            <td className="col-2">{convertPinholeProtocolToString(item.protocol)}</td>
            <td className="col-2">{convertScheduleRuleToUIString(item)}</td>
            <td className="col-2">{item.schedule === "Always" ? "Always" : item.schedule.name}</td>
            <td className="col-2">
              <Col className="d-flex">
                <Col>
                  <VZCheckbox checked={item.enabled} onChange={onCheckboxClick} />
                </Col>
                <Col>
                  <i
                    id={`ipv6EditRuleButton`}
                    onClick={() => {
                      setIsEdit(true);
                      setShowDetails(false);
                    }}
                    role="button"
                    className="icon icon--edit clickable"
                  ></i>
                </Col>
                <Col>
                  <i
                    id={`ipv6DeleteRuleButton`}
                    onClick={onDeleteClick}
                    role="button"
                    className="icon icon--trash clickable"
                  ></i>
                </Col>
                <BWActionIcon
                  className="icon icon--arrow"
                  onClick={() => {
                    setShowDetails((prev) => !prev);
                  }}
                  $isOpen={showDetails}
                ></BWActionIcon>
              </Col>
            </td>
          </Ipv6PinholesTableRow>
        </OptionalComponent>
        <OptionalComponent show={isEdit === true}>
          <tr>
            <td className="ps-0 col-2">
              <Col>
                <VZDropdown
                  id="Ipv6Pinholes-ExternalHost"
                  selectedItem={currentState.externalHost}
                  onSelect={(e) => setValue("externalHost", e)}
                  options={["Any", "Specify IP", "Specify domain name"]}
                  getOptionAsString={(e) => e}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{ fontSize: "0.85rem", width: "9rem", height: "2.5rem" }}
                />
              </Col>
              <Col className="mt-2">
                <OptionalComponent show={currentState.externalHost === "Specify IP"}>
                  <VZInputTextField
                    value={currentState.specifyExtIp}
                    onChange={(e) => setValue("specifyExtIp", e)}
                    style={{ fontSize: "0.9rem", width: "9rem", height: "2.5rem" }}
                  />
                </OptionalComponent>
                <OptionalComponent show={currentState.externalHost === "Specify domain name"}>
                  <VZInputTextField
                    value={currentState.domainName}
                    onChange={(e) => setValue("domainName", e)}
                    style={{ fontSize: "0.9rem", width: "9rem", height: "2.5rem" }}
                  />
                </OptionalComponent>
              </Col>
            </td>
            <td className="col-2">
              <Col style={{ width: "9rem" }}>
                <VZDropdown
                  id="Ipv6Pinholes-InternalHost"
                  selectedItem={currentState.internalHost}
                  onSelect={(e) => setValue("internalHost", e)}
                  options={["Specify IP", ...ipv6Devices]}
                  getOptionAsString={(e) => convertInternalHostToString(e)}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{ fontSize: "0.85rem", width: "9rem", height: "2.5rem" }}
                />
              </Col>
              <Col className="mt-2">
                <OptionalComponent show={currentState.internalHost === "Specify IP"}>
                  <VZInputTextField
                    value={currentState.specifyIntIp}
                    onChange={(e) => setValue("specifyIntIp", e)}
                    style={{ fontSize: "0.9rem", width: "9rem", height: "2.5rem" }}
                  />
                </OptionalComponent>
              </Col>
            </td>
            <td className="col-2">
              <Col>
                <VZDropdown
                  id="Ipv6Pinholes-Protocol"
                  selectedItem={currentState.protocol}
                  onSelect={(e) => setValue("protocol", e)}
                  options={getEnumValues(PinholeProtocol)}
                  getOptionAsString={convertPinholeProtocolToString}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{ fontSize: "0.85rem", height: "2.5rem" }}
                  disabled={
                    !(
                      currentState.applicationPort === "Select application / ports..." ||
                      currentState.applicationPort === "Custom"
                    )
                  }
                />
              </Col>
            </td>
            <td className="col-2">
              <Col>
                <OptionalComponent show={currentState.applicationPort === "Custom"}>
                  <VZInputTextField
                    value={currentState.port.toString()}
                    onChange={(e) => setValue("port", e)}
                    style={{ fontSize: "0.9rem", height: "2.5rem" }}
                  />
                </OptionalComponent>
                <OptionalComponent show={currentState.applicationPort !== "Custom"}>
                  <VZInputTextField
                    value={`${(currentState.applicationPort as PinholePortRule).ruleName} (${
                      (currentState.applicationPort as PinholePortRule).ruleDescription
                    })`}
                    onChange={() => {}}
                    style={{ fontSize: "0.9rem", height: "2.5rem" }}
                    disabled
                  />
                </OptionalComponent>
              </Col>
            </td>
            <td className="col-2">
              <Col>
                <VZDropdown
                  id="Ipv6Pinholes-Schedule"
                  selectedItem={currentState.schedule}
                  onSelect={(e) => setValue("schedule", e)}
                  options={["Always", "User defined", ...availableSchedules]}
                  getOptionAsString={(e) => convertIpv6PinholeScheduleToUiString(e)}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{ fontSize: "0.85rem", width: "9rem", height: "2.5rem" }}
                />
              </Col>
            </td>
            <td>
              <Ipv6PinholesDoneButton onClick={() => onDoneClick(currentState, item, setIsEdit)}>
                Done
              </Ipv6PinholesDoneButton>
            </td>
          </tr>
        </OptionalComponent>
        <OptionalComponent show={showDetails}>
          <Ipv6PinholesTableRow>
            <Ipv6PinholesTableData className="ps-0" $isHost>
              {item.externalHost.toString()}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData $isHost>
              {item.internalHostName ?? item.internalHost.toNormalizedString()}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData>{convertPinholeProtocolToString(item.protocol)}</Ipv6PinholesTableData>
            <Ipv6PinholesTableData>{convertScheduleRuleToUIString(item)}</Ipv6PinholesTableData>
            <Ipv6PinholesTableData>{item.schedule === "Always" ? "Always" : item.schedule.name}</Ipv6PinholesTableData>
            <Ipv6PinholesTableData></Ipv6PinholesTableData>
          </Ipv6PinholesTableRow>
        </OptionalComponent>
      </>
    );
  }
);


here       setRuleName(name) {
        setNewSch(name);
        console.log(name);
      },

when i am consolig the value of name i am getting it in the console but when i am checking whats newSch its always undefined its seem like its not being saved to the state

react-dom.development.js:86 Warning: A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components
    at input
    at div
    at div
    at div
    at MainWifi (http://localhost:3000/static/js/src_pages_wifi_primary-network-page_MainWifi_js-src_pages_wifi_primary-network-page_MoreOptio-f63d00.chunk.js:519:3)
    at div
    at div
    at div
    at BasicPrimaryNetwork (http://localhost:3000/static/js/src_pages_wifi_primary-network-page_basic_BasicPrimaryNetwork_js.chunk.js:67:75)
    at Suspense
    at RenderedRoute (http://localhost:3000/static/js/bundle.js:62565:5)
    at Outlet (http://localhost:3000/static/js/bundle.js:63169:26)
    at div
    at div
    at div
    at div
    at Body (http://localhost:3000/static/js/src_pages_landing-page_LandingPage_js.chunk.js:603:3)
    at div
    at LandingPage (http://localhost:3000/static/js/src_pages_landing-page_LandingPage_js.chunk.js:246:3)
    at Suspense
    at RenderedRoute (http://localhost:3000/static/js/bundle.js:62565:5)
    at Routes (http://localhost:3000/static/js/bundle.js:63256:5)
    at div
    at Router (http://localhost:3000/static/js/bundle.js:302:81)
    at App
    at Provider (http://localhost:3000/static/js/bundle.js:58045:3)
    at Router (http://localhost:3000/static/js/bundle.js:63190:15)
    at HashRouter (http://localhost:3000/static/js/bundle.js:61205:5)

    this are the errors/warnings which come on the console i want to store them in my
    own created logger 

    export const warnLogs = async (tag = "warnLogs", message = "") => {
    const timestamp = new Date().toISOString();
    logs['warn'].push(`${timestamp} warn ${tag} ${message}`)
    if (logs.warn.length === threshold.warn) {
        await sendLogsToAPI(logs.warn);
        logs.warn = [];
    }
    !isProduction && console.log("logs", logs)
}
this is the function at the react-dom-development.js 
function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);//from here that message is thrown
  }
}

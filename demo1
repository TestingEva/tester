import { useEffect, useState } from "react";
import { useDMZPageInfo } from "../../../domain/dmz-host/hooks";
import { DMZHostPageInfo } from "../../../domain/dmz-host/models";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { DMZHostView } from "./DMZHostView";

export const DMZHost: React.FC = () => {
  const { data, isPending, isError } = useDMZPageInfo();
  const [currentData, setCurrentData] = useState<DMZHostPageInfo>();
  const [disableApplyButton, setDisableApplyButton] = useState(false);
  const [selectedIpv6Address, setSelectedIpv6Address] = useState("");
  const [macAddress, setMacAddress] = useState("");
  const [ipv6Address, setIpv6Address] = useState("");

  useEffect(() => {
    if (data !== undefined) {
      setCurrentData(data);
      const temp = data.ipv6HostInfo.find((host) => host.ipAddress === data.ipv6Address);
      setSelectedIpv6Address(`${temp?.macAddress}-${temp?.hostName}` ?? "Menu");
      setMacAddress(temp?.macAddress ?? "");
      setIpv6Address(temp?.ipAddress ?? "");
    }
  }, [data]);

  useEffect(() => {
    if (currentData !== undefined && data !== undefined) {
      setDisableApplyButton(
        currentData.ipv4Enabled === data.ipv4Enabled && currentData.ipv6Enabled === data.ipv6Enabled
      );
    }
  }, [data, currentData]);

  const handleChange = (key: keyof DMZHostPageInfo, value?: string) => {
    if (currentData !== undefined) {
      if (key === "ipv4Enabled" || key === "ipv6Enabled") {
        setCurrentData({ ...currentData, [key]: !currentData[key] });
      } else {
        setCurrentData({ ...currentData, [key]: value });
      }
    }
  };


  const handleIpv6Change = (value: string) => {
    const temp = value.split(/-(.+)/);
    const test = currentData!.ipv6HostInfo.find((host) => host.macAddress === temp[0]);
    setMacAddress(test!.macAddress ?? "");
    setIpv6Address(test!.ipAddress ?? "");
    setSelectedIpv6Address(`${test?.macAddress}-${test?.hostName}`);
    handleChange("ipv6Address", test!.ipAddress ?? "");
  };

  if (isPending || currentData === undefined) {
    return <LoadingIndicator />;
  }

  if (isError) {
    return <ErrorIndicator />;
  }

  return (
    <DMZHostView
      data={currentData}
      disableApplyButton={disableApplyButton}
      handleChange={handleChange}
      selectedIpv6Address={selectedIpv6Address}
      handleIpv6Change={handleIpv6Change}
      macAddress={macAddress}
      ipv6Address={ipv6Address}
    />
  );
};

This is my main component and below is the View 

import { Col } from "react-bootstrap";
import { DMZHostPageInfo } from "../../../domain/dmz-host/models";
import { RouteType } from "../../../domain/misc/models";
import { VZBody } from "../../components/vz-body/VZBody";
import { VZButton } from "../../components/vz-button/VZButton";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { VZToggleButton } from "../../components/vz-toggle-button/VZToggleButton";
import { DMZHostDesc, DMZHostDetailsSection, DMZHostHeader, ToggleContainer } from "./styles";
import { convertIpv6InfoToDropdownInfo } from "./utils";

type Props = {
  data: DMZHostPageInfo;
  disableApplyButton: boolean;
  handleChange: (key: keyof DMZHostPageInfo, value?: string) => void;
  selectedIpv6Address: string;
  handleIpv6Change: (value: string) => void;
  macAddress: string;
  ipv6Address: string;
};

const customCSS = {
  width: "70px",
  paddingRight: "0 !important",
};

export const DMZHostView: React.FC<Props> = ({
  data,
  disableApplyButton,
  handleChange,
  selectedIpv6Address,
  handleIpv6Change,
  macAddress,
  ipv6Address,
}) => {
  return (
    <>
      <VZHeader
        title="DMZ Host"
        breadcrumbData={[{ label: "Security & Firewall" }, { label: "DMZ Host", destType: RouteType.DMZ_HOST }]}
        rightBody={
          <VZButton
            disabled={disableApplyButton}
            onClick={() => {
              console.log(data);
            }}
          >
            Apply Changes
          </VZButton>
        }
      />
      <VZBody>
        <DMZHostHeader className="hb">How it works...</DMZHostHeader>
        <DMZHostDesc>
          Allow a single computer or device to be fully exposed to the <br />
          Internet.
        </DMZHostDesc>
        <ToggleContainer>
          <Col className="col-4 b">DMZ IPv4 Host</Col>
          <Col>
            <VZToggleButton checked={data.ipv4Enabled} onChange={() => handleChange("ipv4Enabled")} />
            <label className="ps-3">{data.ipv4Enabled ? "Enabled" : "Disabled"}</label>
          </Col>
        </ToggleContainer>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Local Host </Col>
          <Col className="col-3">
            <VZDropdown selectedItem={} options={} onSelect={() => {}} getOptionAsString={(e) => e} />
          </Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection>
          <Col className="col-3 b ps-0">Address </Col>
          <Col>
            <VZInputTextField value={} onChange={() => {}} disabled style={customCSS} error={false} />
            <VZInputTextField value={} onChange={() => {}} disabled style={customCSS} error={false} />
            <VZInputTextField value={} onChange={() => {}} disabled style={customCSS} error={false} />
            <VZInputTextField value={} onChange={() => {}} style={customCSS} error={false} placeHolder={"0"} />
          </Col>
        </DMZHostDetailsSection>
        <ToggleContainer>
          <Col className="col-4 b">DMZ IPv6 Host</Col>
          <Col>
            <VZToggleButton checked={data.ipv6Enabled} onChange={() => handleChange("ipv6Enabled")} />
            <label className="ps-3">{data.ipv6Enabled ? "Enabled" : "Disabled"}</label>
          </Col>
        </ToggleContainer>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Local Host </Col>
          <Col className="col-3">
            <VZDropdown
              disabled={!data.ipv6Enabled}
              selectedItem={selectedIpv6Address === "" ? "Menu" : selectedIpv6Address}
              onSelect={(val) => handleIpv6Change(val)}
              options={convertIpv6InfoToDropdownInfo(data.ipv6HostInfo)}
              getOptionAsString={(e) => e}
            />
          </Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Address </Col>
          <Col>{ipv6Address}</Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">MAC Address </Col>
          <Col>{macAddress}</Col>
        </DMZHostDetailsSection>
      </VZBody>
    </>
  );
};


The Data coming from the hook is 
{
    "defaultOctets": [
        392,
        168,
        1,
        1
    ],
    "ipv4Enabled": false,
    "ipv4Address": "192.168.1.6",
    "ipv6Enabled": true,
    "ipv6Address": "fe82",
    "ipv4HostInfo": [
        {
            "hostName": "A220090-PC1",
            "ipAddress": "192.168.1.154"
        },
        {
            "hostName": "unknown_1c: 61:b4:b8:13",
            "ipAddress": "192.168.0.50"
        },
        {
            "hostName": "E3200-64CC22736BAE",
            "ipAddress": "192.168.1.100"
        },
        {
            "hostName": "CE1000A-A82376BEA88",
            "ipAddress": "192.168.1.101"
        },
        {
            "hostName": "VIN0019ALKKW1DD",
            "ipAddress": "192.168.1.3"
        },
        {
            "hostName": "CW64G9QJNX",
            "ipAddress": "192.168.1.6"
        }
    ],
    "ipv6HostInfo": [
        {
            "hostName": "VIN0019ALKKW1DA-12314eqw-321reqa",
            "ipAddress": "fe80::5cc4:efff:fef6:e2d1",
            "macAddress": "5E:C4:EF:F6:E2:D1"
        },
        {
            "hostName": "test1",
            "ipAddress": "fe81",
            "macAddress": "5E:C4:EF:F6:E2:D2"
        },
        {
            "hostName": "test2",
            "ipAddress": "fe82",
            "macAddress": "5E:C4:EF:F6:E2:D3"
        },
        {
            "hostName": "test3",
            "ipAddress": "fe83",
            "macAddress": "5E:C4:EF:F6:E2:D6"
        }
    ]
}

now the Requirement is that there is a dropdown in the DMZ IPv4 Host where we will be having options like from "ipv4HostInfo" in the format of `hostname-ipAddress` and something is selected from the dropdown we need to 
fill the same ipAddress in the below 4 input fields and they are uneeditable

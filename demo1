import { useEffect, useState } from "react";
import { useDMZPageInfo } from "../../../domain/dmz-host/hooks";
import { DMZHostPageInfo } from "../../../domain/dmz-host/models";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { DMZHostView } from "./DMZHostView";

export const DMZHost: React.FC = () => {
  const { data, isPending, isError } = useDMZPageInfo();
  const [currentData, setCurrentData] = useState<DMZHostPageInfo>();
  const [disableApplyButton, setDisableApplyButton] = useState(false);
  const [ipv4Octet, setIpv4Octet] = useState<string>();

  useEffect(() => {
    if (data !== undefined) {
      setCurrentData(data);
      setIpv4Octet(data.ipv4Address.split(".")[3] ?? "0");
    }
  }, [data]);

  useEffect(() => {
    if (currentData !== undefined && data !== undefined) {
      setDisableApplyButton(
        currentData.ipv4Enabled === data.ipv4Enabled && currentData.ipv6Enabled === data.ipv6Enabled
      );
    }
  }, [data, currentData]);

  const handleChange = (key: keyof DMZHostPageInfo, value?: string) => {
    console.log(value);
    if (currentData !== undefined) {
      if (key === "ipv4Enabled" || key === "ipv6Enabled") {
        setCurrentData({ ...currentData, [key]: !currentData[key] });
      } else if (key === "ipv4Address") {
        setIpv4Octet(value);
        if (currentData.ipv4Address === "") {
          const ipv = currentData.defaultOctets.slice(0, 3);
          value !== undefined && ipv.push(Number(value));
          const temp = ipv.join("."); //also send this temp in the dropdown
          setCurrentData({ ...currentData, ipv4Address: temp });
        } else {
          setCurrentData({ ...currentData, ipv4Address: value! });
        }
      } else {
        setCurrentData({ ...currentData, [key]: value });
      }
    }
  };

  if (isPending || currentData === undefined) {
    return <LoadingIndicator />;
  }

  if (isError) {
    return <ErrorIndicator />;
  }

  return (
    <DMZHostView
      data={currentData}
      disableApplyButton={disableApplyButton}
      handleChange={handleChange}
      ipv4Octet={ipv4Octet!}
      disableEditInteraction={false}
    />
  );
};

import { Col } from "react-bootstrap";
import { DMZHostPageInfo } from "../../../domain/dmz-host/models";
import { RouteType } from "../../../domain/misc/models";
import { VZBody } from "../../components/vz-body/VZBody";
import { VZButton } from "../../components/vz-button/VZButton";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { VZToggleButton } from "../../components/vz-toggle-button/VZToggleButton";
import { DMZHostDesc, DMZHostDetailsSection, DMZHostHeader, ToggleContainer } from "./styles";
import { convertIpv4InfoToDropdownInfo } from "./utils";

type Props = {
  data: DMZHostPageInfo;
  disableApplyButton: boolean;
  handleChange: (key: keyof DMZHostPageInfo, value?: string) => void;
  ipv4Octet: string;
  disableEditInteraction: boolean;
};

const customCSS = {
  width: "70px",
  paddingRight: "0 !important",
};

export const DMZHostView: React.FC<Props> = ({
  data,
  disableApplyButton,
  handleChange,
  ipv4Octet,
  disableEditInteraction,
}) => {
  console.log(data);
  return (
    <>
      <VZHeader
        title="DMZ Host"
        breadcrumbData={[{ label: "DMZ Host" }, { label: "DMZ Host", destType: RouteType.DMZ_HOST }]}
        rightBody={
          <VZButton
            disabled={disableApplyButton}
            onClick={() => {
              console.log(data);
            }}
          >
            Apply Changes
          </VZButton>
        }
      />
      <VZBody>
        <DMZHostHeader className="hb">How it works...</DMZHostHeader>
        <DMZHostDesc>
          Allow a single computer or device to be fully exposed to the <br />
          Internet.
        </DMZHostDesc>
        <ToggleContainer>
          <Col className="col-4 b">DMZ IPv4 Host</Col>
          <Col>
            <VZToggleButton checked={data.ipv4Enabled} onChange={() => handleChange("ipv4Enabled")} />
            <label className="ps-3">{data.ipv4Enabled ? "Enabled" : "Disabled"}</label>
          </Col>
        </ToggleContainer>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Local Host </Col>
          <Col className="col-3">
            <VZDropdown
              selectedItem={data.ipv4Address !== "" ? data.ipv4Address : "test"}
              options={convertIpv4InfoToDropdownInfo(data.ipv4HostInfo)}
              onSelect={(val) => handleChange("ipv4Address", val)}
              getOptionAsString={(e) => e}
              disabled={!data.ipv4Enabled}
            />
          </Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection>
          <Col className="col-3 b ps-0">Address </Col>
          <Col>
            <VZInputTextField
              value={data.defaultOctets[0].toString()}
              onChange={() => {}}
              disabled
              style={customCSS}
              error={false}
            />
            <VZInputTextField
              value={data.defaultOctets[1].toString()}
              onChange={() => {}}
              disabled
              style={customCSS}
              error={false}
            />
            <VZInputTextField
              value={data.defaultOctets[2].toString()}
              onChange={() => {}}
              disabled
              style={customCSS}
              error={false}
            />
            <VZInputTextField
              value={ipv4Octet}
              onChange={(e) => handleChange("ipv4Address", e)}
              disabled={!data.ipv4Enabled || disableEditInteraction}
              style={customCSS}
              error={false}
            />
          </Col>
        </DMZHostDetailsSection>
      </VZBody>
    </>
  );
};

this is the data which i am receiving from the hook 
{
    "defaultOctets": [
        392,
        168,
        1,
        1
    ],
    "ipv4Enabled": false,
    "ipv4Address": "",
    "ipv6Enabled": false,
    "ipv6Address": "",
    "ipv4HostInfo": [
        {
            "hostName": "A220090-PC1",
            "ipAddress": "192.168.1.154"
        },
        {
            "hostName": "unknown_1c: 61:b4:b8:13",
            "ipAddress": "192.168.0.50"
        },
        {
            "hostName": "E3200-64CC22736BAE",
            "ipAddress": "192.168.1.100"
        },
        {
            "hostName": "CE1000A-A82376BEA88",
            "ipAddress": "192.168.1.101"
        },
        {
            "hostName": "VIN0019ALKKW1DD",
            "ipAddress": "192.168.1.3"
        },
        {
            "hostName": "CW64G9QJNX",
            "ipAddress": "192.168.1.6"
        }
    ],
    "ipv6HostInfo": [
        {
            "hostName": "VIN0019ALKKW1DA",
            "ipAddress": "fe80::5cc4:efff:fef6:e2d1",
            "macAddress": "5E:C4:EF:F6:E2:D1"
        },
        {
            "hostName": "test1",
            "ipAddress": "fe81",
            "macAddress": "5E:C4:EF:F6:E2:D2"
        },
        {
            "hostName": "test2",
            "ipAddress": "fe82",
            "macAddress": "5E:C4:EF:F6:E2:D3"
        },
        {
            "hostName": "test3",
            "ipAddress": "fe83",
            "macAddress": "5E:C4:EF:F6:E2:D3"
        }
    ]
}

now the requirement is the dropdown haves list of ${item.hostName}-${item.ipAddress} i want when something is selected from the dropdown there are four inputText fields it should be 
already placed in the fields for example if A220090-PC1-192.168.1.154 is selected from the dropdown all the fields should have data as following 192
168 1 154

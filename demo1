const routers = [
  {
    name: "Verizon Router",
    model: "CR1000A",
    image: "./images/cr1000a.png",
  },
  {
    name: "Verizon Router",
    model: "CR1000B",
    image: "./images/cr1000a.png",
  },
  {
    name: "Verizon Internet Access Point - Router",
    model: "CHR30A-R",
    image: "./images/chr30a.png",
  },
  {
    name: "Verizon Internet Access Point - Extender",
    model: "CHR30A-E",
    image: "./images/chr30a.png",
  },
  {
    name: "Verizon Internet Gateway",
    model: "WNC-CR200A",
    image: "./images/wnc_cr200a.png",
  },
  {
    name: "Verizon Extender",
    model: "CE1000A",
    image: "./images/ce1000a.png",
  },
];

let selectedRouter = null;
let selectedProfileMode = "Fios Home";
const availableProfileMode = ["Fios Home", "Fios Business", "FWA Home", "FWA Business"];
let qswEnableStatus = false;
let speedTestEnabled = true;

/**
 * Intializes and pushes the HTML content to a spectified node
 */
function init() {
  renderRouterSelection();
}

/**
 * @returns HTML element tree for setup
 */
function renderRouterSelection() {
  const app = document.getElementById("temp-root");
  if (!app) return;

  app.innerHTML = `
    <header class="header">GUI Simulator List</header>
    <div class="router-list">
      ${routers
        .map(
          (router, index) => `
        <div class="router-card" data-index="${index}">
          <img src="${router.image}" alt="${router.name}">
          <h4>${router.name}</h4>
          <p>${router.model}</p>
        </div>
      `
        )
        .join("")}
    </div>
    <button id="proceed-btn" disabled>Proceed</button>
  `;

  const routerCards = document.querySelectorAll(".router-card");
  routerCards.forEach((card) => {
    card.addEventListener("click", () => {
      routerCards.forEach((c) => c.classList.remove("selected"));
      card.classList.add("selected");
      const index = card.getAttribute("data-index");
      selectedRouter = routers[Number(index)];
      document.getElementById("proceed-btn").disabled = false;
    });
  });

  const proceedBtn = document.getElementById("proceed-btn");
  proceedBtn.addEventListener("click", renderSetupPage);
}

/**
 * @param {string} key : Key for local storage
 * @param {string} value : value for local storage
 */
function setConfigStore(key, value) {
  localStorage.setItem(key, value);
}

function renderSetupPage() {
  const app = document.getElementById("temp-root");
  if (!app || !selectedRouter) return;

  setConfigStore("modelName", selectedRouter.model);

  app.innerHTML = `
    <header class="header">${selectedRouter.name} Quick Setup</header>
    <div class="setup-form">
      <div class="setup-group">
        <label class="setup-label">Profile Mode</label>
        <div class="options" id="profile-options">
          ${availableProfileMode
            .map(
              (mode) =>
                `<button class="profile-btn ${
                  selectedProfileMode === mode ? "selected" : ""
                }" data-mode="${mode}">${mode}</button>`
            )
            .join("")}
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Enable QSW</label>
        <div class="options" id="qsw-options">
          <button class="toggle-btn ${qswEnableStatus ? "selected" : ""}" data-value="true">True</button>
          <button class="toggle-btn ${!qswEnableStatus ? "selected" : ""}" data-value="false">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Enable Speed Test</label>
        <div class="options" id="speedtest-options">
          <button class="toggle-btn ${speedTestEnabled ? "selected" : ""}" data-value="true">True</button>
          <button class="toggle-btn ${!speedTestEnabled ? "selected" : ""}" data-value="false">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Password</label>
        <input type="text" id="password-input" placeholder="Enter password">
      </div>
      <div class="setup-desc">
        Attention! This password will be used to login the Simulator GUI
      </div>

      <button id="finish-btn">Finish</button>
    </div>
  `;

  document.getElementById("profile-options").addEventListener("click", (e) => {
    const target = e.target;
    if (!target.classList.contains("profile-btn")) return;

    const group = target.parentElement;
    group.querySelector(".selected")?.classList.remove("selected");
    target.classList.add("selected");

    selectedProfileMode = target.dataset.mode;
  });

  document.getElementById("qsw-options").addEventListener("click", (e) => {
    const target = e.target;
    if (!target.classList.contains("toggle-btn")) return;

    const group = target.parentElement;
    group.querySelector(".selected")?.classList.remove("selected");
    target.classList.add("selected");

    qswEnableStatus = target.dataset.value === "true";
  });

  document.getElementById("speedtest-options").addEventListener("click", (e) => {
    const target = e.target;
    if (!target.classList.contains("toggle-btn")) return;

    const group = target.parentElement;
    group.querySelector(".selected")?.classList.remove("selected");
    target.classList.add("selected");

    speedTestEnabled = target.dataset.value === "true";
  });

  document.getElementById("finish-btn").addEventListener("click", () => {
    const password = document.getElementById("password-input").value.trim();
    setConfigStore("password", password);
    setConfigStore("profileMode", selectedProfileMode.replace(/\s+/g, ""));
    setConfigStore("qswEnabled", qswEnableStatus);
    setConfigStore("speedTestEnabled", speedTestEnabled);
    alert("Setup Complete!");
    window.location.href = "https://www.google.com";
  });
}

document.addEventListener("DOMContentLoaded", init);

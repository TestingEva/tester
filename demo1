const BackhaulLogging = () => {
    const apiData = useSelector((state) => state?.backhaul?.data);
    const [menuList, setMenuList] = useState(true);
    const dispatch = useDispatch();
    const [loadPage, setLoadPage] = useState(false);

    const handleSelectMenu = (item) => {
        item === BackhaulLoggingConstants?.fios ? setMenuList(true) : setMenuList(false);
    };

    const refreshLog = (data) => {
        dispatch(fetchBackhaulRequest({ body: { deviceType: data } }));
    };

    const clearLog = () => {
        dispatch(clearBackhaulRequest());
    };

    const saveLog = () => {
        // Save log implementation
    };

    useEffect(() => {
        if (!loadPage) return; // Don't dispatch fetchBackhaulRequest initially
        dispatch(fetchBackhaulRequest({ body: { deviceType: menuList ? 0 : 1 } }));
    }, [menuList, dispatch, loadPage]);

    useEffect(() => {
        if (apiData && Object.keys(apiData)?.length) {
            setLoadPage(true);
        }
    }, [apiData]);

    return loadPage ? (
        <>
            <Header
                title={BackhaulLoggingConstants?.title}
                breadcrumbData={BackhaulLoggingConstants?.breadcrumbData}
                underDevelopmentFlag={true}
                extra={
                    <div className="backhaul-menu">
                        <div className={menuList ? 'backhaul-selectMenu b' : 'backhaul-unselectMenu b'} onClick={() => handleSelectMenu(BackhaulLoggingConstants?.fios)}>
                            {BackhaulLoggingConstants?.fios}
                        </div>
                        <div className={!menuList ? 'backhaul-selectMenu b' : 'backhaul-unselectMenu b'} onClick={() => handleSelectMenu(BackhaulLoggingConstants?.wifi)}>
                            {BackhaulLoggingConstants?.wifi}
                        </div>
                    </div>
                }
                lineMargin="backhaul-linemargin"
            />
            {menuList ? (
                <FiosExtender fiosData={apiData || {}} refreshLog={refreshLog} clearLog={clearLog} saveLog={saveLog} />
            ) : (
                <WifiExtender wifiData={apiData || {}} refreshLog={refreshLog} clearLog={clearLog} saveLog={saveLog} />
            )}
        </>
    ) : (
        <VZLoader />
    );
};

export default BackhaulLogging;

import { useEffect, useMemo, useState } from "react";
import { Col } from "react-bootstrap";
import { useAutoRefreshStatus } from "../../../domain/misc/hooks";
import { RouteType } from "../../../domain/misc/models";
import { useSystemWideConnInfo } from "../../../domain/system-wide-connections/hooks";
import { NetworkConnectionsInfo } from "../../../domain/system-wide-connections/models";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { VZBody } from "../../components/vz-body/VZBody";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZToggleButton } from "../../components/vz-toggle-button/VZToggleButton";
import { setOptionalClass } from "../../utils";
import { SystemWideTable, SystemWideTableContainer, SystemWideTableRow } from "./styles";
import { covertNwConnInfoToNwConnUIInfo, NwConnUIInfo } from "./utils";

export const SystemWideConnections = () => {
  const { data: autoRefreshStatus } = useAutoRefreshStatus();
  const [isAutoRefreshEnabled, setIsAutoRefreshEnabled] = useState(false);
  const { data, isPending, isError } = useSystemWideConnInfo(isAutoRefreshEnabled);

  useEffect(() => {
    if (autoRefreshStatus !== undefined) {
      setIsAutoRefreshEnabled(autoRefreshStatus);
    }
  }, [autoRefreshStatus]);

  if (isError) {
    return <ErrorIndicator />;
  }

  if (isPending || data === undefined) {
    return <LoadingIndicator />;
  }

  return (
    <>
      <VZHeader
        title="System-wide Connections"
        breadcrumbData={[
          { label: "Diagnostics & Monitoring" },
          { label: "System-wide Connections", destType: RouteType.SYS_WIDE_CONN },
        ]}
        rightBody={
          <Col className="col-8 d-flex align-items-center gap-3 m-1 ">
            <label>{"Auto-refresh"}</label>
            <VZToggleButton checked={isAutoRefreshEnabled} onChange={() => setIsAutoRefreshEnabled((prev) => !prev)} />
          </Col>
        }
      />
      <VZBody noTopPadding>
        <SystemWideConnectionsView data={data} />
      </VZBody>
    </>
  );
};

type Props = {
  data: NetworkConnectionsInfo[];
};

const SystemWideConnectionsView: React.FC<Props> = ({ data }) => {
  const uiData: NwConnUIInfo = useMemo(() => {
    return covertNwConnInfoToNwConnUIInfo(data);
  }, [data]);
  return (
    <div className="d-flex" style={{ minWidth: "600px" }}>
      <SystemWideTableContainer>
        <SystemWideTable>
          <tbody>
            <SystemWideConnTableData title="Name" isHeader />
            <SystemWideConnTableData title="Status" />
            <SystemWideConnTableData title="Underlying Device" />
            <SystemWideConnTableData title="Connection Type" />
            <SystemWideConnTableData title="MAC Address" />
            <SystemWideConnTableData title="IPv4 Address" />
            <SystemWideConnTableData title="Subnet Mask" />
            <SystemWideConnTableData title="IPv4 Default Gateway" />
            <SystemWideConnTableData title="IPv4 DNS  Address 1" />
            <SystemWideConnTableData title="IPv4 DNS  Address 2" />
            <SystemWideConnTableData title="IPv4 Address Distritn." />
            <SystemWideConnTableData title="IPv6 Prefix" />
            <SystemWideConnTableData title="IPv6 Address" />
            <SystemWideConnTableData title="IPv6 Link-Local Address" />
            <SystemWideConnTableData title="IPv6 DNS  Address 1" />
            <SystemWideConnTableData title="IPv6 DNS  Address 2" />
            <SystemWideConnTableData title="IPv6 Address Distritn." />
            <SystemWideConnTableData title="Rec'd Packets" />
            <SystemWideConnTableData title="Sent Packets" />
            <SystemWideConnTableData title="Rec'd Bytes" />
            <SystemWideConnTableData title="Sent'd Bytes" />
            <SystemWideConnTableData title="Rec'd Errors" />
            <SystemWideConnTableData title="Rec'd Drops" />
            <SystemWideConnTableData title="Time Span" />
          </tbody>
        </SystemWideTable>
      </SystemWideTableContainer>
    </div>
  );
};

type SystemWideTableProps = {
  title: string;
  isHeader?: boolean;
};

const SystemWideConnTableData: React.FC<SystemWideTableProps> = ({ title, isHeader }) => {
  return (
    <SystemWideTableRow className={setOptionalClass("border-0 b", isHeader)}>
      <td className="ps-0 b">{title}</td>
      <td>Hello</td>
      <td>Hello</td>
      <td>Hello</td>
      <td>Hello</td>
      <td>Hello</td>
      <td>Hello</td>
      <td>Hello</td>
    </SystemWideTableRow>
  );
};


Now i want to populate this table data using the ui data which is recived from the function you created 

jest.mock('../http_client', () => ({
  httpRequest: jest.fn(),
}));

jest.mock('../api_error', () => ({
  mapAndThrowError: jest.fn(),
}));

describe('getHomePageDetailsApi', () => {
  test('should return home page details on successful API call', async () => {
    // Mock the response data
    const mockResponseData = {
      deviceList: [], // Sample device list data
      meshEnabledStatus: true,
      parentalControlList: [], // Sample parental control list data
      routerStatus: 'Up',
      wifiList: [], // Sample wifi list data
      timestamp: Date.now(),
    };

    // Mock the httpRequest function to return a mock response
    (httpRequest as jest.Mock).mockResolvedValueOnce({
      readAsJson: jest.fn().mockResolvedValueOnce(mockResponseData),
    });

    // Call the function with a mock auth token
    const authToken = 'mockAuthToken';
    const result = await getHomePageDetailsApi(authToken);

    // Check if the function returns the expected result
    expect(result).toEqual(mockResponseData);
  });

  test('should handle error if API call fails', async () => {
    // Mock the httpRequest function to throw an error
    (httpRequest as jest.Mock).mockRejectedValueOnce(new Error('API error'));

    // Call the function with a mock auth token
    const authToken = 'mockAuthToken';
    await expect(getHomePageDetailsApi(authToken)).rejects.toThrow('API error');

    // Ensure that mapAndThrowError is called when an error occurs
    expect(mapAndThrowError).toHaveBeenCalled();
  });
});

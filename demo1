import { useEffect, useMemo, useState } from "react";
import { PlatformType, RouteType } from "../../../domain/misc/models";
import { useSystemLogging } from "../../../domain/system-logging/hooks";
import { SystemLogModel } from "../../../domain/system-logging/models";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { SystemLoggingPageContainer, VZSmallButton, SystemLoggingHeaderOptionRow } from "./styles";
import { TypeSelectionHeader } from "../../components/type-selection-header/TypeSelectionHeader";
import { useNavigate, useParams } from "react-router-dom";

export const SystemLogging: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const [selectedType, setSelectedType] = useState(id || "system");

  useEffect(() => {
    if (id !== ":id") {
      setSelectedType(id!);
    } else {
      navigate(`/adv/monitoring/log/system`);
    }
  }, [id, navigate]);

  const requestData = useMemo(() => {
    return {
      requestId: "componentId",
      logType: selectedType,
      startDateTime: "startTimeData",
      endDateTime: "endTimeData",
      offset: 0,
      limit: 100,
    };
  }, [selectedType]);
  const { data, isPending, error } = useSystemLogging(PlatformType.Router, requestData);

  useEffect(() => {
    console.log(requestData);
  }, [requestData]);

  if (isPending) return <></>;
  if (error) return <></>;

  return <SystemLoggingView data={data} selectedType={selectedType} setSelectedType={setSelectedType} />;
};

const testAvaibableOptions = ["system", "security", "advanced", "firewall", "wandhcp", "wifi"];
const HeaderOptions = () => {
  return (
    <SystemLoggingHeaderOptionRow>
      <VZSmallButton>Settings</VZSmallButton>
      <VZSmallButton>Options</VZSmallButton>
      <VZSmallButton>Refresh</VZSmallButton>
      <VZSmallButton $primary>Save</VZSmallButton>
    </SystemLoggingHeaderOptionRow>
  );
};

type Props = {
  data?: SystemLogModel[];
  selectedType: string;
  setSelectedType: React.Dispatch<React.SetStateAction<string>>;
};

export const SystemLoggingView: React.FC<Props> = ({ data, selectedType, setSelectedType }) => {
  const navigate = useNavigate();
  const handleOptionClick = (option: string) => {
    setSelectedType(option);
    navigate(`/adv/monitoring/log/${option}`);
  };

  return (
    <>
      <VZHeader
        title="System Logging"
        breadcrumbData={[
          { label: "Diagnostics & Monitoring" },
          //TODO:BreadCrumb Reload issue
          { label: "System Logging", destType: RouteType.SYS_LOG },
          { label: selectedType }, //TODO: convert to the proper header
        ]}
        rightBody={HeaderOptions()}
        bottomBody={
          <TypeSelectionHeader
            currentSelectedType={selectedType}
            availableHeaderOptions={testAvaibableOptions}
            onOptionClick={handleOptionClick}
          />
        }
      />
      <SystemLoggingPageContainer className="vz--footer"></SystemLoggingPageContainer>
    </>
  );
};


this is my component and your task is to fetchData when the requestData is changed we need to make a call 

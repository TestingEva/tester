import diff from "microdiff";
import { useEffect, useMemo, useState } from "react";
import { IGMPInfo } from "../../../data/tr181/models";
import {
  useIGMPInfo,
  useRoutingInfo,
  useUpdateIGMPInfo,
  useUpdateRoutingInfo,
} from "../../../domain/routing/hooks";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { RoutingView } from "./RoutingView";

export const Routing: React.FC = () => {
  const { data, isPending, isError } = useRoutingInfo();
  const {
    data: igmpInfo,
    isPending: isIgmpPending,
    isError: isIgmpError,
    isFetching: isIgmpFetching,
  } = useIGMPInfo();
  const {
    invoke,
    isError: updateError,
    isPending: isUpdating,
  } = useUpdateRoutingInfo();
  const {
    invoke: updateIgmpInfo,
    isError: isIgmpUpdateError,
    isPending: isIgmpUpdating,
  } = useUpdateIGMPInfo();
  const [currentData, setCurrentData] = useState<IGMPInfo>();

  const isApplyButtonEnabled = useMemo(() => {
    if (currentData !== undefined && igmpInfo !== undefined) {
      return diff(currentData, igmpInfo).length !== 0;
    } else {
      return true;
    }
  }, [igmpInfo, currentData]);

  useEffect(() => {
    if (igmpInfo !== undefined) {
      setCurrentData(igmpInfo);
    }
  }, [isIgmpFetching, igmpInfo]);

  const onCheckboxChange = (key: keyof IGMPInfo) => {
    setCurrentData((prevData) => ({
      ...prevData!,
      [key]: !prevData![key],
    }));
  };

  const onRemoveButtonClick = (index: number) => {
    invoke({ id: index, type: 1 });
  };

  const onApplyButtonClicked = () => {
    if (currentData !== undefined) {
      updateIgmpInfo(currentData);
    }
  };

  if (isError || updateError || isIgmpError || isIgmpUpdateError) {
    return <ErrorIndicator />;
  }

  if (
    isPending ||
    currentData === undefined ||
    data === undefined ||
    isIgmpPending
  ) {
    return <LoadingIndicator />;
  }

  return (
    <RoutingView
      routingTableData={data}
      igmpData={currentData}
      onCheckboxChange={onCheckboxChange}
      onApplyButtonClicked={onApplyButtonClicked}
      isApplyButtonEnabled={!isApplyButtonEnabled}
      isUpdating={isUpdating || isIgmpUpdating}
      onRemoveButtonClick={onRemoveButtonClick}
    />
  );
};

did you see we are sending the full current Data when we click the Apply Button but instead of that i want to just send the data which is only Changed

for example my 
igmpInfo is {
    "ethernetEnable": false,
    "moCAEnable": false,
    "wiFi24GEnable": false,
    "wiFi5GEnable": false,
    "wiFi6GEnable": false
}

and my current Data is 
{
    "ethernetEnable": true,
    "moCAEnable": true,
    "wiFi24GEnable": false,
    "wiFi5GEnable": false,
    "wiFi6GEnable": false
}

then i need to send only the things which are changed in this case 

{
    "ethernetEnable": true,
    "moCAEnable": true,
}

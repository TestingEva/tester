export const diagnosticsData = {
    title: 'Diagnostics',
    breadcrumbData: [
        ['Diagnostics & Monitoring', ''],
        ['Diagnostics', 'samePage'],
    ],
    subheading: 'How it works...',
    body: 'Diagnostics can assist in testing network connectivity. This feature pings (ICMP echo) an IP address and displays the results, such as the number of packets transmitted and received, round trip time, and success status.',
    heading: [
        { name: 'IPv4 Ping (ICMP Echo)', id: 1 },
        { name: 'IPv6 Ping (ICMP Echo)', id: 2 },
    ],
    ipvData: {
        ipv4Destination: '',
        ipv6Destination: '',
        ipv4Pings: '4',
        ipv6Pings: '4',
        ipv4GoButton: true,
        ipv6GoButton: true,
    },
    payloadData: {
        parameters: [
            "Device.IP.Diagnostics.IPPing.DiagnosticsState",
            "Device.IP.Diagnostics.IPPing.FailureCount",
            "Device.IP.Diagnostics.IPPing.NumberOfRepetitions",
            "Device.IP.Diagnostics.IPPing.SuccessCount",
        ],
        reportFormat: "NameValuePair",
    },
    counts: {
        successCount: 0,
        failureCount: 0
    },
    destination: 'Destination',
    pings: 'Number of pings',
    status: 'Status',
    packets: 'Packets',
    packetsdata: '0/4 transmitted, 0/4 received, 100% loss',
    testing: 'Testing',
    failed: 'Test Failed, No Response',
    passed: 'Test Succeeded',
    inputErrors: {
        heading: 'Input Errors',
        destition: 'The Destination must be IP address or Domain name.',
        body1: 'The Number of Pings must be number.',
        body2: 'Number of pings: Please enter a numeric value between 1 and 999.',
    },
}
export const bandwidthData = {
    upload: "Upload",
    download: "Download",
    usage: "Usage",
    sortingHeading: {
        'Device Type and name': 'deviceName',
        'IPv4 address': 'ipv4Address',
        'Total Usage': 'totalUsage',
    },
    lanwidthHeading: [
        { name: 'Device Type and name', id: 1 },
        { name: 'IPv4 address', id: 2 },
        { name: 'Total Usage', id: 3 },
    ],
    wanDataKeyValuePairs: [
        { key: "oneHour", label: "1hr" },
        { key: "halfADay", label: "12hr" },
        { key: "oneDay", label: "24hr" },
        { key: "oneWeek", label: "1Week" },
        { key: "oneMonth", label: "1Month" },
    ],
    lanDataKeyValuePairs: [
        { key: "oneHour", label: "1hr" },
        { key: "halfADay", label: "12hr" },
        { key: "oneDay", label: "24hr" },
        { key: "oneWeek", label: "1 Week" },
        { key: "oneMonth", label: "1 Month" },
    ]
}

export const systemWideConnections = {
    title: "System-wide Connections",
    breadcrumbData: [
        ["Diagnostics & Monitoring", ""],
        ["System-wide\nConnections", "samePage"],
    ],
    rowData: {
        status: 'Status',
        network: 'Underlying Device',
        alias: 'Connection Type ',
        macAddress: 'MAC Address',
        ipv4Address: 'IPv4 Address',
        subnetMask: 'Subnet Mask',
        ipv4DefaultGateway: 'IPv4 Default Gateway',
        ipv4DNSAddress1: 'IPv4 DNS  Address 1',
        ipv4DNSAddress2: 'IPv4 DNS  Address 2',
        ipv4Protocol: 'IPv4 Address Distritn.',
        ipv6Prefix: 'IPv6 Prefix',
        ipv6Address: 'IPv6 Address',
        ipv6LinkLocalAdd: 'IPv6 Link-Local Address ',
        ipv6DNSAddress1: 'IPv6 DNS  Address 1',
        ipv6DNSAddress2: 'IPv6 DNS  Address 2',
        ipv6Protocol: 'IPv6 Address Distritn.',
        rxPackets: "Rec'd Packets ",
        txPackets: 'Sent Packets',
        rxBytes: "Rec'd Bytes",
        txBytes: "Sent'd Bytes",
        rxErrors: "Rec'd Errors",
        rxDrops: "Rec'd Drops ",
        upTime: 'Time Span',
    },
    order: ['lan', 'broadband', '5GHz', '6GHz', '2GHz', 'ethernet', 'coax'],
    heading: {
        Name: 'Name',
        lan: 'Network (Home/Office)',
        broadband: 'Broadband Connection (Ethernet)',
        '5GHz': '5 GHz Wi-Fi Access Point',
        '6GHz': '6 GHz Wi-Fi Access Point',
        '2GHz': '2.4 GHz Wi-Fi Access Point',
        ethernet: 'Ethernet',
        coax: 'Coax',
    },
    lanKeys: {
        IPAddress: 'ipv4Address',
        SubnetMask: 'subnetMask',
        linkLocalAdd: 'ipv6LinkLocalAdd',
    },
    ipv4States: [1, "DHCP"],
    ipv6States: ["DHCP", "AutoConfigured", "DHCPv6", "IKEv2", "MAP", "WellKnown"]

}
export const speedTestData = {
    heading: [
        { header: 'Test Type' },
        { header: 'Download' },
        { header: 'Upload' },
        { header: 'Latency' },
        { header: 'Date' },
        { header: 'Time' },
    ],
    title: 'Speed Test',
    breadcrumbData: [
        ['Diagnostics & Monitoring', ''],
        ['Speed Test', 'samePage'],
    ],
    test: 'Test',
    history: 'History',
    download: 'Download',
    upload: 'Upload',
    latency: 'Latency',
    loading: 'Loading...',
    dataService: {
        download: '',
        upload: '',
        latency: '',
    },
    dataNetwork: {
        download: '',
        upload: '',
        latency: '',
    },
    extenderList: [
        'Fios Extender 1',
        'Fios Extender 2',
        'Fios Extender 3',
        'Fios Extender 4',
    ],
    service: 'Test Service',
    serviceText:
        '  This test will verify that your service is working properly and that you are receiving the best speeds available on the verizon network.',
    network: 'Test Network',
    networkText:
        'This test will verify that your in-home network is working properly and that you are receiving the best speeds available on the equipment.',
    timeOut: 1000,
}

export const SystemLoggingConstants = {
    title: "System Logging",
    breadcrumbData: [["Diagnostics & Monitoring", ""], ["System Logging", "samePage"]],
    opt: "Options",
    refresh: "Refresh",
    save: "Save",
    settings: "Settings",
    clear: "Clear",
    cancel: "Cancel",
    apply: "Apply",
    loggingTypes: [
        { key: "system", label: "System" },
        { key: "security", label: "Security", },
        { key: "advanced", label: "Advanced", },
        { key: "firewall", label: "Firewall", },
        { key: "wandhcp", label: "WAN DHCP", },
        { key: "landhcp", label: "LAN DHCP" },
        { key: "wifi", label: "Wi-Fi" }
    ],
    tableTypes: ["Time", "Event Type", "Log Level", "Details"],
    tableRowKeys: ['dateTime', 'type', 'level', 'detail'],
    logViewOpt: "Log viewing options",
    pastDay: "Past Day",
    pastWeek: "Past Week",
    custRange: "Custom Range",
    stDate: "Start Date",
    stTime: "Start Time",
    endDate: "End Date",
    endTime: "End Time",
    accptEvent: "Accepted Events",
    blkEvent: "Blocked Events",
    otherEvent: "Other Events",
    logBuffer: "Log Buffer",
    accptEventKeyValues: [
        { key: "acceptIncomingConnections", label: "Accept Incoming Connections" },
        { key: "acceptOutgoingConnections", label: "Accept Outgoing Connections" },
    ],
    blkEventKeyValues: {
        // allBlock: { key: "allBlock", label: "All blocked connections attempts" },
        middleKVPairs: [
            { key: "allBlockedConnectionAttempts", label: "All blocked connections attempts" },
            {},
            { key: "winuuke", label: "Winuuke" },
            { key: "mutiCastBroadCast", label: "Multicast/Broadcast" },
            { key: "echoChargen", label: "Echo Chargen" },
            { key: "defragmentationError", label: "Defragmentation Error" },
            { key: "icmpRedirect", label: "ICMP Redirect" },
            { key: "icmpMultiCast", label: "ICMP Multicast" },
            { key: "blockedFragments", label: "Blocked Fragments" },
            { key: "packetIllegalOptions", label: "Packet Illegal options" },
            { key: "icmpFlood", label: "ICMP Flood" },
            { key: "synFlood", label: "Syn Flood" },
            { key: "udpFlood", label: "UDP Flood" },
        ]
    },
    otherEventKeyValues: [
        { key: "remoteAdministrationAttempts", label: "Remote Adminstration Attempts" },
        { key: "connectionStates", label: "Connection States" },
    ],
    prevLogKey: { key: "preventLogOverrun", label: "Prevent Log Overrun" },
    availablePages: { "system": "System", "security": "Security", "advanced": "Advanced", "firewall": "Firewall", "wandhcp": "WAN DHCP", "landhcp": "LAN DHCP", "wifi": "Wi-Fi" },
    logType: {
        system: "systemLog",
        security: "securityLog",
        advanced: "advancedLog",
        firewall: "firewallLog",
        wandhcp: "wanDHCPLog",
        landhcp: "lanDHCPLog",
        wifi: "wifiLog"
    },
    requestLogType: { "system": "system", "security": "security", "advanced": "advanced", "firewall": "firewall", "wandhcp": "wdhcp", "landhcp": "ldhcp", "wifi": "wifi" },
    timeRange: ["12:00 am", "1:00 am", "2:00 am", "3:00 am", "4:00 am", "5:00 am", "6:00 am", "7:00 am", "8:00 am", "9:00 am", "10:00 am", "11:00 am", "12:00 pm", "1:00 pm", "2:00 pm", "3:00 pm", "4:00 pm", "5:00 pm", "6:00 pm", "7:00 pm", "8:00 pm", "9:00 pm", "10:00 pm", "11:00 pm"],
    logFileName: { system: "SYS", security: "SECURITY", firewall: "FW", advanced: "ADV", wandhcp: "WDHCP", landhcp: "LDHCP", wifi: "WI-FI" },
    attention: "Attention",
    clearDesc: "You are about to clear the firewall log. Press Apply to confirm.",
    timeError: "End time cannot be earlier than start time.",
    initialTime: 978244200000 // Sun Dec 31 2000 12:00:00
}

export const BackhaulLoggingConstants = {
    title: "Backhaul Logging",
    breadcrumbData: [
        ['Diagnostics & Monitoring', ''],
        ['Backhaul Logging', 'samePage'],
    ],
    fios: "Fios Extender",
    wifi: "Wi-Fi Extender",
    backhaulTableHeader: ["Time", "Date", "Backhaul Type", "Connection Rate", "Mac Address"],
    logFileName: { 0: "FiosExtender", 1: "WifiExtender" },
    backhaulType: { 0: "Ethernet", 1: "Wi-Fi", 2: "Coax" },
    refresh: "Refresh",
    clear: "Clear",
    save: "Save"
}

import React, { useState } from 'react'
import InfiniteScroll from 'react-infinite-scroll-component';

import './MainLoggingPage.css'
import { SystemLoggingConstants } from '../../../../constants/Diagnostics'
import ApplyModal from '../../../../common/modal/apply-modal/ApplyModal'
import { ModalRouter } from '../../../../common/modal/Modal'
import VZLoader from '../../../../common/loader/Loader';
import Footer from '../../../../common/footer/Footer';
import { timeFormatter4 } from '../../../../utils/TimeFormatters';

export const MainLoggingPage = ({ selectedLogType, currentValue, clearLog, nextLog, hasMore }) => {
    const [showClearLogModal, setClearLogModal] = useState(false)
    const [showApplyModal, setShowApplyModal] = useState(false);
    const toggleClearModal = () => {
        setClearLogModal(!showClearLogModal)
    }

    return (
        <>
            <div className="sys-log-table-row sys-log-table-header-row pos-rel b">
                {SystemLoggingConstants?.tableTypes?.map((val, idx) => {
                    return (
                        <div className={`sys-log-table-col-${idx + 1}`} key={idx}>{val}</div>
                    )
                })}
                <button
                    className="clear-sys-log-button"
                    onClick={toggleClearModal}
                >
                    {SystemLoggingConstants?.clear}
                </button>
            </div>
            <InfiniteScroll className='sys-log-inf-list' dataLength={currentValue?.length} loader={<VZLoader />} next={nextLog} hasMore={hasMore} height={"calc(100vh - 331px)"}>
                <div className='flex-1'>
                    {currentValue?.map((val, index) => {
                        return (
                            val?.dateTime && (
                                <div className="sys-log-table-row" key={index}>
                                    {SystemLoggingConstants?.tableRowKeys?.map(
                                        (key, idx) => {
                                            return (
                                                <div key={idx} className={`sys-log-table-col-${idx + 1}`}>{key === "dateTime" ? timeFormatter4(val?.[key]) : val?.[key]}</div>
                                            )
                                        }
                                    )}
                                </div>
                            )
                        )
                    })}
                </div>
                <Footer />
            </InfiniteScroll>
            <ApplyModal
                show={showApplyModal}
                setShowModal={setShowApplyModal}
                time={5000}
            />
            <ModalRouter
                show={showClearLogModal}
                onHide={toggleClearModal}
                modalTitle={SystemLoggingConstants?.attention}
                modalContent={SystemLoggingConstants?.clearDesc}
                cancel={SystemLoggingConstants?.cancel}
                onHandleCancel={toggleClearModal}
                classCancel={'eds-button'}
                submit={SystemLoggingConstants?.apply}
                onHandleSubmit={() => {
                    toggleClearModal()
                    setShowApplyModal(true)
                    clearLog()
                }}
                classSubmit={'eds-button'}
            />
        </>
    )
}


did you see the clearDesc used which says "You are about to clear the firewall log. Press Apply to confirm." 
but what i want is that when the instead of saying firewall log it should be based on the value of selectedLogType
for example if the selectedLogType would be system the clearDesc would be "You are about to clear the system log. Press Apply to confirm." 

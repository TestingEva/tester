import { renderHook, waitFor } from "@testing-library/react";
import nock from "nock";
import { useLoginMetadata } from "./hooks";
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
const queryClient = new QueryClient(
    {
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    }
);

type WrapperType = {
    children: JSX.Element;
}

const wrapper: React.FC<WrapperType> = (props) => (
    <QueryClientProvider client={queryClient}>{props.children}</QueryClientProvider>
)
describe("useLoginMetadata", () => {

    test("should return login metadata", async () => {
        const scope = nock("http://localhost:3004")
            .post('/CRSP/getLoginMetadata')
            .reply(200, {
                passwordLess: false,
                showRouterRearImage: true
            });

        const { result } = renderHook(() => useLoginMetadata(), { wrapper });

        await waitFor(() => expect(result.current.status).toBe("success"));

        expect(result.current.data).toEqual({
            passwordLess: false,
            showRouterRearImage: true
        });

        expect(scope.isDone()).toBe(true);
    });

    test("should handle API error", async () => {
        const scope = nock("http://localhost:3004")
            .post('/CRSP/getLoginMetadata')
            .reply(500);

        const { result } = renderHook(() => useLoginMetadata(), { wrapper });
        await waitFor(() => expect(result.current.status).toBe("error"));

        expect(result.current.error).toEqual(new Error("Failed to fetch login metadata"));

        expect(scope.isDone()).toBe(true);
    });
});
Instead of nock can we use some other library to complete the test. the library must have 
the support of wretch 

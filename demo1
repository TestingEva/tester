export function validateDhcpIPRange(
  deviceIpAddress: string,
  subnetMask: string,
  startIpAddress: string,
  endIpAddress: string
): string[] {
  const errors: string[] = [];

  function ipToInt(ip: string): number {
    return ip.split(".").reduce((acc, octet) => (acc << 8) + parseInt(octet, 10), 0);
  }

  const deviceIpInt = ipToInt(deviceIpAddress);
  const subnetMaskInt = ipToInt(subnetMask);

  const startIpInt = ipToInt(startIpAddress);
  const endIpInt = ipToInt(endIpAddress);

  const networkAddressInt = deviceIpInt & subnetMaskInt;
  const startNetworkInt = startIpInt & subnetMaskInt;
  const endNetworkInt = endIpInt & subnetMaskInt;

  if (startNetworkInt !== networkAddressInt && endNetworkInt !== networkAddressInt) {
    errors.push(
      "Start IP Address, End IP Address: The DHCP IP address range does not conform to the connection IP address and the DHCP subnet mask."
    );
  } else if (endNetworkInt !== networkAddressInt) {
    errors.push(
      "End IP Address: The DHCP IP address range does not conform to the connection IP address and the DHCP subnet mask."
    );
  } else if (startNetworkInt !== networkAddressInt) {
    errors.push(
      "Start IP Address: The DHCP IP address range does not conform to the connection IP address and the DHCP subnet mask."
    );
  }

  if (endIpInt - startIpInt + 1 > 256) {
    errors.push("The number of IP Addresses in the DHCP IP address range must not be more than 256.");
  }

  if (deviceIpInt >= startIpInt && deviceIpInt <= endIpInt) {
    errors.push("The Device's IP address should not be in the range of the IP pool.");
  }

  return errors;
}

// Example usage:
const deviceIpAddress = "192.168.1.1";
const subnetMask = "255.255.255.0";
const startIpAddress = "192.168.1.10";
const endIpAddress = "192.168.1.20";

const errors = validateDhcpIPRange(deviceIpAddress, subnetMask, startIpAddress, endIpAddress);
if (errors.length > 0) {
  console.log("Validation errors:", errors);
} else {
  console.log("IP range is valid");
}

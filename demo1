import { renderHook, act } from "@testing-library/react-hooks";
import nock from "nock";
import { useLoginMetadata } from "./authHooks";

describe("useLoginMetadata", () => {
  afterEach(() => {
    // Clean up any remaining nock interceptors after each test
    nock.cleanAll();
  });

  test("should return login metadata", async () => {
    // Mocking the API endpoint using nock
    const scope = nock("https://example.com")
      .get("/login-metadata")
      .reply(200, {
        adminPwdChanged: false,
        passwordRequired: true
      });

    // Render the hook
    const { result, waitFor } = renderHook(() => useLoginMetadata());

    // Ensure that the hook initially returns loading status
    expect(result.current.status).toBe("loading");

    // Wait for the hook to fetch data
    await act(async () => {
      await waitFor(() => expect(result.current.status).toBe("success"));
    });

    // Ensure that the hook returns the correct data
    expect(result.current.data).toEqual({
      adminPwdChanged: false,
      passwordRequired: true
    });

    // Ensure that the nock scope is satisfied
    expect(scope.isDone()).toBe(true);
  });

  test("should handle API error", async () => {
    // Mocking the API endpoint to return an error response
    const scope = nock("https://example.com")
      .get("/login-metadata")
      .reply(500);

    // Render the hook
    const { result, waitFor } = renderHook(() => useLoginMetadata());

    // Ensure that the hook initially returns loading status
    expect(result.current.status).toBe("loading");

    // Wait for the hook to fetch data
    await act(async () => {
      await waitFor(() => expect(result.current.status).toBe("error"));
    });

    // Ensure that the hook returns the correct error
    expect(result.current.error).toEqual(new Error("Failed to fetch login metadata"));

    // Ensure that the nock scope is satisfied
    expect(scope.isDone()).toBe(true);
  });
});

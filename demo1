
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { PlatformType } from "../../../domain/misc/models";
import { useSystemLogging } from "../../../domain/system-logging/hooks";
import { SystemLogModel } from "../../../domain/system-logging/models";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { SystemLoggingPageContainer, VZSmallButton, SystemLoggingHeaderOptionRow } from "./styles";
import { TypeSelectionHeader } from "../../components/type-selection-header/TypeSelectionHeader";
import { RouteType } from '../../../domain/misc/models';
import { SystemLoggingView } from './SystemLoggingView';

const testAvailableOptions = ["system", "security", "advanced", "firewall", "wandhcp", "wifi"];

export const SystemLogging: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const [selectedType, setSelectedType] = useState(id || "system");
  const [logData, setLogData] = useState<SystemLogModel[]>([]);
  const [isPending, setIsPending] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id && testAvailableOptions.includes(id)) {
      setSelectedType(id);
    } else {
      navigate(`/adv/monitoring/log/system`, { replace: true });
    }
  }, [id, navigate]);

  useEffect(() => {
    const fetchLogs = async () => {
      setIsPending(true);
      setError(null);

      const request = {
        logType: selectedType,
        limit: 0,
        offset: 100,
        requestId: "string",
        startDateTime: "string",
        endDateTime: "string",
      };

      try {
        const { data } = await useSystemLogging(PlatformType.Router, request);
        setLogData(data);
      } catch (error) {
        setError(error.message);
      } finally {
        setIsPending(false);
      }
    };

    fetchLogs();
  }, [selectedType]);

  const handleOptionClick = (option: string) => {
    setSelectedType(option);
    navigate(`/adv/monitoring/log/${option}`);
  };

  if (isPending) return <></>;
  if (error) return <div>Error: {error}</div>;

  return (
    <>
      <VZHeader
        title="System Logging"
        breadcrumbData={[
          { label: "Diagnostics & Monitoring" },
          { label: "System Logging", destType: RouteType.SYS_LOG },
          { label: selectedType.charAt(0).toUpperCase() + selectedType.slice(1) },
        ]}
        rightBody={<HeaderOptions />}
        bottomBody={
          <TypeSelectionHeader
            currentSelectedType={selectedType}
            availableHeaderOptions={testAvailableOptions}
            onOptionClick={handleOptionClick}
          />
        }
      />
      <SystemLoggingView data={logData} selectedType={selectedType} />
    </>
  );
};

const HeaderOptions = () => {
  return (
    <SystemLoggingHeaderOptionRow>
      <VZSmallButton>Settings</VZSmallButton>
      <VZSmallButton>Options</VZSmallButton>
      <VZSmallButton>Refresh</VZSmallButton>
      <VZSmallButton $primary>Save</VZSmallButton>
    </SystemLoggingHeaderOptionRow>
  );
};




import React from 'react';
import { SystemLoggingPageContainer } from './styles';
import { SystemLogModel } from '../../../domain/system-logging/models';

type Props = {
  data?: SystemLogModel[];
  selectedType: string;
};

export const SystemLoggingView: React.FC<Props> = ({ data, selectedType }) => {
  return (
    <SystemLoggingPageContainer className="vz--footer">
      <h2>Logs for: {selectedType}</h2>
      {data && data.length > 0 ? (
        data.map((log, index) => (
          <div key={index}>{JSON.stringify(log)}</div>
        ))
      ) : (
        <div>No logs available.</div>
      )}
    </SystemLoggingPageContainer>
  );
};


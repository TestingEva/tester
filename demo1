export function getScheduleInfo(
  daysOfTheWeek: number[],
  startTimeHour: number,
  startTimeMinute: number,
  stopTimeHour: number,
  stopTimeMinute: number
): ScheduleInfo {
  return {
    scheduleDays: daysOfTheWeek.map(getScheduleDay),
    startTime: getUnixEpochUtc().set("hour", startTimeHour).set("minute", startTimeMinute),
    endTime: getUnixEpochUtc().set("hour", stopTimeHour).set("minute", stopTimeMinute),
  };
}

export const initialParentalRuleCreateInfo: ParentalRuleModel = {
  name: "",
  schedule: [getScheduleInfo([], 0, 0, 0, 0)],
  enabled: true,
  devices: [],
  websiteExceptions: [],
  keywordExceptions: [],
  internetAccessible: false,
  scheduleType: "Always",
  selectedCondition: "Select",
  selectedDevice: "Select",
};

export const AddEditParentalRules = () => {
  const {
    data: deviceList,
    isError: isDeviceError,
    isPending: isDevicePending,
    isFetching: isFetchingDevice,
  } = useDevicesList();
  const { id } = useParams();
  const { routeType } = useLocator();
  const { data: editData, isFetching, isPending, isError } = useParentalRule(id, routeType);
  const navigator = useNavigator();
  const initialData: ParentalRuleModel = useMemo(() => {
    if (id === undefined || (!["1", "2", "3"].includes(id) && routeType === RouteType.PARENTAL_CREATE)) {
      return structuredClone(initialParentalRuleCreateInfo);
    } else if (id === "1") {
      return structuredClone(initialParentalTemplate1CreateInfo);
    } else if (id === "2") {
      return structuredClone(initialParentalTemplate2CreateInfo);
    } else if (id === "3") {
      return structuredClone(initialParentalTemplate3CreateInfo);
    }
    if (editData === undefined) {
      return structuredClone(initialParentalRuleCreateInfo);
    }

    const isAlways = editData.schedule[0].scheduleDays.length === 7;
    return {
      ...editData,
      scheduleType: editData.schedule.length > 1 ? "User defined" : isAlways ? "Always" : "User defined",
      selectedCondition: editData.internetAccessible,
      selectedDevice: editData.devices.length > 0 ? "User defined" : "Select",
    };

    //eslint-disable-next-line
  }, [editData, id, routeType, isFetching]);

  if (isDeviceError) {
    return <ErrorIndicator />;
  }

  if (
    deviceList === undefined ||
    isDevicePending ||
    isFetchingDevice ||
    (routeType === RouteType.PARENTAL_EDIT && (isPending || isFetching))
  ) {
    return <LoadingIndicator />;
  }

  if (routeType === RouteType.PARENTAL_EDIT && (editData === undefined || isError)) {
    navigator(RouteType.PARENTAL_LIST);
    return <></>;
  }
  return <AddEditParentalRulesView data={initialData} deviceList={deviceList} />;
};

type Props = {
  data: ParentalRuleModel;
  deviceList: Ipv4DeviceInfo[];
};

const AddEditParentalRulesView: React.FC<Props> = ({ data, deviceList }) => {
  const { currentState, changedValues, setValue, isChanged } = useFormState(data);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [showDeviceModal, setShowDeviceModal] = useState(false);
  const [showExceptionModal, setShowExceptionModal] = useState(false);

  const onScheduleDropdrownClick = (e: "Always" | "User defined") => {
    if (e === "User defined" && currentState.scheduleType !== "User defined") {
      setShowScheduleModal(true);
    }
    setValue("scheduleType", e);
  };

  const onUpdateScheduleClick = () => {
    setShowScheduleModal(true);
  };

  const onDevicesDropdownClick = () => {
    if (currentState.selectedDevice === "Select") {
      setShowDeviceModal(true);
    }
    setValue("selectedDevice", "User defined");
  };

  const onScheduleApplyClick = (data: ScheduleInfo[]) => {
    setValue("schedule", data);
    setShowScheduleModal(false);
  };

  const onDeviceModalApplyClick = (data: Ipv4DeviceInfo[]) => {
    setValue("devices", data);
    setShowDeviceModal(false);
  };

  const onExceptionModalApplyClick = (websiteExceptions: string[], keywordException: string[]) => {
    setValue("websiteExceptions", websiteExceptions);
    setValue("keywordExceptions", keywordException);
    setShowExceptionModal(false);
  };

  return (
    <>
      <VZHeader
        title="Create New Profile"
        breadcrumbData={[
          { label: "Devices" },
          { label: "Parental Controls", destType: RouteType.PARENTAL_LIST },
          { label: "All" },
        ]}
        rightBody={
          <VZButton onClick={() => {}} disabled={!isChanged}>
            Apply Changes
          </VZButton>
        }
      />
      <VZBody>
        <Row>
          <Col md={6}>
            <label className="mb-1">{"Name"}</label>
            <VZInputTextField
              value={currentState.name}
              onChange={(e) => setValue("name", e)}
              error={false}
              style={{ fontSize: "0.9rem" }}
            />
          </Col>
          <Col md={6} className="pt-3 pt-md-0">
            <label className="mb-1">{"Schedule"}</label>
            <VZDropdown
              id="parentalControls-Schedule"
              selectedItem={currentState.scheduleType}
              onSelect={onScheduleDropdrownClick}
              getOptionAsString={(e) => e}
              options={["Always", "User defined"]}
              selectedTextStyle={{ fontSize: "0.9rem" }}
              style={{ height: "2.25rem" }}
            />
          </Col>
        </Row>
        <OptionalComponent show={currentState.scheduleType === "User defined"}>
          <Row className="mt-3">
            <Col className="text-end ">
              <VZButton onClick={onUpdateScheduleClick} small style={{ width: "10rem" }}>
                Update Schedule
              </VZButton>
            </Col>
          </Row>
        </OptionalComponent>
        <Row className="mt-4">
          <Col md={6}>
            <label className="mb-1">{"Condition"}</label>
            <VZDropdown
              id="parentalControls-Condition"
              selectedItem={currentState.selectedCondition}
              onSelect={(e) => {
                setValue("internetAccessible", e);
                setValue("selectedCondition", e);
              }}
              getOptionAsString={convertParentalConditionToString}
              options={[true, false]}
              selectedTextStyle={{ fontSize: "0.9rem" }}
              style={{ height: "2.25rem" }}
            />
          </Col>
          <Col md={6} className="pt-md-0 pt-3">
            <label className="mb-1">{"Devices"}</label>
            <VZDropdown
              id="parentalControls-Devices"
              selectedItem={currentState.selectedDevice}
              onSelect={onDevicesDropdownClick}
              getOptionAsString={(e) => e}
              options={["User defined"]}
              selectedTextStyle={{ fontSize: "0.9rem" }}
              style={{ height: "2.25rem" }}
            />
          </Col>
        </Row>
        <OptionalComponent show={currentState.devices.length > 0}>
          <PCDevicesHeading>Devices</PCDevicesHeading>
          <Row>
            <PCDevicesSecondaryHeader className="pe-0">Devices</PCDevicesSecondaryHeader>
            <PCDevicesSecondaryHeader className="ps-0">Action</PCDevicesSecondaryHeader>
          </Row>
          {currentState.devices.map((e) => (
            <PCDeviceInfo key={e.macAddress + e.hostName}>
              <PCDeviceDetail>{e.hostName}</PCDeviceDetail>
              <PCDeviceAction>Remove</PCDeviceAction>
            </PCDeviceInfo>
          ))}
        </OptionalComponent>
        <PCButtonsRow className="py-4 d-flex">
          <Col className="col-6">
            <VZButton
              onClick={() => setShowExceptionModal(true)}
              small
              secondary
              style={{ width: "10rem" }}
              disabled={currentState.keywordExceptions.length > 0 || currentState.websiteExceptions.length > 0}
            >
              Add Exceptions
            </VZButton>
          </Col>
          <Col className="col-6">
            <OptionalComponent show={currentState.selectedDevice === "User defined"}>
              <Col className="text-end ">
                <VZButton onClick={() => setShowDeviceModal(true)} small style={{ width: "10rem" }}>
                  Add Devices
                </VZButton>
              </Col>
            </OptionalComponent>
          </Col>
        </PCButtonsRow>
        <OptionalComponent
          show={currentState.keywordExceptions.length > 0 || currentState.websiteExceptions.length > 0}
        >
          <PCDevicesHeading $topBorder>Exceptions</PCDevicesHeading>
          <Col className="d-flex">
            <PCDevicesSecondaryHeader className="col-7">Text</PCDevicesSecondaryHeader>
            <PCDevicesSecondaryHeader className="col-3">Type</PCDevicesSecondaryHeader>
            <PCDevicesSecondaryHeader className="col-2">Action</PCDevicesSecondaryHeader>
          </Col>
          {currentState.websiteExceptions.map((e, index) => (
            <PCDeviceInfo key={`${index + 1}`}>
              <PCDeviceDetail className="col-7">{e}</PCDeviceDetail>
              <PCDeviceDetail className="col-3">{"URL"}</PCDeviceDetail>
              <PCDeviceAction className="col-2">Remove</PCDeviceAction>
              {/* TODO */}
            </PCDeviceInfo>
          ))}
          {currentState.keywordExceptions.map((e, index) => (
            <PCDeviceInfo key={`${index + 1}`}>
              <PCDeviceDetail className="col-7">{e}</PCDeviceDetail>
              <PCDeviceDetail className="col-3">{"Keyword"}</PCDeviceDetail>
              <PCDeviceAction className="col-2">Remove</PCDeviceAction>
              {/* TODO */}
            </PCDeviceInfo>
          ))}
          <Row className="my-4">
            <Col className="text-end ">
              <VZButton onClick={() => setShowExceptionModal(true)} small style={{ width: "10rem" }}>
                Add Exceptions
              </VZButton>
            </Col>
          </Row>
        </OptionalComponent>
      </VZBody>
      <PCModel
        title="Assign schedule to this profile"
        content={<ScheduleModalContent schedule={currentState.schedule} onApplyClick={onScheduleApplyClick} />}
        show={showScheduleModal}
        onClose={() => {
          setShowScheduleModal(false);
          setValue("schedule", currentState.schedule);
        }}
      />
      <PCModel
        title="Assign devices to this profile"
        content={
          <DeviceModalContent
            deviceList={deviceList}
            selectedDeviceList={currentState.devices}
            onApplyClick={onDeviceModalApplyClick}
          />
        }
        bodyStyle={{ paddingTop: "0" }}
        show={showDeviceModal}
        onClose={() => {
          setShowDeviceModal(false);
          setValue("devices", currentState.devices);
        }}
      />
      <PCModel
        title="Add exceptions"
        content={
          <ExceptionModalContent
            webSiteExceptions={currentState.websiteExceptions}
            keywordExceptions={currentState.keywordExceptions}
            onApplyClick={onExceptionModalApplyClick}
          />
        }
        show={showExceptionModal}
        bodyStyle={{ paddingTop: "1rem" }}
        onClose={() => {
          setShowExceptionModal(false);
          setValue("keywordExceptions", currentState.keywordExceptions);
          setValue("websiteExceptions", currentState.websiteExceptions);
        }}
      />
    </>
  );
};

type ExceptionModalContentProps = {
  webSiteExceptions: string[];
  keywordExceptions: string[];
  onApplyClick: (websiteException: string[], keywordException: string[]) => void;
};

const ExceptionModalContent: React.FC<ExceptionModalContentProps> = ({
  webSiteExceptions,
  keywordExceptions,
  onApplyClick,
}) => {
  const [website, setWebsite] = useState<string[]>(webSiteExceptions);
  const [keywords, setKeywords] = useState<string[]>(keywordExceptions);
  const [websiteInput, setWebsiteInput] = useState<string>("");
  const [keywordInput, setKeywordInput] = useState<string>("");

  const onAddWebsiteExceptionClick = () => {
    setWebsite([...website, websiteInput]);
    setWebsiteInput("");
  };

  const onAddKeywordExceptionClick = () => {
    setKeywords([...keywords, keywordInput]);
    setKeywordInput("");
  };

  const onRemoveWebsiteException = (index: number) => {
    setWebsite(website.filter((_, i) => i !== index));
  };

  const onRemoveKeywordException = (index: number) => {
    setKeywords(keywords.filter((_, i) => i !== index));
  };

  return (
    <>
      <Col>
        <label>Websites</label>
        <Col>
          <VZInputTextField
            value={websiteInput}
            error={false}
            onChange={(e) => setWebsiteInput(e)}
            style={{ fontSize: "1rem", position: "relative" }}
          />
          <ExceptionIcon $right="2rem" $top="2.3rem" onClick={onAddWebsiteExceptionClick} />
          <p style={{ color: "#6f7171" }}>Enter a URL like www.example.com</p>
        </Col>
      </Col>
      <Col>
        <label>Keywords</label>
        <Col>
          <VZInputTextField
            value={keywordInput}
            error={false}
            onChange={(e) => setKeywordInput(e)}
            style={{ fontSize: "1rem", position: "relative" }}
          />
          <ExceptionIcon $right="2rem" $top="8rem" onClick={onAddKeywordExceptionClick} />
          <p style={{ color: "#6f7171" }}>Enter a word that appears within a URL</p>
        </Col>
      </Col>
      <ExceptionModalHeaderRow>
        <ExceptionModalHeader className="col-7">Text</ExceptionModalHeader>
        <ExceptionModalHeader className="col-3">Type</ExceptionModalHeader>
        <ExceptionModalHeader>Actions</ExceptionModalHeader>
      </ExceptionModalHeaderRow>
      {website.map((item, index) => (
        <ExceptionModalRow key={index}>
          <Col className="col-7">{item}</Col>
          <Col className="col-3">URL</Col>
          <Col onClick={() => onRemoveWebsiteException(index)}>Remove</Col>
        </ExceptionModalRow>
      ))}
      {keywords.map((item, index) => (
        <ExceptionModalRow key={index}>
          <Col className="col-7">{item}</Col>
          <Col className="col-3">Keyword</Col>
          <Col onClick={() => onRemoveKeywordException(index)}>Remove</Col>
        </ExceptionModalRow>
      ))}
      <Col className="mt-4 text-center">
        <VZButton onClick={() => onApplyClick(website, keywords)}>Apply</VZButton>
      </Col>
    </>
  );
};

type DeviceModalContentProps = {
  deviceList: Ipv4DeviceInfo[];
  selectedDeviceList: Ipv4DeviceInfo[];
  onApplyClick: (devices: Ipv4DeviceInfo[]) => void;
};

const DeviceModalContent: React.FC<DeviceModalContentProps> = ({ deviceList, selectedDeviceList, onApplyClick }) => {
  const [selectedDevices, setSelectedDevices] = useState<Ipv4DeviceInfo[]>(selectedDeviceList);

  const isChecked = (device: Ipv4DeviceInfo) => selectedDevices.some((item) => item.macAddress === device.macAddress);

  const onCheckboxChange = (device: Ipv4DeviceInfo) => {
    setSelectedDevices((prevState) => {
      if (prevState.some((item) => item.macAddress === device.macAddress)) {
        return prevState.filter((item) => item.macAddress !== device.macAddress);
      }
      return [...prevState, device];
    });
  };

  return (
    <>
      {deviceList.map((item, index) => (
        <PCDeviceModalRow key={`${item.macAddress}-${index}`}>
          <Col className="col-1">
            <DeviceIcon deviceType={item.deviceType} />
          </Col>
          <Col className="col-6">{item.hostName}</Col>
          <Col className="col-3">{item.deviceType}</Col>
          <Col className="col-2 d-flex justify-content-end">
            <VZCheckbox checked={isChecked(item)} onChange={() => onCheckboxChange(item)} />
          </Col>
        </PCDeviceModalRow>
      ))}
      <Col className="mt-4 text-center">
        <VZButton onClick={() => onApplyClick(selectedDevices)}>Apply</VZButton>
      </Col>
    </>
  );
};

type ScheduleModalContentProps = {
  schedule: ScheduleInfo[];
  onApplyClick: (scheduleData: ScheduleInfo[]) => void;
};

const ScheduleModalContent: React.FC<ScheduleModalContentProps> = ({ schedule, onApplyClick }) => {
  const [scheduleData, setScheduleData] = useState(schedule);
  const isApplyButtonEnabled = useMemo(() => diff(schedule, scheduleData).length > 0, [schedule, scheduleData]);
  const timeOptions = useMemo(() => Array.from({ length: 24 }, (_, ind) => getUnixEpochUtc().hour(ind)), []);

  const onDayChange = (day: DayOfTheWeek, index: number) => {
    setScheduleData((prevScheduleData) => {
      const newScheduleData = [...prevScheduleData];
      const currentActiveDays = [...newScheduleData[index].scheduleDays];
      if (currentActiveDays.includes(day)) {
        const dayIndex = currentActiveDays.indexOf(day);
        currentActiveDays.splice(dayIndex, 1);
      } else {
        currentActiveDays.push(day);
      }
      currentActiveDays.sort();
      newScheduleData[index] = { ...newScheduleData[index], scheduleDays: currentActiveDays };
      return newScheduleData;
    });
  };

  const onStartTimeSelect = (e: Dayjs, index: number) => {
    const newScheduleData = [...scheduleData];
    newScheduleData[index] = { ...newScheduleData[index], startTime: e };
    setScheduleData(newScheduleData);
  };

  const onEndTimeSelect = (e: Dayjs, index: number) => {
    const newScheduleData = [...scheduleData];
    newScheduleData[index] = { ...newScheduleData[index], endTime: e };
    setScheduleData(newScheduleData);
  };

  return (
    <>
      {scheduleData.map((item, index) => (
        <React.Fragment key={index + 1}>
          <Col>
            <Col className="ps-1">Days</Col>
            <Col className="d-flex">
              {getEnumValues(DayOfTheWeek).map((day) => (
                <ScheduleDayBox
                  day={day}
                  selected={item.scheduleDays.includes(day)}
                  onDayChange={(day) => onDayChange(day, index)}
                  key={day}
                />
              ))}
            </Col>
          </Col>
          <Col className="mt-4 d-flex gap-4">
            <Col md={5}>
              <label>Start Time</label>
              <VZDropdown
                id="rule-sched-start-time"
                selectedItem={item.startTime}
                options={timeOptions}
                onSelect={(e) => onStartTimeSelect(e, index)}
                getOptionAsString={getHours12}
              />
            </Col>
            <Col md={5}>
              <label>End Time</label>
              <VZDropdown
                id="rule-sched-start-time"
                selectedItem={item.endTime}
                options={timeOptions}
                onSelect={(e) => onEndTimeSelect(e, index)}
                getOptionAsString={getHours12}
              />
            </Col>
          </Col>
        </React.Fragment>
      ))}
      <Col className="mt-4 text-center">
        <VZButton onClick={() => onApplyClick(scheduleData)} disabled={!isApplyButtonEnabled}>
          Apply
        </VZButton>
      </Col>
    </>
  );
};

type PCModalProps = {
  title: string;
  content: ReactNode;
} & CloseableModalProps;

const PCModel: React.FC<PCModalProps> = ({ title, show, onClose, bodyStyle, content }) => {
  return (
    <Modal centered show={show} onHide={onClose}>
      <VZModalHeader $warnTitle={false} closeButton>
        {title}
      </VZModalHeader>
      <VZModalBody style={bodyStyle}>{content}</VZModalBody>
    </Modal>
  );
};


onCLick of updateSchedule the following error i am getting its only failing when we are using createDAta for edit data its working fine 

time.format is not a function
TypeError: time.format is not a function
    at Object.getHours12 [as getOptionAsString] (http://localhost:3000/static/js/bundle.js:44653:15)
    at VZDropdown (http://localhost:3000/static/js/bundle.js:24507:50)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:98841:22)
    at mountIndeterminateComponent (http://localhost:3000/static/js/bundle.js:102125:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:103421:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:88437:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:88481:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:88538:35)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:108402:11)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:107650:16)

export const Ipv6PinholesView: React.FC<Props> = ({
  data,
  availableSchedules,
  errors,
  setErrors,
  showErrorModal,
  onToggleErrorModal,
  ipv6Devices,
  onApplyClick,
  isApplying,
}) => {
  const { addItem, removeItem, updateItem, getResult, list, hasChanges } = useListTracker(data.policies, "id");
  const { currentState, reset, setValue } = useFormState(Ipv6PinholesInitialData);
  const childrenRef = useRef<{ [id: string]: PinholeTableRowForwardProp }>({}); // Store row refs here

  const [newRuleName, setNewRuleName] = useState<string | undefined>(); // Store new rule name
  const [showEditRuleView, setShowEditRuleView] = useState(false); // Control if edit view is open
  const [newScheduleId, setNewScheduleId] = useState<string>("");

  // Handle adding a new rule
  const onAddNewSchedule = (ruleName?: string) => {
    setNewRuleName(ruleName);
    if (newScheduleId) {
      childrenRef.current[newScheduleId]?.setRuleName(ruleName); // Update the specific row with new rule name
    }
  };

  const onEditNewSchedule = useCallback(
    (ruleName?: string) => {
      setShowEditRuleView(false);
      if (newScheduleId) {
        childrenRef.current[newScheduleId]?.setRuleName(ruleName); // Update specific row state
      }
      setNewScheduleId(""); // Reset schedule ID
    },
    [newScheduleId]
  );

  // Handle schedule edit state
  const onEditSetNewSchedule = (id: string) => {
    setNewScheduleId(id); // Set the ID of the row that is being edited
    setShowEditRuleView(true); // Show the edit rule view
  };

  // Rendering the table
  return (
    <>
      <Ipv6PinholesHeader>Rules List</Ipv6PinholesHeader>
      <Table>
        <thead>
          <Ipv6PinholesTableRow className="b">
            <td className="ps-0 col-2">External Host</td>
            <td className="col-2">Internal Host</td>
            <td className="col-2">Protocol</td>
            <td className="col-2">Application/Port</td>
            <td className="col-2">Schedule</td>
            <td className="col-2"></td>
          </Ipv6PinholesTableRow>
        </thead>
        <tbody>
          {list.map((item) => (
            <Ipv6PinholesTableRowDetails
              ref={(el) => {
                if (el) {
                  childrenRef.current[item.id] = el; // Store ref for each row
                }
              }}
              key={item.id}
              item={item}
              ipv6Devices={ipv6Devices}
              availableSchedules={availableSchedules}
              onEditSetNewSchedule={() => onEditSetNewSchedule(item.id)} // Pass in row ID for editing
              onDoneClick={onDoneClick}
              onDeleteClick={() => removeItem(item)}
              onCheckboxClick={() => updateItem({ ...item, enabled: !item.enabled })}
            />
          ))}
        </tbody>
      </Table>

      {showEditRuleView && (
        <AddOrEditSchedule onSuccessfulCreate={onEditNewSchedule} />
      )}
    </>
  );
};


export const Ipv6PinholesTableRowDetails = React.forwardRef<
  PinholeTableRowForwardProp,
  TableProps
>(
  (
    {
      item,
      onCheckboxClick,
      onDeleteClick,
      ipv6Devices,
      availableSchedules,
      onDoneClick,
      onEditSetNewSchedule,
    },
    ref
  ) => {
    const [isEdit, setIsEdit] = useState(false);
    const [newScheduleName, setNewScheduleName] = useState<string | undefined>();

    const { currentState, setValue } = useFormState(item);

    useImperativeHandle(ref, () => ({
      setRuleName(name: string) {
        setNewScheduleName(name);
        setIsEdit(true); // Open edit mode once the rule is set
      },
    }));

    useEffect(() => {
      if (newScheduleName) {
        setValue('schedule', newScheduleName); // Set the schedule name
      }
    }, [newScheduleName, setValue]);

    return (
      <tr>
        <td>{item.externalHost}</td>
        <td>{item.internalHost}</td>
        <td>{item.protocol}</td>
        <td>{item.applicationPort}</td>
        <td>
          {isEdit ? (
            <VZDropdown
              selectedItem={currentState.schedule}
              options={availableSchedules}
              onSelect={(e) => setValue('schedule', e)}
            />
          ) : (
            item.schedule
          )}
        </td>
        <td>
          <button onClick={() => setIsEdit(true)}>Edit</button>
          <button onClick={onDeleteClick}>Delete</button>
        </td>
      </tr>
    );
  }
);

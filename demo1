import { Dayjs } from "dayjs";
import diff from "microdiff";
import React, { ReactNode, useMemo, useState } from "react";
import { Col, Modal, Row } from "react-bootstrap";
import { useParams } from "react-router-dom";
import { useDevicesList } from "../../../domain/misc/hooks";
import { DayOfTheWeek, RouteType } from "../../../domain/misc/models";
import { useParentalRule } from "../../../domain/parental/hooks";
import { ScheduleInfo } from "../../../domain/scheduler-rules/models";
import { getUnixEpochUtc } from "../../../domain/utils";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { useFormState } from "../../components/form";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { useLocator, useNavigator } from "../../components/navigator/navigator";
import { OptionalComponent } from "../../components/OptionalComponent";
import { VZBody } from "../../components/vz-body/VZBody";
import { VZButton } from "../../components/vz-button/VZButton";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { VZModalBody, VZModalHeader } from "../../components/vz-modal/commonStyles";
import { CloseableModalProps } from "../../components/vz-modal/props";
import { getEnumValues } from "../../utils";
import { ScheduleDayBox } from "../scheduler-rules/AddOrEditSchedule";
import { getHours12 } from "../scheduler-rules/utils";
import { ParentalRuleModel } from "./models";
import {
  PCButtonsRow,
  PCDeviceAction,
  PCDeviceDetail,
  PCDeviceInfo,
  PCDevicesHeading,
  PCDevicesSecondaryHeader,
} from "./styles";
import {
  convertParentalConditionToString,
  initialParentalRuleCreateInfo,
  initialParentalTemplate1CreateInfo,
  initialParentalTemplate2CreateInfo,
  initialParentalTemplate3CreateInfo,
} from "./utils";

export const AddEditParentalRules = () => {
  const {
    data: deviceList,
    isError: isDeviceError,
    isPending: isDevicePending,
    isFetching: isFetchingDevice,
  } = useDevicesList();
  const { id } = useParams();
  const { routeType } = useLocator();
  const { data: editData, isFetching, isPending, isError } = useParentalRule(id, routeType);
  const navigator = useNavigator();
  const initialData: ParentalRuleModel = useMemo(() => {
    if (id === undefined || (!["1", "2", "3"].includes(id) && routeType === RouteType.PARENTAL_CREATE)) {
      return structuredClone(initialParentalRuleCreateInfo);
    } else if (id === "1") {
      return structuredClone(initialParentalTemplate1CreateInfo);
    } else if (id === "2") {
      return structuredClone(initialParentalTemplate2CreateInfo);
    } else if (id === "3") {
      return structuredClone(initialParentalTemplate3CreateInfo);
    }
    if (editData === undefined) {
      return structuredClone(initialParentalRuleCreateInfo);
    }
    const isAlways = editData.schedule[0].scheduleDays.length === 7 || editData.schedule[0].scheduleDays.length === 0;
    return {
      ...editData,
      scheduleType: editData.schedule.length > 1 ? "User defined" : isAlways ? "Always" : "User defined",
      selectedCondition: editData.internetAccessible,
      selectedDevice: editData.devices.length > 0 ? "User defined" : "Select",
    };

    //eslint-disable-next-line
  }, [editData, id, routeType, isFetching]);

  if (isDeviceError) {
    return <ErrorIndicator />;
  }

  if (
    deviceList === undefined ||
    isDevicePending ||
    isFetchingDevice ||
    (routeType === RouteType.PARENTAL_EDIT && (isPending || isFetching))
  ) {
    return <LoadingIndicator />;
  }

  if (routeType === RouteType.PARENTAL_EDIT && (editData === undefined || isError)) {
    navigator(RouteType.PARENTAL_LIST);
    return <></>;
  }
  return <AddEditParentalRulesView data={initialData} />;
};

type Props = {
  data: ParentalRuleModel;
};

const AddEditParentalRulesView: React.FC<Props> = ({ data }) => {
  const { currentState, changedValues, setValue } = useFormState(data);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [showDeviceModal, setShowDeviceModal] = useState(false);
  const [showExceptionModal, setShowExceptionModal] = useState(false);

  const onScheduleDropdrownClick = (e: "Always" | "User defined") => {
    if (e === "User defined" && currentState.scheduleType !== "User defined") {
      setShowScheduleModal(true);
    }
    setValue("scheduleType", e);
  };

  const onUpdateScheduleClick = () => {
    setShowScheduleModal(true);
  };

  const onDevicesDropdownClick = () => {
    if (currentState.selectedDevice === "Select") {
      setShowDeviceModal(true);
    }
    setValue("selectedDevice", "User defined");
  };

  return (
    <>
      <VZHeader
        title="Create New Profile"
        breadcrumbData={[
          { label: "Devices" },
          { label: "Parental Controls", destType: RouteType.PARENTAL_LIST },
          { label: "All" },
        ]}
        rightBody={
          <VZButton onClick={() => {}} disabled={true}>
            Apply Changes
          </VZButton>
        }
      />
      <VZBody>
        <Row>
          <Col md={6}>
            <label className="mb-1">{"Name"}</label>
            <VZInputTextField
              value={currentState.name}
              onChange={(e) => setValue("name", e)}
              error={false}
              style={{ fontSize: "0.9rem" }}
            />
          </Col>
          <Col md={6} className="pt-3 pt-md-0">
            <label className="mb-1">{"Schedule"}</label>
            <VZDropdown
              id="parentalControls-Schedule"
              selectedItem={currentState.scheduleType}
              onSelect={onScheduleDropdrownClick}
              getOptionAsString={(e) => e}
              options={["Always", "User defined"]}
              selectedTextStyle={{ fontSize: "0.9rem" }}
              style={{ height: "2.25rem" }}
            />
          </Col>
        </Row>
        <OptionalComponent show={currentState.scheduleType === "User defined"}>
          <Row className="mt-3">
            <Col className="text-end ">
              <VZButton onClick={onUpdateScheduleClick} small style={{ width: "10rem" }}>
                Update Schedule
              </VZButton>
            </Col>
          </Row>
        </OptionalComponent>
        <Row className="mt-4">
          <Col md={6}>
            <label className="mb-1">{"Condition"}</label>
            <VZDropdown
              id="parentalControls-Condition"
              selectedItem={currentState.selectedCondition}
              onSelect={(e) => {
                setValue("internetAccessible", e);
                setValue("selectedCondition", e);
              }}
              getOptionAsString={convertParentalConditionToString}
              options={[true, false]}
              selectedTextStyle={{ fontSize: "0.9rem" }}
              style={{ height: "2.25rem" }}
            />
          </Col>
          <Col md={6} className="pt-md-0 pt-3">
            <label className="mb-1">{"Devices"}</label>
            <VZDropdown
              id="parentalControls-Devices"
              selectedItem={currentState.selectedDevice}
              onSelect={onDevicesDropdownClick}
              getOptionAsString={(e) => e}
              options={["User defined"]}
              selectedTextStyle={{ fontSize: "0.9rem" }}
              style={{ height: "2.25rem" }}
            />
          </Col>
        </Row>
        <OptionalComponent show={currentState.devices.length > 0}>
          <PCDevicesHeading>Devices</PCDevicesHeading>
          <Row>
            <PCDevicesSecondaryHeader className="pe-0">Devices</PCDevicesSecondaryHeader>
            <PCDevicesSecondaryHeader className="ps-0">Action</PCDevicesSecondaryHeader>
          </Row>
          {currentState.devices.map((e) => (
            <PCDeviceInfo key={e.macAddress + e.hostName}>
              <PCDeviceDetail>{e.hostName}</PCDeviceDetail>
              <PCDeviceAction>Remove</PCDeviceAction>
            </PCDeviceInfo>
          ))}
        </OptionalComponent>
        <PCButtonsRow className="py-4 d-flex">
          <Col className="col-6">
            <VZButton
              onClick={() => setShowExceptionModal(true)}
              small
              secondary
              style={{ width: "10rem" }}
              disabled={currentState.keywordExceptions.length > 0 || currentState.websiteExceptions.length > 0}
            >
              Add Exceptions
            </VZButton>
          </Col>
          <Col className="col-6">
            <OptionalComponent show={currentState.selectedDevice === "User defined"}>
              <Col className="text-end ">
                <VZButton onClick={() => setShowDeviceModal(true)} small style={{ width: "10rem" }}>
                  Add Devices
                </VZButton>
              </Col>
            </OptionalComponent>
          </Col>
        </PCButtonsRow>
        <OptionalComponent
          show={currentState.keywordExceptions.length > 0 || currentState.websiteExceptions.length > 0}
        >
          <PCDevicesHeading $topBorder>Exceptions</PCDevicesHeading>
          <Col className="d-flex">
            <PCDevicesSecondaryHeader className="col-7">Text</PCDevicesSecondaryHeader>
            <PCDevicesSecondaryHeader className="col-3">Type</PCDevicesSecondaryHeader>
            <PCDevicesSecondaryHeader className="col-2">Action</PCDevicesSecondaryHeader>
          </Col>
          {currentState.websiteExceptions.map((e, index) => (
            <PCDeviceInfo key={`${index + 1}`}>
              <PCDeviceDetail className="col-7">{e}</PCDeviceDetail>
              <PCDeviceDetail className="col-3">{"URL"}</PCDeviceDetail>
              <PCDeviceAction className="col-2">Remove</PCDeviceAction>
              {/* TODO */}
            </PCDeviceInfo>
          ))}
          {currentState.keywordExceptions.map((e, index) => (
            <PCDeviceInfo key={`${index + 1}`}>
              <PCDeviceDetail className="col-7">{e}</PCDeviceDetail>
              <PCDeviceDetail className="col-3">{"Keyword"}</PCDeviceDetail>
              <PCDeviceAction className="col-2">Remove</PCDeviceAction>
              {/* TODO */}
            </PCDeviceInfo>
          ))}
          <Row className="my-4">
            <Col className="text-end ">
              <VZButton onClick={() => setShowExceptionModal(true)} small style={{ width: "10rem" }}>
                Add Exceptions
              </VZButton>
            </Col>
          </Row>
        </OptionalComponent>
      </VZBody>
      <PCModel
        title="Assign schedule to this profile"
        content={<ScheduleModalContent schedule={currentState.schedule} />}
        show={showScheduleModal}
        onClose={() => {
          setShowScheduleModal(false);
          // setValue("schedule", data.schedule);
        }}
      />
      {/* <PCModel
        title="Assign devices to this profile"
        content={<>Hello i am getting build</>}
        disableApplyButton={true}
        onApplyClick={() => {}}
        show={showDeviceModal}
        onClose={() => setShowDeviceModal(false)}
        //TODO:Clear the changes
      /> */}
      {/* <PCModel
        title="Add exceptions"
        content={<>Hello i am getting build</>}
        disableApplyButton={false}
        onApplyClick={() => {}}
        show={showExceptionModal}
        onClose={() => setShowExceptionModal(false)} 
        //TODO:Clear the Changes
      />*/}
    </>
  );
};

type ScheduleModalContentProps = {
  schedule: ScheduleInfo[];
};

const ScheduleModalContent: React.FC<ScheduleModalContentProps> = ({ schedule }) => {
  const [scheduleData, setScheduleData] = useState(schedule);

  const timeOptions = useMemo(() => Array.from({ length: 24 }, (_, ind) => getUnixEpochUtc().hour(ind)), []);

  const onDayChange = (day: DayOfTheWeek, index: number) => {
    const scheduleInfo = structuredClone(scheduleData);
    const currentActiveDays = scheduleInfo[index].scheduleDays;
    if (currentActiveDays.includes(day)) {
      const index = currentActiveDays.indexOf(day);
      currentActiveDays.splice(index, 1);
    } else {
      currentActiveDays.push(day);
    }
    currentActiveDays.sort();
    scheduleInfo[index] = { ...scheduleData[index], scheduleDays: currentActiveDays };
    setScheduleData(scheduleInfo);
  };

  const onStartTimeSelect = (e: Dayjs, index: number) => {
    // const scheduleList = scheduleData;
    // let temp = structuredClone(scheduleList[index]);
    // temp = { ...temp, startTime: e };
    // scheduleList[index] = temp;
    // setScheduleData(scheduleList);
    scheduleData[index].startTime = e;
    setScheduleData(scheduleData);
  };

  const onEndTimeSelect = (e: Dayjs, index: number) => {};

  return (
    <>
      {scheduleData.map((item, index) => (
        <React.Fragment key={index + 1}>
          <Col>
            <Col className="ps-1">Days</Col>
            <Col className="d-flex">
              {getEnumValues(DayOfTheWeek).map((day) => (
                <ScheduleDayBox
                  day={day}
                  selected={item.scheduleDays.includes(day)}
                  onDayChange={(day) => onDayChange(day, index)}
                  key={day}
                />
              ))}
            </Col>
          </Col>
          <Col className="mt-4 d-flex gap-4">
            <Col md={5}>
              <label>Start Time</label>
              <VZDropdown
                id="rule-sched-start-time"
                selectedItem={item.startTime}
                options={timeOptions}
                onSelect={(e) => onStartTimeSelect(e, index)}
                getOptionAsString={getHours12}
              />
            </Col>
            <Col md={5}>
              <label>End Time</label>
              <VZDropdown
                id="rule-sched-start-time"
                selectedItem={item.endTime}
                options={timeOptions}
                onSelect={(e) => onEndTimeSelect(e, index)}
                getOptionAsString={getHours12}
              />
            </Col>
          </Col>
        </React.Fragment>
      ))}
      <Col className="mt-4 text-center">
        <VZButton onClick={() => {}} disabled={diff(scheduleData, schedule).length === 0}>
          Apply
        </VZButton>
      </Col>
    </>
  );
};

type PCModalProps = {
  title: string;
  content: ReactNode;
} & CloseableModalProps;

const PCModel: React.FC<PCModalProps> = ({ title, show, onClose, bodyStyle, content }) => {
  return (
    <Modal centered show={show} onHide={onClose}>
      <VZModalHeader $warnTitle={false} closeButton>
        {title}
      </VZModalHeader>
      <VZModalBody style={bodyStyle}>{content}</VZModalBody>
    </Modal>
  );
};



In ScheduleModalcontent when i am trying to set the starttime I am unable to do that 

here is how is the schedule


[
    {
        "scheduleDays": [
            0,
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "startTime": "1970-01-01T02:00:00.000Z",
        "endTime": "1970-01-01T00:00:00.000Z"
    }
]

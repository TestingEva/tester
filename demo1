this is my hooks.ts
import { useMutation } from "@tanstack/react-query";
import { LazyAsyncHookData } from "../hook_data";
import { KEY_SYSTEM_LOGS } from "../keys";
import { getSystemLogs } from "../../data/system-logging/system_logging";
import { lazyAsyncHookData } from "../hook_data_impl";
import { SystemLogModel } from "./models";
import { PlatformType } from "../misc/models";
import { SystemLoggingApiRequest } from "../../data/system-logging/model";

export function useSystemLogging(
  platformType: PlatformType
): LazyAsyncHookData<SystemLoggingApiRequest, SystemLogModel[]> {
  const { mutateAsync, status, data, error } = useMutation({
    mutationKey: [KEY_SYSTEM_LOGS],
    mutationFn: (request: SystemLoggingApiRequest) => getSystemLogs(platformType, request),
  });
  return lazyAsyncHookData(status, error, data, mutateAsync);
}

This is systemloggig.tsx
import { useEffect, useMemo, useState } from "react";
import { PlatformType, RouteType } from "../../../domain/misc/models";
import { useSystemLogging } from "../../../domain/system-logging/hooks";
import { SystemLogModel } from "../../../domain/system-logging/models";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { SystemLoggingPageContainer, VZSmallButton, SystemLoggingHeaderOptionRow } from "./styles";
import { TypeSelectionHeader } from "../../components/type-selection-header/TypeSelectionHeader";
import { useNavigate, useParams } from "react-router-dom";
import { MainLoggingComponent } from "./system-log-components/MainLoggingComponent";

export const SystemLogging: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const [selectedType, setSelectedType] = useState("system");
  const [offset, setOffset] = useState(0);
  useEffect(() => {
    if (id !== ":id") {
      setSelectedType(id!);
    } else {
      navigate(`/adv/monitoring/log/system`);
    }
  }, [id, navigate]);

  const requestData = useMemo(() => {
    return {
      requestId: "componentId",
      logType: selectedType,
      startDateTime: "startTimeData",
      endDateTime: "endTimeData",
      offset,
      limit: 100,
    };
  }, [selectedType, offset]);

  const { invoke, data, isError, isPending } = useSystemLogging(PlatformType.Router);

  useEffect(() => {
    invoke(requestData);
  }, [requestData,invoke]);

  const fetchNextLog = async () => {
    setOffset((prevOffset) => prevOffset + 100);
  };

  if (isPending) return <></>;
  if (isError) return <></>;
  return (
    <SystemLoggingView
      data={data}
      selectedType={selectedType}
      setSelectedType={setSelectedType}
      clicked={() => invoke(requestData)}
      fetchNextLog={fetchNextLog}
    />
  );
};

const testAvaibableOptions = ["system", "security", "advanced", "firewall", "wandhcp", "landhcp", "wifi"];
const HeaderOptions: React.FC<{ selectedType: string; clicked: () => {} }> = ({ selectedType, clicked }) => {
  return (
    //TODO: Add proper check
    <SystemLoggingHeaderOptionRow>
      {selectedType === "firewall" && <VZSmallButton>Settings</VZSmallButton>}
      <VZSmallButton>Options</VZSmallButton>
      <VZSmallButton onClick={() => clicked()}>Refresh</VZSmallButton>
      <VZSmallButton $primary>Save</VZSmallButton>
    </SystemLoggingHeaderOptionRow>
  );
};

type Props = {
  data?: SystemLogModel[];
  selectedType: string;
  setSelectedType: React.Dispatch<React.SetStateAction<string>>;
  clicked: () => {};
  fetchNextLog: () => void;
};

export const SystemLoggingView: React.FC<Props> = ({ data, selectedType, setSelectedType, clicked, fetchNextLog }) => {
  const navigate = useNavigate();

  const handleOptionClick = (option: string) => {
    setSelectedType(option);
    navigate(`/adv/monitoring/log/${option}`);
  };

  return (
    <>
      <VZHeader
        title="System Logging"
        breadcrumbData={[
          { label: "Diagnostics & Monitoring" },
          //TODO:BreadCrumb Reload issue
          { label: "System Logging", destType: RouteType.SYS_LOG },
          { label: selectedType }, //TODO: convert to the proper header
        ]}
        rightBody={<HeaderOptions selectedType={selectedType} clicked={clicked} />}
        bottomBody={
          <TypeSelectionHeader
            currentSelectedType={selectedType}
            availableHeaderOptions={testAvaibableOptions}
            onOptionClick={handleOptionClick}
          />
        }
      />
      <SystemLoggingPageContainer className="vz--footer">
        <MainLoggingComponent data={data} fetchNextLog={fetchNextLog} />
      </SystemLoggingPageContainer>
    </>
  );
};

This is my MainComponent.tsx 

import { Table } from "react-bootstrap";
import { SystemLogModel } from "../../../../domain/system-logging/models";
import { VZSmallButton } from "../styles";
import {
  LoggingTableData,
  LoggingTableRow,
  LoggingTableDetail,
  MainLoggingPageTableHeader,
  LoggingTableHeader,
  LoggingTableDetailHeader,
  LoggingTableBodyData,
} from "./styles";
import InfiniteScroll from "react-infinite-scroll-component";
import { useEffect, useState } from "react";

type Props = {
  data?: SystemLogModel[];
  fetchNextLog: () => void;
};

export const MainLoggingComponent: React.FC<Props> = ({ data, fetchNextLog }) => {
  const [logs, setLogs] = useState<SystemLogModel[]>([]);
  useEffect(() => {
    setLogs((prev) => [...prev, ...data!]);
  }, [data]);
  
  return (
    <>
      <Table className="mb-0">
        <MainLoggingPageTableHeader>
          <LoggingTableRow className="b">
            <LoggingTableData>Time</LoggingTableData>
            <LoggingTableHeader>Event Type</LoggingTableHeader>
            <LoggingTableHeader>Log Level</LoggingTableHeader>
            <LoggingTableDetailHeader>Details</LoggingTableDetailHeader>
            <td>
              <VZSmallButton>Clear</VZSmallButton>
            </td>
          </LoggingTableRow>
        </MainLoggingPageTableHeader>
      </Table>
      {logs! && (
        <InfiniteScroll
          dataLength={logs?.length}
          loader={<>Loading...</>}
          next={fetchNextLog}
          hasMore={true}
          height={"calc(100vh - 331px)"}
        >
          <Table>
            <tbody>
              {logs.map((element, index) => (
                <LoggingTableRow key={index + 1}>
                  <LoggingTableData>2024 Mar 14 22:55:23</LoggingTableData>
                  <LoggingTableBodyData>{element.type}</LoggingTableBodyData>
                  <LoggingTableBodyData>{element.level}</LoggingTableBodyData>
                  <LoggingTableDetail>{element.detail}</LoggingTableDetail>
                </LoggingTableRow>
              ))}
            </tbody>
          </Table>
        </InfiniteScroll>
      )}
    </>
  );
};

now the original requirement was that whenever i scroll to some width the offset should change leading to the api to be called but with the above implentation the issue which i am facing is that whenever i scrolled to the bottom the call is being made with the correct offset but the page gets data doesnot gets added in the bottom 
and it is scrolled to the top 

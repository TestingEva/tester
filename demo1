import { useState } from "react";
import { Col, Row } from "react-bootstrap";
import { RadioType, SonBandDetail, WifiBandDetails, WifiSecurityType } from "../../../../domain/wifi/models";
import { OptionalComponent } from "../../../components/OptionalComponent";
import { useFormState } from "../../../components/form";
import { VZDropdown } from "../../../components/vz-dropdown/VZDropdown";
import { VZInputTextField } from "../../../components/vz-input/VZInput";
import { VZToggleButton } from "../../../components/vz-toggle-button/VZToggleButton";
import { radioTypeToString } from "../status/utils";
import { convertStringToRadioType, wifiSecurityTypeToString } from "../utils";
import { MainWifiBandRow, WifiLabelAndDescription, WifiRightGear } from "./WifiComponents";
import {
  GroupKeyIntervalTextStyle,
  MacEditAction,
  MainWifiCol,
  WifiBandToggleContainer,
  WifiMoreOptionRow,
  WifiSubBandRow,
} from "./styles";

type WifiBandDetails = {
  name: string;
  key: string;
  isEnabled: boolean;
  securityType: WifiSecurityType;
  isSsidBroadcastEnabled: boolean;
  radioType: RadioType;
  isRadioEnabled: boolean;
  wmmConfig?: WmmConfigInfo;
  macAddressControl?: MacAddressControlInfo;
  groupKeyConfig?: GroupKeyInfo;
};

type Props = {
  currentState: SonBandDetail;
  setValue: <
    K extends
      | "name"
      | "key"
      | "isEnabled"
      | "securityType"
      | "isSsidBroadcastEnabled"
      | "radioType"
      | "isRadioEnabled"
      | "macAddressControl"
  >(
    key: K,
    value: SonBandDetail[K]
  ) => void;
  isInteractionEnabled: boolean;
  isAdvContent: boolean;
  bandState: Record<RadioType, WifiBandDetails>;
  setBandValue: <K extends RadioType>(key: K, value: Record<RadioType, WifiBandDetails>[K]) => void;
};

export const SonEnabledView: React.FC<Props> = ({
  currentState,
  setValue,
  isInteractionEnabled,
  isAdvContent,
  bandState,
  setBandValue,
}) => {
  const [showMoreOptions, setShowMoreOptions] = useState(false);

  const [isMainWifiBandEnabled, setIsMainWifiBandEnabled] = useState(false);

  const onMainBandToggle = () => {
    setIsMainWifiBandEnabled(!isMainWifiBandEnabled);
  };

  const onMainBandChange = <K extends keyof SonBandDetail>(key: K, value: SonBandDetail[K]) => {
    setValue(key, value);
  };

  return (
    <>
      <MainWifiBandRow
        name={currentState.name}
        wifiKey={currentState.key}
        isBandEnabled={isMainWifiBandEnabled}
        isInteractionEnabled={isInteractionEnabled}
        onBandEnableToggle={onMainBandToggle}
        onKeyChange={(e: string) => onMainBandChange("key", e)}
        onNameChange={(e: string) => onMainBandChange("name", e)}
        showMoreOptions={showMoreOptions}
        toggleMoreOptions={() => setShowMoreOptions((prev) => !prev)}
        securityType={currentState.securityType}
      />
      <OptionalComponent show={showMoreOptions}>
        <WifiMoreOptionRow>
          <WifiLabelAndDescription label={"Security"} desc={"Set encryption type used to secure the Wi-Fi traffic."} />
          <Col className="p-0 align-content-center py-sm-1" xxl={3} lg={5} sm={2} xs={3}>
            <VZDropdown
              id="WifiSecurityDropdown"
              selectedItem={currentState.securityType}
              options={[WifiSecurityType.WPA3, WifiSecurityType.WPA2, WifiSecurityType.NONE]}
              disabled={!isInteractionEnabled}
              getOptionAsString={wifiSecurityTypeToString}
              onSelect={(e) => onMainBandChange("securityType", e)}
              selectedTextStyle={{ fontSize: "12px", fontFamily: "vzReg" }}
              style={{ fontSize: "12px", fontFamily: "vzReg", height: "2.8rem", minWidth: "4.5rem" }}
            />
          </Col>
        </WifiMoreOptionRow>
        <WifiMoreOptionRow>
          <WifiLabelAndDescription
            label={"Broadcast Wi-Fi network name (SSID)"}
            desc={"Broadcast Wi-Fi name from router to Wi-Fi clients."}
          />
          <Col className="p-0 align-items-center justify-content-end py-sm-1 d-flex gap-3" xxl={3} lg={5} sm={2} xs={3}>
            {currentState.isSsidBroadcastEnabled ? "Enabled" : "Disabled"}
            <VZToggleButton
              checked={currentState.isSsidBroadcastEnabled}
              onChange={() => onMainBandChange("isSsidBroadcastEnabled", !currentState.isSsidBroadcastEnabled)}
              disabled={!isInteractionEnabled}
            />
          </Col>
        </WifiMoreOptionRow>
        {currentState.macAddressControl !== undefined && (
          <WifiMoreOptionRow>
            <WifiLabelAndDescription
              label="MAC Authentication"
              desc="Limits the Wi-Fi clients that can connect to router."
            />
            <Col className="align-content-center" style={{ placeItems: "end" }}>
              <MacEditAction>Edit</MacEditAction>
            </Col>
          </WifiMoreOptionRow>
        )}
      </OptionalComponent>
      {Object.keys(bandState).map((bandInfo) => (
        <BandRowDetail
          bandInfo={bandState[convertStringToRadioType(bandInfo as "0" | "1" | "2" | "3")]}
          isInteractionEnabled={isInteractionEnabled}
          isAdvContent={isAdvContent}
          key={bandInfo}
          setBandValue={setBandValue}
        />
      ))}
    </>
  );
};

type BandRowDetailProps = {
  bandInfo: WifiBandDetails;
  isAdvContent: boolean;
  isInteractionEnabled: boolean;
  setBandValue: <K extends RadioType>(key: K, value: Record<RadioType, WifiBandDetails>[K]) => void;
};

const BandRowDetail: React.FC<BandRowDetailProps> = ({
  bandInfo,
  isInteractionEnabled,
  isAdvContent,
  setBandValue,
}) => {
  const { currentState, setValue, changedValues } = useFormState(bandInfo);
  const [showMoreOptions, setShowMoreOptions] = useState(false);
  return (
    <>
      <WifiSubBandRow>
        <Col className="ps-0 align-content-center b">{radioTypeToString(bandInfo.radioType)}</Col>
        <MainWifiCol className="flex-1">
          <Row className="gap-2 gap-xxl-3">
            <Col className="col-2"></Col>
            <WifiBandToggleContainer>
              <div className="vz--text--grey">{`Wi-Fi ${bandInfo.isEnabled ? "Enabled" : "Disabled"}`}</div>
              <VZToggleButton
                checked={bandInfo.isEnabled}
                onChange={() => setBandValue(bandInfo.radioType, { ...bandInfo, isEnabled: !bandInfo.isEnabled })}
                disabled={!isInteractionEnabled}
              />
            </WifiBandToggleContainer>

            <WifiRightGear
              openMoreOptions={showMoreOptions}
              toggleMoreOptions={() => isAdvContent && setShowMoreOptions((prev) => !prev)}
              showSettings={isAdvContent}
            />
          </Row>
        </MainWifiCol>
      </WifiSubBandRow>
      <OptionalComponent
        show={showMoreOptions && (bandInfo.groupKeyConfig !== undefined || bandInfo.wmmConfig !== undefined)}
      >
        {bandInfo.groupKeyConfig !== undefined && (
          <WifiMoreOptionRow>
            <WifiLabelAndDescription
              label="Group Key"
              desc="Update Group Key based on time interval used to update the WPA shared key."
            />
            <Col className="align-self-center" lg={2} sm={5} xs={4}>
              <VZInputTextField
                value={bandInfo.groupKeyConfig.interval}
                onChange={(e: string) =>
                  setBandValue(bandInfo.radioType, {
                    ...bandInfo,
                    groupKeyConfig: {
                      ...bandInfo.groupKeyConfig!,
                      interval: Number(e.replace(/\D/g, "").slice(0, 6)),
                    },
                  })
                }
                style={GroupKeyIntervalTextStyle}
                disabled={!isInteractionEnabled}
              />
            </Col>
            <Col
              className="p-0 align-items-center  py-sm-1 d-flex gap-3 justify-content-end"
              xxl={3}
              lg={5}
              sm={2}
              xs={4}
            >
              {bandInfo.groupKeyConfig.isEnabled ? "Enabled" : "Disabled"}
              <VZToggleButton
                checked={bandInfo.groupKeyConfig.isEnabled}
                onChange={() =>
                  setBandValue(bandInfo.radioType, {
                    ...bandInfo,
                    groupKeyConfig: {
                      ...bandInfo.groupKeyConfig!,
                      isEnabled: !bandInfo.groupKeyConfig!.isEnabled,
                    },
                  })
                }
                disabled={!isInteractionEnabled}
              />
            </Col>
          </WifiMoreOptionRow>
        )}
        {bandInfo.wmmConfig !== undefined && (
          <>
            <WifiMoreOptionRow>
              <WifiLabelAndDescription
                label={"Wi-Fi QoS (WMM)"}
                desc={
                  "Improves the quality of service (QoS) for voice, video, and audio streaming over Wi-Fi by prioritizing these data streams."
                }
              />
              <Col lg={2} sm={4} xs={1}></Col>
              <Col
                className="p-0 align-items-center justify-content-end py-sm-1 d-flex gap-3"
                xxl={3}
                lg={5}
                sm={2}
                xs={3}
              >
                {bandInfo.wmmConfig.isEnabled ? "Enabled" : "Disabled"}
                <VZToggleButton
                  checked={bandInfo.wmmConfig.isEnabled}
                  onChange={() =>
                    setBandValue(bandInfo.radioType, {
                      ...bandInfo,
                      wmmConfig: {
                        ...bandInfo.wmmConfig!,
                        isEnabled: !bandInfo.wmmConfig!.isEnabled,
                      },
                    })
                  }
                  disabled={bandInfo.wmmConfig.isReadOnly || !isInteractionEnabled}
                />
              </Col>
            </WifiMoreOptionRow>
            <WifiMoreOptionRow>
              <WifiLabelAndDescription
                label={"WMM Power Save"}
                desc={
                  "Improve battery life on mobile Wi-Fi devices such as smart phones and tablets by fine-tuning power consumption."
                }
              />
              <Col lg={2} sm={4} xs={1}></Col>

              <Col
                className="p-0 align-items-center justify-content-end py-sm-1 d-flex gap-3"
                xxl={3}
                lg={5}
                sm={2}
                xs={3}
              >
                {bandInfo.wmmConfig.isPowerSaveEnabled ? "Enabled" : "Disabled"}
                <VZToggleButton
                  checked={bandInfo.wmmConfig.isPowerSaveEnabled}
                  onChange={() =>
                    setBandValue(bandInfo.radioType, {
                      ...bandInfo,
                      wmmConfig: {
                        ...bandInfo.wmmConfig!,
                        isPowerSaveEnabled: !bandInfo.wmmConfig!.isPowerSaveEnabled,
                      },
                    })
                  }
                  disabled={bandInfo.wmmConfig.isReadOnly || !isInteractionEnabled}
                />
              </Col>
            </WifiMoreOptionRow>
          </>
        )}
      </OptionalComponent>
    </>
  );
};


I am giving full component could you do the same for me

there will be changed values like 

{
0:changedValue of 0th
1:changedValue of 1st 
2:changedValue of 2nd 
3:changedValue of 3rd 

}

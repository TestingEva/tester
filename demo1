const routers = [
  {
    name: "Verizon Router",
    model: "CR1000A",
    image: "./images/cr1000a.png",
  },
  {
    name: "Verizon Router",
    model: "CR1000B",
    image: "./images/cr1000a.png",
  },
  {
    name: "Verizon Internet Access Point - Router",
    model: "CHR30A-R",
    image: "./images/chr30a.png",
  },
  {
    name: "Verizon Internet Access Point - Extender",
    model: "CHR30A-E",
    image: "./images/chr30a.png",
  },
  {
    name: "Verizon Internet Gateway",
    model: "WNC-CR200A",
    image: "./images/wnc_cr200a.png",
  },
  {
    name: "Verizon Extender",
    model: "CE1000A",
    image: "./images/ce1000a.png",
  },
];

let selectedRouter = null;

function init() {
  renderRouterSelection();
}

function renderRouterSelection() {
  const app = document.getElementById("temp-root");
  if (!app) return;

  app.innerHTML = `
    <header class="header">GUI Simulator List</header>
    <div class="router-list">
      ${routers
        .map(
          (router, index) => `
        <div class="router-card" data-index="${index}">
          <img src="${router.image}" alt="${router.name}">
          <h4>${router.name}</h4>
          <p>${router.model}</p>
        </div>
      `
        )
        .join("")}
    </div>
    <button id="proceed-btn" disabled>Proceed</button>
  `;

  const routerCards = document.querySelectorAll(".router-card");
  routerCards.forEach((card) => {
    card.addEventListener("click", () => {
      routerCards.forEach((c) => c.classList.remove("selected"));
      card.classList.add("selected");
      const index = card.getAttribute("data-index");
      selectedRouter = routers[Number(index)];
      document.getElementById("proceed-btn").disabled = false;
    });
  });

  const proceedBtn = document.getElementById("proceed-btn");
  proceedBtn.addEventListener("click", renderSetupPage);
}

function renderSetupPage() {
  const app = document.getElementById("temp-root");
  if (!app || !selectedRouter) return;

  app.innerHTML = `
    <header class="header">${selectedRouter.name} Quick Setup</header>
    <div class="setup-form">
      <div class="setup-group">
        <label>Profile Mode</label>
        <div class="options">
          <button class="profile-btn selected">FiosHome</button>
          <button class="profile-btn">FiosBusiness</button>
          <button class="profile-btn">FWA Home</button>
          <button class="profile-btn">FWA Business</button>
        </div>
      </div>

      <div class="setup-group">
        <label>Enable QSW</label>
        <div class="options">
          <button class="toggle-btn selected" data-true="true">True</button>
          <button class="toggle-btn" data-true="false">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label>Enable Speed Test</label>
        <div class="options">
          <button class="toggle-btn selected" data-true="true">True</button>
          <button class="toggle-btn" data-true="false">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label>Password</label>
        <input type="text" id="password-input" placeholder="Enter password">
      </div>

      <button id="finish-btn">Finish</button>
    </div>
  `;

  const profileButtons = document.querySelectorAll(".profile-btn");
  profileButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      profileButtons.forEach((b) => b.classList.remove("selected"));
      btn.classList.add("selected");
    });
  });

  const toggleButtons = document.querySelectorAll(".toggle-btn");
  toggleButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      const group = btn.parentElement;
      if (!group) return;
      const buttonsInGroup = group.querySelectorAll(".toggle-btn");
      buttonsInGroup.forEach((b) => b.classList.remove("selected"));
      btn.classList.add("selected");
    });
  });

  document.getElementById("finish-btn").addEventListener("click", () => {
    alert("Setup Complete!");
  });
}

document.addEventListener("DOMContentLoaded", init);

body {
  background: #f2f2f2;
}

.simulator {
  font-family: Arial, sans-serif;
  margin: 0;

  .header {
    padding: 1rem;
    text-align: center;
    font-size: 1.5rem;
  }

  .router-list {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin: 2rem;
    gap: 1rem;
  }

  .router-card {
    background: white;
    padding: 1rem;
    border-radius: 8px;
    width: 150px;
    text-align: center;
    cursor: pointer;
    transition: transform 0.3s;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  .router-card img {
    width: 100px;
    object-fit: contain;
    min-height: 150px;
  }

  .router-card:hover {
    transform: scale(1.05);
  }

  .router-card.selected {
    border: 2px solid #000000;
  }

  #proceed-btn,
  #finish-btn {
    display: block;
    margin: 2rem auto;
    padding: 0.8rem 2rem;
    font-size: 1rem;
    background: #000000;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  #proceed-btn:disabled {
    background: grey;
    cursor: not-allowed;
  }

  .setup-form {
    padding: 2rem;
    justify-items: center;
  }

  .setup-group {
    display: flex;
    margin-bottom: 2rem;
    align-items: baseline;
    gap: 1rem;
  }

  .options {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
  }

  .profile-btn,
  .toggle-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #ccc;
    background: white;
    cursor: pointer;
    border-radius: 4px;
    transition: background 0.3s;
  }

  .profile-btn.selected,
  .toggle-btn.selected {
    background: #000000;
    color: white;
    border: 1px solid #000000;
  }

  input[type="text"] {
    width: 100%;
    padding: 0.8rem;
    font-size: 1rem;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
}

.topbar-gui {
  height: 70px;
  border-bottom: 1px solid #d8dada;
}


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Router GUI Simulator</title>
    <link rel="stylesheet" href="./styles.css" />
  </head>
  <body>
    <div class="topbar-gui">
      <div style="height: 70px">
        <svg
          id="Layer_1"
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          x="0px"
          y="0px"
          viewBox="0 0 796.916 326.656"
          xml:space="preserve"
          style="height: inherit"
        >
          <style type="text/css">
            .st0 {
              fill: #f50a23;
            }
          </style>
          <path
            class="st0"
            d="M606.78,229.306h29.661v-54.187c0-12.36,7.225-21.107,17.872-21.107c10.267,0,15.591,7.227,15.591,17.495v57.8 h29.661v-63.503c0-21.488-12.928-36.699-33.844-36.699c-13.308,0-22.626,5.705-29.661,16.162h-0.571v-13.309h-28.71V229.306z  M548.598,129.295c-30.993,0-51.716,22.246-51.716,51.527c0,29.092,20.724,51.528,51.716,51.528s51.716-22.436,51.716-51.528 C600.314,151.54,579.59,129.295,548.598,129.295z M548.408,210.483c-14.072,0-21.485-11.787-21.485-29.661 c0-18.063,7.413-29.662,21.485-29.662c14.069,0,21.865,11.598,21.865,29.662C570.273,198.696,562.477,210.483,548.408,210.483z  M412.46,229.306h83.28v-23.385h-47.153v-0.573l45.062-50.576v-22.814H412.46v23.385h45.633v0.571L412.46,206.87V229.306z  M374.429,229.306h29.851v-97.348h-29.851V229.306z M305.219,229.306h29.661v-44.68c0-20.346,12.169-29.283,30.802-26.81h0.571 v-25.668c-1.522-0.571-3.232-0.761-6.084-0.761c-11.598,0-19.394,5.323-26.05,16.731h-0.571v-16.16h-28.329V229.306z  M250.651,210.675c-13.12,0-21.105-8.559-22.627-21.675h70.16c0.19-20.918-5.325-37.65-16.923-48.107 c-8.174-7.605-19.014-11.789-32.703-11.789c-29.279,0-49.625,22.246-49.625,51.337c0,29.28,19.394,51.716,51.527,51.716 c12.169,0,21.865-3.232,29.851-8.747c8.557-5.891,14.64-14.45,16.35-23.005h-28.519C265.291,206.87,259.396,210.675,250.651,210.675 z M249.129,150.399c10.457,0,17.682,7.798,18.823,19.205h-39.738C230.497,158.004,236.77,150.399,249.129,150.399z M374.429,97.35 h29.851v26.43h-29.851V97.35z M165.966,229.308c0.782,0,1.485-0.48,1.765-1.213l36.908-96.137h-29.943l-23.701,61.736 l-23.701-61.736H97.35l36.908,96.137c0.28,0.733,0.983,1.213,1.765,1.213H165.966z"
          ></path>
        </svg>
      </div>
    </div>
    <div class="simulator">
      <div id="temp-root"></div>
    </div>

    <script src="./app.js" type="module"></script>
  </body>
</html>

Now I want a small change in the setup form 
I want that the key and there options aligned properly suppose key should take 3 col and rest their values this will make it look good rather than making it look slugish and unaligmed 


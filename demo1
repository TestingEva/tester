const fs = require("fs");
const path = require("path");
const esbuild = require("esbuild");

// Step 1: Build the React App
const buildDir = path.join(__dirname, "build");
if (!fs.existsSync(buildDir)) {
    console.log("Building the React app...");
    require("child_process").execSync("npm run build", { stdio: "inherit" });
}

// Step 2: Minify and Bundle JavaScript
console.log("Bundling JavaScript...");
esbuild.buildSync({
    entryPoints: [path.join(buildDir, "static/js/main.js")],
    bundle: true,
    minify: true,
    outfile: path.join(__dirname, "dist", "app.min.js"),
});

const jsContent = fs.readFileSync(path.join(__dirname, "dist", "app.min.js"), "utf-8");

// Step 3: Inline CSS
console.log("Inlining CSS...");
const cssFiles = fs.readdirSync(path.join(buildDir, "static/css"));
let cssContent = "";
cssFiles.forEach((file) => {
    if (file.endsWith(".css")) {
        cssContent += fs.readFileSync(path.join(buildDir, "static/css", file), "utf-8");
    }
});

// Step 4: Generate Single HTML File
console.log("Creating single-file.html...");
const htmlTemplate = fs.readFileSync(path.join(buildDir, "index.html"), "utf-8");
const inlinedHTML = htmlTemplate
    .replace(/<link[^>]+href="\/static\/css\/[^"]+"[^>]*>/, `<style>${cssContent}</style>`)
    .replace(/<script[^>]+src="\/static\/js\/[^"]+"[^>]*><\/script>/, `<script>${jsContent}</script>`);

const outputDir = path.join(__dirname, "dist");
if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);

fs.writeFileSync(path.join(outputDir, "single-file.html"), inlinedHTML);

console.log("âœ… Single HTML file created: dist/single-file.html");

export const DeviceRolePage: React.FC = () => {
  const { pageType, isRoleAutoDetected, setRole } = useDeviceRoleManager();
  const invalidatePlatformInfo = useInvalidatePlatformInfo();
  const navigator = useNavigator();
  const { invoke: clearSession } = useClearSession();
  
  const [showLoading, setShowLoading] = useState(false);
  const loadingTimerRef = useRef<NodeJS.Timeout | null>(null);

  const onLoginClick = async () => {
    await clearSession();
    invalidatePlatformInfo();
  };

  useEffect(() => {
    if (pageType === DeviceRoleFlow.Qsw) {
      navigator(RouteType.QSW, {});
      invalidatePlatformInfo();
    }
    //eslint-disable-next-line
  }, [pageType]);

  useEffect(() => {
    if (pageType === DeviceRoleFlow.Reboot) {
      setShowLoading(true);
      loadingTimerRef.current = setTimeout(() => {
        setShowLoading(false);
      }, 5000);
    }
    
    return () => {
      if (loadingTimerRef.current) {
        clearTimeout(loadingTimerRef.current);
      }
    };
  }, [pageType]);

  return (
    <Container fluid className="vh-100 overflow-auto loginPage--full--page--container justify-content-center">
      <Topbar showProfile={false} useContentFilter={false} />
      <DeviceRoleContainer>
        {showLoading ? (
          <LoadingIndicator />
        ) : (
          <>
            <OptionalComponent show={pageType === DeviceRoleFlow.Selection}>
              <DeviceRoleSelectionPageView role={PlatformRole.Unknown} onNextClick={setRole} />
            </OptionalComponent>
            <OptionalComponent show={pageType === DeviceRoleFlow.Reboot}>
              <DeviceRoleRebootPageView isAutoDetected={isRoleAutoDetected} onLoginClick={onLoginClick} />
            </OptionalComponent>
          </>
        )}
      </DeviceRoleContainer>
    </Container>
  );
};

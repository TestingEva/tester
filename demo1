import { getUsers } from './testing';
import wretch, { factory } from 'wretch';

// Mock the wretch library to return a fake response
jest.mock('wretch');

describe('API Testing', () => {
    test('getUsers - success', async () => {
        const mockResponse = {
            userId: 1,
            id: 1,
            title: "delectus aut autem",
            completed: false
        };

        // Mock the wretch.get().json() method to return the mockResponse
        (wretch as jest.Mocked<typeof factory>).mockReturnValueOnce({
            get: jest.fn().mockReturnValueOnce({ json: jest.fn().mockResolvedValueOnce(mockResponse) })
        });

        const users = await getUsers();
        expect(users).toEqual(mockResponse);
    });

    test('getUsers - failure', async () => {
        // Mock the wretch.get().json() method to throw an error
        (wretch as jest.Mocked<typeof factory>).mockReturnValueOnce({
            get: jest.fn().mockReturnValueOnce({ json: jest.fn().mockRejectedValueOnce(new Error('Network error')) })
        });

        // Call the getUsers function and expect it to throw an error
        await expect(getUsers()).rejects.toThrow('Failed to fetch users');
    });
});

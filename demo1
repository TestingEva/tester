function isValidSubnetMask(mask: string): boolean {
  const octets = mask.split(".");

  // Must have exactly 4 octets
  if (octets.length !== 4) return false;

  const binaryMask = octets.map(octet => {
    const num = Number(octet);
    // Each octet must be a valid number between 0 and 255
    if (isNaN(num) || num < 0 || num > 255) return null;
    return num.toString(2).padStart(8, "0");
  });

  if (binaryMask.includes(null)) return false;

  const binaryString = binaryMask.join("");
  
  // Check for the first occurrence of '0' and ensure no '1' appears after it
  const firstZeroIndex = binaryString.indexOf("0");
  if (firstZeroIndex === -1) return true; // All ones, valid
  return !binaryString.slice(firstZeroIndex).includes("1");
}

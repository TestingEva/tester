type SortStateProps = {
  key: keyof PortTriggeringInfo;
  order: "asc" | "desc";
};

export type PortTriggeringUiModel = {
  id: string;
  name: string;
  portTiggerStart: number;
  portTriggerEnd: number;
  portFwdStart: number;
  portFwdEnd: number;
  protocol: PortForwardingProtocol.Tcp | PortForwardingProtocol.Udp | PortForwardingProtocol.Both;
  schedule: "Always" | SchedulerRuleInfo;
  isEnabled: boolean;
  isEditing: boolean;
};

export type PortTriggeringInfo = {
  id: string;
  name: string;
  portTiggerStart: number;
  portTriggerEnd: number;
  portFwdStart: number;
  portFwdEnd: number;
  protocol: PortForwardingProtocol.Tcp | PortForwardingProtocol.Udp | PortForwardingProtocol.Both;
  schedule: "Always" | SchedulerRuleInfo;
  isEnabled: boolean;
};

export const PortTriggering = () => {
  const { data, isError, isPending, isFetching } = usePortTriggeringInfo();
  const [triggerRules, setTriggerRules] = useState<PortTriggeringUiModel[]>();

  const initialData = useMemo(() => {
    if (data === undefined) {
      return [];
    }
    return data;
  }, [data]);
  const { addItem, removeItem, updateItem, getResult, list, hasChanges } = useListTracker(initialData, "id");

  useEffect(() => {
    if (data !== undefined) {
      const portTrigRules = data.map(convertPortTriggeringInfoToUiInfo);
      setTriggerRules([...portTrigRules]);
    }
    //eslint-disable-next-line
  }, [data, isFetching]);

  const defaultSortState: SortStateProps = useMemo(
    () => ({
      key: "name",
      order: "asc",
    }),
    // eslint-disable-next-line
    []
  );
  const [sortState, setSortState] = useState<SortStateProps>(defaultSortState);

  const sortedData = useMemo(() => {
    return sortBy(sortState.order, list, (item) => {
      const sortKey = sortState.key;
      if (sortKey === "schedule") {
        if (typeof item.schedule === "string") {
          return item.schedule;
        }
        return item.schedule.name;
      } else {
        return item[sortKey];
      }
    });
  }, [list, sortState.key, sortState.order]);

  const onSortClick = (key: keyof PortTriggeringInfo, sortOrder: "asc" | "desc") => {
    setSortState({ key: key, order: sortOrder });
    setTriggerRules(() => {
      if (triggerRules !== undefined) {
        console.log("inside this");
        return sortBy(sortState.order, triggerRules, (item) => {
          const sortKey = sortState.key;
          if (sortKey === "schedule") {
            if (typeof item.schedule === "string") {
              return item.schedule;
            }
            return item.schedule.name;
          } else {
            return item[sortKey];
          }
        });
      }
    });
  };

  if (isError) {
    return <ErrorIndicator />;
  }

  if (data === undefined || isPending || triggerRules === undefined) {
    return <LoadingIndicator />;
  }

  return <PortTriggeringView list={sortedData} triggerRules={triggerRules} onSortClick={onSortClick} />;
};

the main problem i am facing is that the same function is sorting the sortedData but the trigger data is not being sorted its having the value of previus sort
also its like suppose all are forms in the which i can edit the fields Ui model will be saying it

suggest me the things


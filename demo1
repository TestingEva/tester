function renderSetupPage() {
  const app = document.getElementById("temp-root");
  if (!app || !selectedRouter) return;

  setConfigStore("modelName", selectedRouter.model);

  app.innerHTML = `
    <header class="header">${selectedRouter.name} Quick Setup</header>
    <div class="setup-form">
      <div class="setup-group">
        <label class="setup-label">Profile Mode</label>
        <div class="options" id="profile-options">
          ${availableProfileMode
            .map(
              (mode) =>
                `<button class="profile-btn" data-mode="${mode}" aria-pressed="${selectedProfileMode === mode}">${mode}</button>`
            )
            .join("")}
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Enable QSW</label>
        <div class="options" id="qsw-options">
          <button class="toggle-btn" data-value="true" aria-pressed="${qswEnableStatus}">True</button>
          <button class="toggle-btn" data-value="false" aria-pressed="${!qswEnableStatus}">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Enable Speed Test</label>
        <div class="options" id="speedtest-options">
          <button class="toggle-btn" data-value="true" aria-pressed="${speedTestEnabled}">True</button>
          <button class="toggle-btn" data-value="false" aria-pressed="${!speedTestEnabled}">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Password</label>
        <input type="text" id="password-input" placeholder="Enter password">
      </div>
      <div class="setup-desc">
        Attention! This password will be used to login the Simulator GUI
      </div>

      <button id="finish-btn">Finish</button>
    </div>
  `;

  // Generic handler to reduce DOM reads/writes
  const setupToggleHandler = (parentId, stateKey, parse = (v) => v) => {
    document.getElementById(parentId).addEventListener("click", (e) => {
      const target = e.target.closest("button");
      if (!target) return;

      const group = target.parentElement;
      const selected = group.querySelector('[aria-pressed="true"]');
      if (selected === target) return; // already selected

      selected?.setAttribute("aria-pressed", "false");
      target.setAttribute("aria-pressed", "true");

      window[stateKey] = parse(target.dataset.value || target.dataset.mode);
    });
  };

  setupToggleHandler("profile-options", "selectedProfileMode", (v) => v);
  setupToggleHandler("qsw-options", "qswEnableStatus", (v) => v === "true");
  setupToggleHandler("speedtest-options", "speedTestEnabled", (v) => v === "true");

  document.getElementById("finish-btn").addEventListener("click", () => {
    const password = document.getElementById("password-input").value.trim();
    if (!password) return alert("Please enter a password.");

    setConfigStore("password", password);
    setConfigStore("profileMode", selectedProfileMode);
    setConfigStore("qswEnabled", qswEnableStatus);
    setConfigStore("speedTestEnabled", speedTestEnabled);

    alert("Setup Complete!");
  });
}

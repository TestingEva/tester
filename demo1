import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import {
  clearSession,
  getLoginMetadata,
  getSession,
  login,
} from "../../data/auth/auth";
import { AsyncHookData, LazyAsyncHookData } from "../hook_data";
import { asyncHookData, lazyAsyncHookData } from "../hook_data_impl";
import { KEY_LOGIN, KEY_LOGIN_METADATA, KEY_SESSION } from "../keys";
import { AuthMetadata, AuthRequest, AuthResponse, Session } from "./models";

export function useSession(): AsyncHookData<Session> {
  const { data, status, error } = useQuery({
    queryKey: [KEY_SESSION],
    queryFn: getSession,
    staleTime: 1000,
  });
  return asyncHookData(status, error, data === null ? undefined : data);
}

export function useLogout(): LazyAsyncHookData<void, void> {
  const client = useQueryClient();
  const { mutateAsync, status, error, data } = useMutation({
    mutationFn: clearSession,
    onSuccess: async (_, __, ___) => {
      await client.invalidateQueries({ queryKey: [KEY_SESSION] });
      //clear all cached data
      await client.invalidateQueries();
    },
  });
  return lazyAsyncHookData(status, error, data, mutateAsync);
}

export function useLogin(): LazyAsyncHookData<AuthRequest, AuthResponse> {
  const client = useQueryClient();
  const { mutateAsync, status, data, error } = useMutation({
    mutationKey: [KEY_LOGIN],
    mutationFn: login,
    onSuccess: async (_, __, ___) => {
      await client.invalidateQueries({ queryKey: [KEY_SESSION] });
    },
  });
  return lazyAsyncHookData(status, error, data, mutateAsync);
}

export function useLoginMetadata(): AsyncHookData<AuthMetadata> {
  const { status, data, error } = useQuery({
    queryKey: [KEY_LOGIN_METADATA],
    queryFn: getLoginMetadata,
  });
  return asyncHookData(status, error, data);
}

In this i have a useLoginMetadata function for this i want to write the unit 
testcases 
the response of the APi is the following
{
    adminPwdChanged: false,
    passwordRequired: true
}
now i want you to use nock to write the test cases for the same 

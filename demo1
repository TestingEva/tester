import { useEffect, useState } from "react";
import { useDMZPageInfo } from "../../../domain/dmz-host/hooks";
import { DMZHostPageInfo } from "../../../domain/dmz-host/models";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { DMZHostView } from "./DMZHostView";

export const DMZHost: React.FC = () => {
  const { data, isPending, isError } = useDMZPageInfo();
  const [currentData, setCurrentData] = useState<DMZHostPageInfo>();
  const [disableApplyButton, setDisableApplyButton] = useState(false);
  const [selectedIpv4Address, setSelectedIpv4Address] = useState("");
  const [selectedIpv6Address, setSelectedIpv6Address] = useState("");
  const [macAddress, setMacAddress] = useState("");
  const [ipv4Octets, setIpv4Octets] = useState(["", "", "", ""]);
  const [ipv6Address, setIpv6Address] = useState("");

  useEffect(() => {
    if (data !== undefined) {
      setCurrentData(data);

      const tempIpv6 = data.ipv6HostInfo.find((host) => host.ipAddress === data.ipv6Address);
      setSelectedIpv6Address(`${tempIpv6?.macAddress}-${tempIpv6?.hostName}` ?? "Menu");
      setMacAddress(tempIpv6?.macAddress ?? "");
      setIpv6Address(tempIpv6?.ipAddress ?? "");

      const tempIpv4 = data.ipv4HostInfo.find((host) => host.ipAddress === data.ipv4Address);
      if (tempIpv4) {
        setSelectedIpv4Address(`${tempIpv4.hostName}-${tempIpv4.ipAddress}`);
        setIpv4Octets(tempIpv4.ipAddress.split("."));
      }
    }
  }, [data]);

  useEffect(() => {
    if (currentData !== undefined && data !== undefined) {
      setDisableApplyButton(
        currentData.ipv4Enabled === data.ipv4Enabled &&
          currentData.ipv6Enabled === data.ipv6Enabled &&
          currentData.ipv4Address === data.ipv4Address &&
          currentData.ipv6Address === data.ipv6Address
      );
    }
  }, [data, currentData]);

  const handleChange = (key: keyof DMZHostPageInfo, value?: string) => {
    if (currentData !== undefined) {
      if (key === "ipv4Enabled" || key === "ipv6Enabled") {
        setCurrentData({ ...currentData, [key]: !currentData[key] });
      } else {
        setCurrentData({ ...currentData, [key]: value });
      }
    }
  };

  const handleIpv4Change = (value: string) => {
    const [hostName, ipAddress] = value.split(/-(?=[^-]+$)/);
    setSelectedIpv4Address(value);
    setIpv4Octets(ipAddress.split("."));
    handleChange("ipv4Address", ipAddress);
  };

  const handleIpv6Change = (value: string) => {
    const [macAddress, _] = value.split(/-(.+)/);
    const selectedHost = currentData!.ipv6HostInfo.find((host) => host.macAddress === macAddress);
    setMacAddress(selectedHost!.macAddress ?? "");
    setIpv6Address(selectedHost!.ipAddress ?? "");
    setSelectedIpv6Address(`${selectedHost?.macAddress}-${selectedHost?.hostName}`);
    handleChange("ipv6Address", selectedHost!.ipAddress ?? "");
  };

  if (isPending || currentData === undefined) {
    return <LoadingIndicator />;
  }

  if (isError) {
    return <ErrorIndicator />;
  }

  return (
    <DMZHostView
      data={currentData}
      disableApplyButton={disableApplyButton}
      handleChange={handleChange}
      selectedIpv4Address={selectedIpv4Address}
      handleIpv4Change={handleIpv4Change}
      selectedIpv6Address={selectedIpv6Address}
      handleIpv6Change={handleIpv6Change}
      macAddress={macAddress}
      ipv4Octets={ipv4Octets}
      ipv6Address={ipv6Address}
    />
  );
};
import { Col } from "react-bootstrap";
import { DMZHostPageInfo } from "../../../domain/dmz-host/models";
import { RouteType } from "../../../domain/misc/models";
import { VZBody } from "../../components/vz-body/VZBody";
import { VZButton } from "../../components/vz-button/VZButton";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { VZToggleButton } from "../../components/vz-toggle-button/VZToggleButton";
import { DMZHostDesc, DMZHostDetailsSection, DMZHostHeader, ToggleContainer } from "./styles";
import { convertIpv4InfoToDropdownInfo, convertIpv6InfoToDropdownInfo } from "./utils";

type Props = {
  data: DMZHostPageInfo;
  disableApplyButton: boolean;
  handleChange: (key: keyof DMZHostPageInfo, value?: string) => void;
  selectedIpv4Address: string;
  handleIpv4Change: (value: string) => void;
  selectedIpv6Address: string;
  handleIpv6Change: (value: string) => void;
  macAddress: string;
  ipv4Octets: string[];
  ipv6Address: string;
};

const customCSS = {
  width: "70px",
  paddingRight: "0 !important",
};

export const DMZHostView: React.FC<Props> = ({
  data,
  disableApplyButton,
  handleChange,
  selectedIpv4Address,
  handleIpv4Change,
  selectedIpv6Address,
  handleIpv6Change,
  macAddress,
  ipv4Octets,
  ipv6Address,
}) => {
  return (
    <>
      <VZHeader
        title="DMZ Host"
        breadcrumbData={[{ label: "Security & Firewall" }, { label: "DMZ Host", destType: RouteType.DMZ_HOST }]}
        rightBody={
          <VZButton
            disabled={disableApplyButton}
            onClick={() => {
              console.log(data);
            }}
          >
            Apply Changes
          </VZButton>
        }
      />
      <VZBody>
        <DMZHostHeader className="hb">How it works...</DMZHostHeader>
        <DMZHostDesc>
          Allow a single computer or device to be fully exposed to the <br />
          Internet.
        </DMZHostDesc>
        <ToggleContainer>
          <Col className="col-4 b">DMZ IPv4 Host</Col>
          <Col>
            <VZToggleButton checked={data.ipv4Enabled} onChange={() => handleChange("ipv4Enabled")} />
            <label className="ps-3">{data.ipv4Enabled ? "Enabled" : "Disabled"}</label>
          </Col>
        </ToggleContainer>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Local Host </Col>
          <Col className="col-3">
            <VZDropdown
              disabled={!data.ipv4Enabled}
              selectedItem={selectedIpv4Address === "" ? "Menu" : selectedIpv4Address}
              onSelect={handleIpv4Change}
              options={convertIpv4InfoToDropdownInfo(data.ipv4HostInfo)}
              getOptionAsString={(e) => e}
            />
          </Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection>
          <Col className="col-3 b ps-0">Address </Col>
          <Col>
            <VZInputTextField value={ipv4Octets[0]} onChange={() => {}} disabled style={customCSS} error={false} />
            <VZInputTextField value={ipv4Octets[1]} onChange={() => {}} disabled style={customCSS} error={false} />
            <VZInputTextField value={ipv4Octets[2]} onChange={() => {}} disabled style={customCSS} error={false} />
            <VZInputTextField value={ipv4Octets[3]} onChange={() => {}} disabled style={customCSS} error={false} />
          </Col>
        </DMZHostDetailsSection>
        <ToggleContainer>
          <Col className="col-4 b">DMZ IPv6 Host</Col>
          <Col>
            <VZToggleButton checked={data.ipv6Enabled} onChange={() => handleChange("ipv6Enabled")} />
            <label className="ps-3">{data.ipv6Enabled ? "Enabled" : "Disabled"}</label>
          </Col>
        </ToggleContainer>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Local Host </Col>
          <Col className="col-3">
            <VZDropdown
              disabled={!data.ipv6Enabled}
              selectedItem={selectedIpv6Address === "" ? "Menu" : selectedIpv6Address}
              onSelect={handleIpv6Change}
              options={convertIpv6InfoToDropdownInfo(data.ipv6HostInfo)}
              getOptionAsString={(e) => e}
            />
          </Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">Address </Col>
          <Col>{ipv6Address}</Col>
        </DMZHostDetailsSection>
        <DMZHostDetailsSection $needDivider>
          <Col className="col-3 b ps-0">MAC Address </Col>
          <Col>{macAddress}</Col>
        </DMZHostDetailsSection>
      </VZBody>
    </>
  );
};


This is working fine as expected but now there is an scenario if data.ipAddress is "" then we will add the defaultOctets as an string like if this are my default octets then defaultOctets:[392,168,1,1]
add this as 392.168.1. in the dropdown menu in the last and also this is will be default selected and the last input field will be editable now and suppose in the last feild suppose if i typed 23 then it
should also depict the same on the dropdown menu as 392.168.1.23

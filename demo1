import { Dayjs } from "dayjs";
import { useMemo, useState } from "react";
import { Col } from "react-bootstrap";
import { useEventLogger } from "../../../../domain/event-logger/hooks";
import { LogCategory } from "../../../../domain/system-logging/models";
import { getUnixEpochUtc } from "../../../../domain/utils";
import { useFormState } from "../../../components/form";
import { OptionalComponent } from "../../../components/OptionalComponent";
import { VZButton } from "../../../components/vz-button/VZButton";
import { VZDropdown } from "../../../components/vz-dropdown/VZDropdown";
import { VZRadioButton } from "../../../components/vz-radio-button/VZRadioButton";
import { shaEvents } from "../../../shaEvents";
import { getHours12 } from "../../scheduler-rules/utils";
import { SystemLoggingCustomRange } from "../models";
import { convertLogCategoryToString } from "../utils";
import { VZDatePicker } from "./DatePicker";
import { OptionViewContainer, OptionsButtonCol, OptionsViewDateRow, OptionsViewHeader, OptionsViewRow } from "./styles";

type Props = {
  onChangeDateTimeRange: (start: Dayjs, end: Dayjs) => void;
  onCancelClick: () => void;
  endDateTime: Dayjs;
  selectedType: LogCategory;
};
export const OptionsView: React.FC<Props> = ({ onCancelClick, onChangeDateTimeRange, endDateTime, selectedType }) => {
  const [selectedDateOption, setSelectedDateOption] = useState<0 | 1 | 2>(0);
  const { logShaEvent } = useEventLogger();
  const timeOptions = useMemo(() => Array.from({ length: 24 }, (_, ind) => getUnixEpochUtc().hour(ind)), []);

  const initialFormData: SystemLoggingCustomRange = useMemo(
    () => ({
      startDate: endDateTime,
      startTime: endDateTime.set("minutes", 0).set("seconds", 0).set("millisecond", 0),
      endDate: endDateTime,
      endTime: endDateTime.set("minutes", 0).set("seconds", 0).set("millisecond", 0),
    }),
    [endDateTime]
  );
  const { currentState, setValue } = useFormState(initialFormData);

  const onDateRangeOptionSaveClicked = () => {
    const selectedStartDateTime = currentState.startDate
      .set("hour", currentState.startTime.hour())
      .set("minutes", 0)
      .set("seconds", 0)
      .set("millisecond", 0);
    const selectedEndDateTime = currentState.endDate
      .set("hour", currentState.endTime.hour())
      .set("minutes", 0)
      .set("seconds", 0)
      .set("millisecond", 0);
      const errors = validateDateRange(selectedStartDateTime,selectedEndDateTime)
    onChangeDateTimeRange(selectedStartDateTime, selectedEndDateTime);
  };

  const onSaveButtonClicked = () => {
    logShaEvent(shaEvents.sysLogOptionsSaveClick.replace("{SYS_LOG_TYPE}", convertLogCategoryToString(selectedType)));
    switch (selectedDateOption) {
      case 0:
        onChangeDateTimeRange(endDateTime.subtract(1, "days"), endDateTime);
        break;
      case 1:
        onChangeDateTimeRange(endDateTime.subtract(1, "weeks"), endDateTime);
        break;
      case 2:
        onDateRangeOptionSaveClicked();
        break;
    }
  };

  const onPastDaySelect = () => {
    setSelectedDateOption(0);
    logShaEvent(shaEvents.sysLogOptionsDaySelect.replace("{SYS_LOG_TYPE}", convertLogCategoryToString(selectedType)));
  };

  const onPastWeekSelect = () => {
    setSelectedDateOption(1);
    logShaEvent(shaEvents.sysLogOptionsWeekSelect.replace("{SYS_LOG_TYPE}", convertLogCategoryToString(selectedType)));
  };

  const onCustomRangeSelect = () => {
    setSelectedDateOption(2);
    logShaEvent(
      shaEvents.sysLogOptionsCustomRangeSelect.replace("{SYS_LOG_TYPE}", convertLogCategoryToString(selectedType))
    );
  };

  const onCancelClicked = () => {
    onCancelClick();
    logShaEvent(shaEvents.sysLogOptionsCancelClick.replace("{SYS_LOG_TYPE}", convertLogCategoryToString(selectedType)));
  };

  return (
    <OptionViewContainer>
      <OptionsViewHeader>Logging view options</OptionsViewHeader>
      <OptionsViewRow>
        <VZRadioButton selected={selectedDateOption === 0} onSelect={onPastDaySelect} id="sys-log-past-day" />
        Past day
      </OptionsViewRow>
      <OptionsViewRow>
        <VZRadioButton selected={selectedDateOption === 1} onSelect={onPastWeekSelect} id="sys-log-past-week" />
        Past week
      </OptionsViewRow>
      <OptionsViewRow>
        <VZRadioButton selected={selectedDateOption === 2} onSelect={onCustomRangeSelect} id="sys-log-custom-time" />
        Custom range
      </OptionsViewRow>
      <OptionalComponent show={selectedDateOption === 2}>
        <OptionsViewDateRow>
          <Col className="d-flex gap-2 gap-xxl-5 ps-0">
            <Col lg={4} sm={4} xl={3} xs={3} xxl={2}>
              <Col>Start Date</Col>
              <VZDatePicker
                selectedDate={currentState.startDate}
                setSelectedDate={(e) => {
                  setValue("startDate", e!);
                }}
              />
            </Col>
            <Col lg={3} sm={4} xl={2} xs={3}>
              <Col>Start Time</Col>
              <VZDropdown
                id="start-time"
                options={timeOptions}
                selectedItem={currentState.startTime}
                onSelect={(item) => setValue("startTime", item)}
                getOptionAsString={(e) => getHours12(e)}
              />
            </Col>
          </Col>
        </OptionsViewDateRow>
        <OptionsViewDateRow>
          <Col className="d-flex gap-2 gap-xxl-5 ps-0">
            <Col lg={4} sm={4} xl={3} xs={3} xxl={2}>
              <Col>End Date</Col>
              <VZDatePicker
                selectedDate={currentState.endDate}
                setSelectedDate={(e) => {
                  setValue("endDate", e!);
                }}
              />
            </Col>
            <Col lg={3} sm={4} xl={2} xs={3}>
              <Col>End Time</Col>
              <VZDropdown
                id="end-time"
                options={timeOptions}
                selectedItem={currentState.endTime}
                onSelect={(item) => setValue("endTime", item)}
                getOptionAsString={(e) => getHours12(e)}
              />
            </Col>
          </Col>
        </OptionsViewDateRow>

        {/* 
        For start time add the sha event - sysLogOptionsStartTime:
          "Diagnostics & Monitoring > System Logging > {SYS_LOG_TYPE} Log > Log viewing options > Click Start Time Selector" ,
        For start date add the sha event - sysLogOptionsStartDate:
          "Diagnostics & Monitoring > System Logging > {SYS_LOG_TYPE} Log > Log viewing options > Click Start Date", 
        For end time add the sha event - sysLogOptionsEndTime:
          "Diagnostics & Monitoring > System Logging > {SYS_LOG_TYPE} Log > Log viewing options > Click End Time Selector",
        For end date tha sha event - sysLogOptionsEndDate:
          "Diagnostics & Monitoring > System Logging > {SYS_LOG_TYPE} Log > Log viewing options > Click End Date"  
        */}
      </OptionalComponent>
      <OptionsButtonCol>
        <VZButton small secondary onClick={onCancelClicked}>
          Cancel
        </VZButton>
        <VZButton small onClick={onSaveButtonClicked}>
          Save
        </VZButton>
      </OptionsButtonCol>
    </OptionViewContainer>
  );
};

export default OptionsView;


finish this function validateDateRange 
it should validate startDateTime should be less than or endDateTime

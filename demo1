const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

module.exports = {
  resolve: {
    fallback: {
      "crypto": false,
      "crypto": require.resolve("crypto-browserify")
    }
  },
  plugins: [
    new BundleAnalyzerPlugin()
  ]
}

this is my webpack.config.js
and below is my logger file 
let logs = {
    info: [],
    debug: [],
    warn: [],
    error: [],
    events: []
};
const threshold = {
    info: 50,
    debug: 50,
    warn: 10,
    error: 5,
    events: 50
}
const isProduction = false;

export const infoLogs = async (tag = "infoLogs", message = "") => {
    const timestamp = new Date().toISOString();
    logs['info'].push(`${timestamp} info ${tag} ${message}`)
    if (logs.info.length === threshold.info) {
        await sendLogsToAPI(logs.info);
        logs.info = [];
    }
    !isProduction && console.log("logs", logs)
}

export const debugLogs = async (tag = "debugLogs", message = "") => {
    const timestamp = new Date().toISOString();
    logs['debug'].push(`${timestamp} debug ${tag} ${message}`)
    if (logs.debug.length === threshold.debug) {
        await sendLogsToAPI(logs.debug);
        logs.info = [];
    }
    !isProduction && console.log("logs", logs)
}

export const warnLogs = async (tag = "warnLogs", message = "") => {
    const timestamp = new Date().toISOString();
    logs['warn'].push(`${timestamp} warn ${tag} ${message}`)
    if (logs.warn.length === threshold.warn) {
        await sendLogsToAPI(logs.warn);
        logs.warn = [];
    }
    !isProduction && console.log("logs", logs)
}

export const errorLogs = async (tag = "errorLogs", message = "",extra ="") => {
    const timestamp = new Date().toISOString();
    logs['error'].push(`${timestamp} error ${tag} ${message} ${extra}`)
    if (logs.error.length === threshold.error) {
        await sendLogsToAPI(logs.error);
        logs.error = [];
    }
    !isProduction && console.log("logs", logs)
}

export const eventsLogs = async (tag = "eventsLogs", message = "", context = "") => {
    const timestamp = new Date().toISOString();
    logs['events'].push(`${timestamp} events ${tag} ${message} ${context}`)
    if (logs.events.length === threshold.events) {
        await sendLogsToAPI(logs.events);
        logs.events = [];
    }
    !isProduction && console.log("logs", logs)
}

const sendLogsToAPI = async (logArray) => {
    try {
        const response = await fetch('test', {
            method: 'POST',
            mode: 'cors',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(logArray)
        });

        if (!response.ok) {
            throw new Error('Failed to send logs to API');
        }
    } catch (error) {
        errorLogs('FetchError', `Error sending logs to API:${error}`);
    }
};

now i want to keep my logs and send them when the threshold is hit witch the above code does well 

but on my console i am finding the errors  like 
"react-dom.development.js:86 Warning: Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.
    at Suspense
    at RenderedRoute (http://localhost:3000/static/js/bundle.js:62565:5)
    at Routes (http://localhost:3000/static/js/bundle.js:63256:5)
    at div
    at Router (http://localhost:3000/static/js/bundle.js:302:81)
    at App
    at Provider (http://localhost:3000/static/js/bundle.js:58045:3)
    at Router (http://localhost:3000/static/js/bundle.js:63190:15)
    at HashRouter (http://localhost:3000/static/js/bundle.js:61205:5)"

which i am unable to logg using my logger function 

in react-dom.development.js there is a funtion called printWarning
which is displaying the error 

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    } // eslint-disable-next-line react-internal/safe-string-coercion


    var argsWithFormat = args.map(function (item) {
      return String(item);
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}


how can i stop displaying this Warning in my console and store it using my logger.js file 

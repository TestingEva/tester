import diff from "microdiff";
import { useEffect, useMemo, useState } from "react";
import { IGMPInfo } from "../../../data/tr181/models";
import { useIGMPInfo, useRoutingInfo, useUpdateIGMPInfo, useUpdateRoutingInfo } from "../../../domain/routing/hooks";
import { ErrorIndicator } from "../../components/error-indicator/ErrorIndicator";
import { LoadingIndicator } from "../../components/loading-indicator/LoadingIndicator";
import { findDifferencesBetweenObjects } from "../../utils";
import { RoutingView } from "./RoutingView";
import { AddRoute } from "./AddRoute";

export enum RoutingPageType {
  RoutingHomePage,
  AddRoutePage,
}

export const Routing: React.FC = () => {
  const { data, isPending, isError } = useRoutingInfo();
  const { data: igmpInfo, isPending: isIgmpPending, isError: isIgmpError, isFetching: isIgmpFetching } = useIGMPInfo();
  const { invoke, isError: updateError, isPending: isUpdating } = useUpdateRoutingInfo();
  const { invoke: updateIgmpInfo, isError: isIgmpUpdateError, isPending: isIgmpUpdating } = useUpdateIGMPInfo();
  const [currentData, setCurrentData] = useState<IGMPInfo>();
  const [activePage, setActivePage] = useState<RoutingPageType>(RoutingPageType.RoutingHomePage);
  const [editingGateway, setEditingGateway] = useState<string | undefined>();

  const isApplyButtonEnabled = useMemo(() => {
    if (currentData !== undefined && igmpInfo !== undefined) {
      return diff(currentData, igmpInfo).length !== 0;
    } else {
      return true;
    }
  }, [igmpInfo, currentData]);

  useEffect(() => {
    if (igmpInfo !== undefined) {
      setCurrentData(igmpInfo);
    }
  }, [isIgmpFetching, igmpInfo]);

  const onCheckboxChange = (key: keyof IGMPInfo) => {
    setCurrentData((prevData) => ({
      ...prevData!,
      [key]: !prevData![key],
    }));
  };

  const onRemoveButtonClick = (index: number) => {
    invoke({ id: index, type: 1 });
  };

  const onApplyButtonClicked = () => {
    if (currentData !== undefined && igmpInfo !== undefined) {
      updateIgmpInfo(findDifferencesBetweenObjects(currentData, igmpInfo));
    }
  };

  const onNewRouteButtonClicked = () => {
    setEditingGateway(undefined);
    setActivePage(RoutingPageType.AddRoutePage);
  };

  const onEditButtonClick = (gateway: string) => {
    setEditingGateway(gateway);
    setActivePage(RoutingPageType.AddRoutePage);
  };

  const handleSaveRoute = (gateway: string) => {
    // Handle save logic here, e.g., call an API to save the new route
    console.log("Saved Gateway:", gateway);
    setActivePage(RoutingPageType.RoutingHomePage);
  };

  const handleCancel = () => {
    setActivePage(RoutingPageType.RoutingHomePage);
  };

  if (isError || updateError || isIgmpError || isIgmpUpdateError) {
    return <ErrorIndicator />;
  }

  if (isPending || currentData === undefined || data === undefined || isIgmpPending) {
    return <LoadingIndicator />;
  }

  return activePage === RoutingPageType.AddRoutePage ? (
    <AddRoute initialGateway={editingGateway} onSave={handleSaveRoute} onCancel={handleCancel} />
  ) : (
    <RoutingView
      routingTableData={data}
      igmpData={currentData}
      onCheckboxChange={onCheckboxChange}
      onApplyButtonClicked={onApplyButtonClicked}
      isApplyButtonEnabled={!isApplyButtonEnabled}
      isUpdating={isUpdating || isIgmpUpdating}
      onRemoveButtonClick={onRemoveButtonClick}
      onNewRouteButtonClicked={onNewRouteButtonClicked}
      onEditButtonClick={onEditButtonClick}
    />
  );
};


import React, { useState, useEffect } from "react";
import { VZButton } from "../../components/vz-button/VZButton";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZBody } from "../../components/vz-body/VZBody";
import { Col, Form } from "react-bootstrap";

type AddRouteProps = {
  initialGateway?: string;
  onSave: (gateway: string) => void;
  onCancel: () => void;
};

export const AddRoute: React.FC<AddRouteProps> = ({ initialGateway, onSave, onCancel }) => {
  const [gateway, setGateway] = useState<string>(initialGateway || "");

  const handleSave = () => {
    onSave(gateway);
  };

  return (
    <>
      <VZHeader title="Add/Edit Route" />
      <VZBody>
        <Form>
          <Form.Group controlId="formGateway">
            <Form.Label>Gateway</Form.Label>
            <Form.Control
              type="text"
              value={gateway}
              onChange={(e) => setGateway(e.target.value)}
            />
          </Form.Group>
          <Col className="my-4">
            <VZButton onClick={handleSave}>Save</VZButton>
            <VZButton onClick={onCancel} secondary>
              Cancel
            </VZButton>
          </Col>
        </Form>
      </VZBody>
    </>
  );
};

let logs = JSON?.parse(localStorage?.getItem('logs')) || {
    info: [],
    debug: [],
    warn: [],
    error: [],
    events: []
};
const threshold = {
    info: 50,
    debug: 50,
    warn: 10,
    error: 5,
    events: 50
}
const isConsole = false;

async function storeLogs(level) {
    if (logs[level]?.length === threshold[level]) {
        await sendLogsToAPI(logs[level]);
        logs[level] = [];
    }
    isConsole && console.log("logs", logs)
    localStorage.setItem('logs', JSON.stringify(logs));
}

export const logInfo = async (tag = "WebUi", message = "") => {
    const timestamp = new Date().toISOString();
    logs['info'].push(`${timestamp} info ${tag} ${message}`)
    storeLogs('info');
}

export const logDebug = async (tag = "WebUi", message = "") => {
    const timestamp = new Date().toISOString();
    logs['debug'].push(`${timestamp} debug ${tag} ${message}`)
    storeLogs('debug');
}

export const logWarn = async (tag = "WebUi", message = "") => {
    const timestamp = new Date().toISOString();
    logs['warn'].push(`${timestamp} warn ${tag} ${message}`)
    storeLogs('warn');
}

export const logError = async (tag = "WebUi", message = "", stackTrace = "") => {
    const timestamp = new Date().toISOString();
    logs['error'].push(`${timestamp} error ${tag} ${message} ${stackTrace}`)
    storeLogs('error');
}

export const logEvent = async (tag = "WebUi", message = "", context = "") => {
    const timestamp = new Date().toISOString();
    logs['events'].push(`${timestamp} events ${tag} ${message} ${JSON?.stringify(context)}`)
    storeLogs('events');
}

const sendLogsToAPI = async (logArray) => {
    try {
        const response = await fetch('test', {
            method: 'POST',
            mode: 'cors',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(logArray)
        });
        if (!response.ok) {
            throw new Error('Failed to send logs to API');
        }
    } catch (error) {
        logError('FetchError', `Error sending logs to API:${error.stack}`);
    }
};
like do you see the intialization of logs (from line 1 to 7) i want it to initalize it when the page is loaded that is from 
the app.js 
import 'bootstrap/dist/css/bootstrap.min.css';
import "./css/App.css";
import Router from './Routers';

function App() {
  return <Router></Router>
}

export default App;
can we do the initalization in the App.js and use it the logger.js file 

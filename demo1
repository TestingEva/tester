import { useCallback, useEffect, useMemo, useRef, useState } from "react";
import { Col, Row, Table } from "react-bootstrap";
import { Ipv6DeviceInfo, RouteType } from "../../../domain/misc/models";
import { PinholePolicy, PinholePortRule, PinholeProtocol } from "../../../domain/pinholes/models";
import { SchedulerRuleInfo } from "../../../domain/scheduler-rules/models";
import { sortBy } from "../../../domain/utils";
import { useFormState } from "../../components/form";
import { ListTrackerResult, useListTracker } from "../../components/list_tracker";
import { OptionalComponent } from "../../components/OptionalComponent";
import { VZBody } from "../../components/vz-body/VZBody";
import { VZButton } from "../../components/vz-button/VZButton";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZHeader } from "../../components/vz-header/VZHeader";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { VZErrorModal } from "../../components/vz-modal/error-modal/VZErrorModal";
import { getEnumValues, sanitizeIpv6Address } from "../../utils";
import { AddOrEditSchedule } from "../scheduler-rules/AddOrEditSchedule";
import { Ipv6PinholesTableRowDetails } from "./Ipv6PinholesTableRowDetails";
import { Ipv6PinholesUiModel, PinholeTableRowForwardProp, UIPinholePolicy } from "./models";
import { Ipv6PinholesDesc, Ipv6PinholesHeader, Ipv6PinholesTableRow } from "./styles";
import {
  convertApplicationPortToUiString,
  convertInternalHostToString,
  convertIpv6PinholeScheduleToUiString,
  convertPinholeProtocolToString,
  convertUiInfoTONewPinholePolicy,
  convertUiInfoToPinholePolicy,
  Ipv6PinholesInitialData,
  validateCreateIpv6PinholeRule,
} from "./utils";

type Props = {
  data: {
    policies: UIPinholePolicy[];
    availablePortRules: PinholePortRule[];
  };
  availableSchedules: SchedulerRuleInfo[];
  errors: string[];
  setErrors: React.Dispatch<React.SetStateAction<string[]>>;
  showErrorModal: boolean;
  onToggleErrorModal: () => void;
  ipv6Devices: Ipv6DeviceInfo[];
  onApplyClick: (result: ListTrackerResult<PinholePolicy>) => void;
  isApplying: boolean;
};

export const Ipv6PinholesView: React.FC<Props> = ({
  data,
  availableSchedules,
  errors,
  setErrors,
  showErrorModal,
  onToggleErrorModal,
  ipv6Devices,
  onApplyClick,
  isApplying,
}) => {
  const { addItem, removeItem, updateItem, getResult, list, hasChanges } = useListTracker(data.policies, "id");
  const { currentState, reset, setValue } = useFormState(Ipv6PinholesInitialData);
  const [newRuleName, setNewRuleName] = useState<string | undefined>();
  const [showEditRuleView, setShowEditRuleView] = useState(false);
  const childrenRef = useRef<{ [id: string]: PinholeTableRowForwardProp }>({});
  const [newScheduleId, setNewScheduleId] = useState<string>("");

  const sortedData = useMemo(() => {
    return sortBy("asc", list, (val) => val.index);
  }, [list]);

  const onAddToListClick = (currentState: Ipv6PinholesUiModel) => {
    const createRuleErrors: string[] = validateCreateIpv6PinholeRule(currentState);
    setErrors(createRuleErrors);
    if (createRuleErrors.length === 0) {
      const ipv6PinholeRule = convertUiInfoTONewPinholePolicy(currentState);
      const ruleIndex = data.policies.length + 1;
      addItem({ ...ipv6PinholeRule, index: ruleIndex });
      reset();
    }
  };

  const onCheckboxClick = (item: UIPinholePolicy) => {
    updateItem({ ...item, enabled: !item.enabled });
  };

  const onDeleteClick = (item: UIPinholePolicy) => {
    removeItem(item);
  };

  const onDoneClick = (
    currentState: Ipv6PinholesUiModel,
    initialPolicy: UIPinholePolicy,
    setIsEdit: React.Dispatch<React.SetStateAction<boolean>>
  ) => {
    const editErrors = validateCreateIpv6PinholeRule(currentState);
    setErrors(editErrors);
    if (editErrors.length === 0) {
      const ipv6PinholeRule = convertUiInfoToPinholePolicy(currentState, initialPolicy);
      updateItem(ipv6PinholeRule);
      setIsEdit(false);
    }
  };

  useEffect(() => {
    if (newRuleName !== undefined) {
      const schedule = availableSchedules.find((item) => item.name === newRuleName);
      if (schedule === undefined) {
        setValue("schedule", "Always");
      } else {
        setValue("schedule", schedule);
      }
    }
    //eslint-disable-next-line
  }, [availableSchedules, newRuleName]);

  const onAddNewSchedule = (ruleName?: string) => {
    setNewRuleName(ruleName);
  };

  const onEditNewSchedule = useCallback(
    (ruleName?: string) => {
      setShowEditRuleView(false);
      childrenRef.current[newScheduleId].setRuleName(ruleName);
      setNewScheduleId("");
    },
    //eslint-disable-next-line
    [childrenRef.current, newScheduleId]
  );

  const onEditSetNewSchedule = (id: string) => {
    setNewScheduleId(id);
    setShowEditRuleView(true);
  };

  if (currentState.schedule === "User defined" || showEditRuleView) {
    return <AddOrEditSchedule onSuccessfulCreate={showEditRuleView ? onEditNewSchedule : onAddNewSchedule} />;
  }

  return (
    <>
        <Ipv6PinholesHeader>Rules List</Ipv6PinholesHeader>
        <Table>
          <thead>
            <Ipv6PinholesTableRow className="b">
              <td className="ps-0 col-2">External Host</td>
              <td className="col-2">Internal Host</td>
              <td className="col-2">Protocol</td>
              <td className="col-2">Application/Port</td>
              <td className="col-2">Schedule</td>
              <td className="col-2"></td>
            </Ipv6PinholesTableRow>
          </thead>
          <tbody>
            {sortedData.map((item) => (
              <Ipv6PinholesTableRowDetails
                ref={(ele) => {
                  if (ele !== null) {
                    childrenRef.current[item.id] = ele;
                  }
                }}
                key={item.id}
                item={item}
                onCheckboxClick={() => onCheckboxClick(item)}
                onDeleteClick={() => onDeleteClick(item)}
                ipv6Devices={ipv6Devices}
                availableSchedules={availableSchedules}
                onDoneClick={onDoneClick}
                onEditSetNewSchedule={() => onEditSetNewSchedule(item.id)}
              />
            ))}
          </tbody>
        </Table>
      </VZBody>
    </>
  );
};

import React, {
  useEffect,
  useImperativeHandle,
  useMemo,
  useState,
} from "react";
import { Col } from "react-bootstrap";
import { Ipv6DeviceInfo } from "../../../domain/misc/models";
import {
  PinholePortRule,
  PinholeProtocol,
} from "../../../domain/pinholes/models";
import { SchedulerRuleInfo } from "../../../domain/scheduler-rules/models";
import { useFormState } from "../../components/form";
import { OptionalComponent } from "../../components/OptionalComponent";
import { VZCheckbox } from "../../components/vz-checkbox/VZCheckbox";
import { VZDropdown } from "../../components/vz-dropdown/VZDropdown";
import { VZInputTextField } from "../../components/vz-input/VZInput";
import { getEnumValues, sanitizeIpv6Address } from "../../utils";
import { BWActionIcon } from "../bandwidth-monitoring/styles";
import {
  Ipv6PinholesUiModel,
  PinholeTableRowForwardProp,
  UIPinholePolicy,
} from "./models";
import {
  Ipv6PinholesDoneButton,
  Ipv6PinholesTableData,
  Ipv6PinholesTableRow,
  Ipv6PinholeTableHostData,
} from "./styles";
import {
  convertInternalHostToString,
  convertIpv6PinholeScheduleToUiString,
  convertPinholePolicyToUiInfo,
  convertPinholeProtocolToString,
  convertScheduleRuleToUIString,
} from "./utils";

type TableProps = {
  item: UIPinholePolicy;
  ipv6Devices: Ipv6DeviceInfo[];
  onCheckboxClick: () => void;
  onDeleteClick: () => void;
  availableSchedules: SchedulerRuleInfo[];
  onDoneClick: (
    currentState: Ipv6PinholesUiModel,
    initialPolicy: UIPinholePolicy,
    setIsEdit: React.Dispatch<React.SetStateAction<boolean>>
  ) => void;
  onEditSetNewSchedule: () => void;
};

export const Ipv6PinholesTableRowDetails = React.forwardRef<
  PinholeTableRowForwardProp,
  TableProps
>(
  (
    {
      item,
      onCheckboxClick,
      onDeleteClick,
      ipv6Devices,
      availableSchedules,
      onDoneClick,
      onEditSetNewSchedule,
    },
    ref
  ) => {
    const [showDetails, setShowDetails] = useState(false);
    const [isEdit, setIsEdit] = useState(false);
    const [newSch, setNewSch] = useState<string | undefined>();
    const initialData: Ipv6PinholesUiModel = useMemo(() => {
      return convertPinholePolicyToUiInfo(
        item,
        ipv6Devices,
        availableSchedules,
        newSch
      );
      //eslint-disable-next-line
    }, [item, ipv6Devices, availableSchedules, newSch]);

    const { currentState, setValue } = useFormState(initialData);

    useImperativeHandle(ref, () => ({
      setRuleName(name) {
        setNewSch(name);
      },
    }));

    useEffect(() => {
      if (newSch !== undefined) {
        setIsEdit(true);
      }
    }, [newSch]);

    if (currentState.schedule === "User defined") {
      onEditSetNewSchedule();
    }

    return (
      <>
        <OptionalComponent show={isEdit === false}>
          <Ipv6PinholesTableRow key={item.id}>
            <Ipv6PinholeTableHostData className="ps-0 col-2">
              {item.externalHost.toString()}
            </Ipv6PinholeTableHostData>
            <Ipv6PinholeTableHostData className="col-2">
              {item.internalHostName !== undefined &&
              item.internalHostName !== ""
                ? item.internalHostName
                : item.internalHost.toNormalizedString()}
            </Ipv6PinholeTableHostData>
            <td className="col-2">
              {convertPinholeProtocolToString(item.protocol)}
            </td>
            <td className="col-2">{convertScheduleRuleToUIString(item)}</td>
            <td className="col-2">
              {item.schedule === "Always" ? "Always" : item.schedule.name}
            </td>
            <td className="col-2">
              <Col className="d-flex">
                <Col>
                  <VZCheckbox
                    checked={item.enabled}
                    onChange={onCheckboxClick}
                  />
                </Col>
                <Col>
                  <i
                    id={`ipv6EditRuleButton`}
                    onClick={() => {
                      setIsEdit(true);
                      setShowDetails(false);
                    }}
                    role="button"
                    className="icon icon--edit clickable"
                  ></i>
                </Col>
                <Col>
                  <i
                    id={`ipv6DeleteRuleButton`}
                    onClick={onDeleteClick}
                    role="button"
                    className="icon icon--trash clickable"
                  ></i>
                </Col>
                <BWActionIcon
                  className="icon icon--arrow"
                  onClick={() => {
                    setShowDetails((prev) => !prev);
                  }}
                  $isOpen={showDetails}
                ></BWActionIcon>
              </Col>
            </td>
          </Ipv6PinholesTableRow>
        </OptionalComponent>
        <OptionalComponent show={isEdit === true}>
          <tr>
            <td className="ps-0 col-2">
              <Col>
                <VZDropdown
                  id="Ipv6Pinholes-ExternalHost"
                  selectedItem={currentState.externalHost}
                  onSelect={(e) => setValue("externalHost", e)}
                  options={["Any", "Specify IP", "Specify domain name"]}
                  getOptionAsString={(e) => e}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{
                    fontSize: "0.85rem",
                    width: "9rem",
                    height: "2.5rem",
                  }}
                />
              </Col>
              <Col className="mt-2">
                <OptionalComponent
                  show={currentState.externalHost === "Specify IP"}
                >
                  <VZInputTextField
                    value={currentState.specifyExtIp}
                    onChange={(e) =>
                      setValue("specifyExtIp", sanitizeIpv6Address(e))
                    }
                    style={{
                      fontSize: "0.9rem",
                      width: "9rem",
                      height: "2.5rem",
                    }}
                  />
                </OptionalComponent>
                <OptionalComponent
                  show={currentState.externalHost === "Specify domain name"}
                >
                  <VZInputTextField
                    value={currentState.domainName}
                    onChange={(e) => setValue("domainName", e)}
                    style={{
                      fontSize: "0.9rem",
                      width: "9rem",
                      height: "2.5rem",
                    }}
                  />
                </OptionalComponent>
              </Col>
            </td>
            <td className="col-2">
              <Col style={{ width: "9rem" }}>
                <VZDropdown
                  id="Ipv6Pinholes-InternalHost"
                  selectedItem={currentState.internalHost}
                  onSelect={(e) => setValue("internalHost", e)}
                  options={["Specify IP", ...ipv6Devices]}
                  getOptionAsString={(e) => convertInternalHostToString(e)}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{
                    fontSize: "0.85rem",
                    width: "9rem",
                    height: "2.5rem",
                  }}
                />
              </Col>
              <Col className="mt-2">
                <OptionalComponent
                  show={currentState.internalHost === "Specify IP"}
                >
                  <VZInputTextField
                    value={currentState.specifyIntIp}
                    onChange={(e) =>
                      setValue("specifyIntIp", sanitizeIpv6Address(e))
                    }
                    style={{
                      fontSize: "0.9rem",
                      width: "9rem",
                      height: "2.5rem",
                    }}
                  />
                </OptionalComponent>
              </Col>
            </td>
            <td className="col-2">
              <Col>
                <VZDropdown
                  id="Ipv6Pinholes-Protocol"
                  selectedItem={currentState.protocol}
                  onSelect={(e) => setValue("protocol", e)}
                  options={getEnumValues(PinholeProtocol)}
                  getOptionAsString={convertPinholeProtocolToString}
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{ fontSize: "0.85rem", height: "2.5rem" }}
                  disabled={
                    !(
                      currentState.applicationPort ===
                        "Select application / ports..." ||
                      currentState.applicationPort === "Custom"
                    )
                  }
                />
              </Col>
            </td>
            <td className="col-2">
              <Col>
                <OptionalComponent
                  show={currentState.applicationPort === "Custom"}
                >
                  <VZInputTextField
                    value={currentState.port.toString()}
                    onChange={(e) =>
                      setValue("port", e.replace(/\D/g, "").slice(0, 16))
                    }
                    style={{ fontSize: "0.9rem", height: "2.5rem" }}
                  />
                </OptionalComponent>
                <OptionalComponent
                  show={currentState.applicationPort !== "Custom"}
                >
                  <VZInputTextField
                    value={`${
                      (currentState.applicationPort as PinholePortRule).ruleName
                    } (${
                      (currentState.applicationPort as PinholePortRule)
                        .ruleDescription
                    })`}
                    onChange={() => {}}
                    style={{ fontSize: "0.9rem", height: "2.5rem" }}
                    disabled
                  />
                </OptionalComponent>
              </Col>
            </td>
            <td className="col-2">
              <Col>
                <VZDropdown
                  id="Ipv6Pinholes-Schedule"
                  selectedItem={currentState.schedule}
                  onSelect={(e) => setValue("schedule", e)}
                  options={["Always", "User defined", ...availableSchedules]}
                  getOptionAsString={(e) =>
                    convertIpv6PinholeScheduleToUiString(e)
                  }
                  selectedTextStyle={{ fontSize: "0.85rem" }}
                  style={{
                    fontSize: "0.85rem",
                    width: "9rem",
                    height: "2.5rem",
                  }}
                />
              </Col>
            </td>
            <td>
              <Ipv6PinholesDoneButton
                onClick={() => onDoneClick(currentState, item, setIsEdit)}
              >
                Done
              </Ipv6PinholesDoneButton>
            </td>
          </tr>
        </OptionalComponent>
        <OptionalComponent show={showDetails}>
          <Ipv6PinholesTableRow>
            <Ipv6PinholesTableData className="ps-0" $isHost>
              {item.externalHost.toString()}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData $isHost>
              {item.internalHostName ?? item.internalHost.toNormalizedString()}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData>
              {convertPinholeProtocolToString(item.protocol)}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData>
              {convertScheduleRuleToUIString(item)}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData>
              {item.schedule === "Always" ? "Always" : item.schedule.name}
            </Ipv6PinholesTableData>
            <Ipv6PinholesTableData></Ipv6PinholesTableData>
          </Ipv6PinholesTableRow>
        </OptionalComponent>
      </>
    );
  }
);

This is my component i am trying to display some data in the table and this page have something unique when ever i click on user Defined in the schedule dropdown i 
need to navigate to some other page and there we will be creating a new scheuler rule and when the rule is created successfully i am giveing the 
ruleName from the Schedule rule component to the but now when i am coming back the component get rerenders and the isEdit is changed back to the false and also i am unable to access the value of ruleName inside the  
Ipv6PinholesTableRowDetails component I tried using useForward ref but i am not able to figure how to do this please help me

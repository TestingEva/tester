function renderSetupPage() {
  const app = document.getElementById("temp-root");
  if (!app || !selectedRouter) return;

  // Save selected model to localStorage
  setConfigStore("modelName", selectedRouter.model);

  app.innerHTML = `
    <header class="header">${selectedRouter.name} Quick Setup</header>
    <div class="setup-form">
      <div class="setup-group">
        <label class="setup-label">Profile Mode</label>
        <div class="options" id="profile-options">
          ${availableProfileMode
            .map(
              (mode) =>
                `<button class="profile-btn ${selectedProfileMode === mode ? "selected" : ""}" data-mode="${mode}">${mode}</button>`
            )
            .join("")}
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Enable QSW</label>
        <div class="options" id="qsw-options">
          <button class="toggle-btn ${qswEnableStatus ? "selected" : ""}" data-value="true">True</button>
          <button class="toggle-btn ${!qswEnableStatus ? "selected" : ""}" data-value="false">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Enable Speed Test</label>
        <div class="options" id="speedtest-options">
          <button class="toggle-btn ${speedTestEnabled ? "selected" : ""}" data-value="true">True</button>
          <button class="toggle-btn ${!speedTestEnabled ? "selected" : ""}" data-value="false">False</button>
        </div>
      </div>

      <div class="setup-group">
        <label class="setup-label">Password</label>
        <input type="text" id="password-input" placeholder="Enter password">
      </div>
      <div class="setup-desc">
        Attention! This password will be used to login the Simulator GUI
      </div>

      <button id="finish-btn">Finish</button>
    </div>
  `;

  // Profile mode toggle
  document.getElementById("profile-options").addEventListener("click", (e) => {
    const target = e.target;
    if (!target.classList.contains("profile-btn")) return;

    const group = target.parentElement;
    group.querySelector(".selected")?.classList.remove("selected");
    target.classList.add("selected");

    selectedProfileMode = target.dataset.mode;
  });

  // QSW toggle
  document.getElementById("qsw-options").addEventListener("click", (e) => {
    const target = e.target;
    if (!target.classList.contains("toggle-btn")) return;

    const group = target.parentElement;
    group.querySelector(".selected")?.classList.remove("selected");
    target.classList.add("selected");

    qswEnableStatus = target.dataset.value === "true";
  });

  // Speed test toggle
  document.getElementById("speedtest-options").addEventListener("click", (e) => {
    const target = e.target;
    if (!target.classList.contains("toggle-btn")) return;

    const group = target.parentElement;
    group.querySelector(".selected")?.classList.remove("selected");
    target.classList.add("selected");

    speedTestEnabled = target.dataset.value === "true";
  });

  // Finish button
  document.getElementById("finish-btn").addEventListener("click", () => {
    const password = document.getElementById("password-input").value.trim();
    if (!password) {
      alert("Please enter a password before proceeding.");
      return;
    }

    setConfigStore("password", password);
    setConfigStore("profileMode", selectedProfileMode);
    setConfigStore("qswEnabled", qswEnableStatus);
    setConfigStore("speedTestEnabled", speedTestEnabled);

    alert("Setup Complete!");
  });
}

import React, { useEffect, useMemo, useState } from 'react'

import dayjs from 'dayjs'
import { useDispatch, useSelector } from 'react-redux'
import { useNavigate, useParams } from 'react-router-dom'
import { v4 as uuidv4 } from 'uuid'
import { ButtonBG, RouterButton } from '../../../common/button/RouterButton'
import Footer from '../../../common/footer/Footer'
import { HeaderWithBody } from '../../../common/header/Header'
import VZLoader from '../../../common/loader/Loader'
import CONFIG from '../../../config/env.json'
import { SystemLoggingConstants } from '../../../constants/Diagnostics'
import { shaReportMessage } from '../../../constants/ShaReport'
import { fetchRequests } from '../../../utils/FetchRequest'
import { logUsageEvent } from '../../../utils/Logger'
import { fetchDateTimeRequest } from '../../system/date-time/Action'
import { clearSysLogRequest, fetchSysLogRequest } from './Action'
import './SystemLogging.css'
import { TypeSelectionHeader } from './sys-log-components/TypeSelectionHeader'
import FirewallLoggingSettings from './sys-logging-pages/FirewallLoggingSettings'
import { MainLoggingPage } from './sys-logging-pages/MainLoggingPage'
import TimeSettingsPage from './sys-logging-pages/TimeSettingsPage'

const SystemLogging = () => {
    const apiData = useSelector((state) => {
        return state?.sysLog?.data
    })
    const localDateTimeData = useSelector((state) => state?.dateTime?.data)
    const params = useParams()
    const dispatch = useDispatch()
    const navigate = useNavigate()
    const [loadPage, setLoadPage] = useState(false)
    const [selectedLogType, setSelectedLogType] = useState('system')
    const [currentData, setCurrentData] = useState([])
    const [selectedPageType, setSelectedPageType] = useState(0)
    const [timeData, setTimeData] = useState({})
    const [startTimeData, setStartTimeData] = useState()
    const [endTimeData, setEndTimeData] = useState()
    const [componentId, setComponentId] = useState(uuidv4())
    const [cumulativeOffset, setCumulativeOffset] = useState(100)
    const [isDataRemaining, setIsDataRemaining] = useState(false)

    const requestData = useMemo(() => {
        setLoadPage(false)
        return {
            requestId: componentId,
            logType: SystemLoggingConstants?.requestLogType?.[params?.id],
            startDateTime: startTimeData,
            endDateTime: endTimeData,
            offset: 0,
            limit: 100,
        }
        //eslint-disable-next-line
    }, [startTimeData,endTimeData])


    const clearLog = () => {
        setCurrentData([])
        dispatch(
            clearSysLogRequest({
                body: { logType: SystemLoggingConstants?.requestLogType?.[params?.id] },
            })
        )
    }

    const subtractDaysFromLocalDateTime = (days) => {
        return dayjs(timeData?.time.slice(0, -6)).subtract(days,"days").format("YYYY-MM-DDTHH:mm:ss")
    }

    const filterLogs = ({ type = 'prevDay', startTime, endTime }) => {

        switch (type) {
            case 'prevDay':
                setStartTimeData(subtractDaysFromLocalDateTime(1))
                setEndTimeData(dayjs(timeData?.time.slice(0,-6)).format("YYYY-MM-DDTHH:mm:ss"))
                break
            case 'prevWeek':
                setStartTimeData(subtractDaysFromLocalDateTime(7))
                setEndTimeData(dayjs(timeData?.time.slice(0,-6)).format("YYYY-MM-DDTHH:mm:ss"))
                break
            default:
                setStartTimeData(startTime)
                setEndTimeData(endTime)
                break
        }
        setSelectedPageType(0)
    }

    function saveLogs() {
        fetchRequests({ url: CONFIG?.SYS_LOGGING_DOWNLOAD_LOG, headers: { responseType: "blob" }, needJson: false, body: JSON.stringify({ logType: SystemLoggingConstants?.requestLogType?.[params?.id] }) }).then(rData => { return rData?.blob() }).then(res => {
            const blob = new Blob([res], { type: 'application/text' });
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = `messages_${SystemLoggingConstants?.logFileName?.[params?.id]}.log`;
            link.click();
            window.URL.revokeObjectURL(link.href);
        })
    }

    const refreshPage = () => {
        dispatch(fetchDateTimeRequest())
        window.scrollTo(0, 0)
        setCurrentData([])
        setCumulativeOffset(100)
        filterLogs({ type: "prevDay" })
    }

    useEffect(() => {
        if (localDateTimeData && Object.keys(localDateTimeData)?.length) {
            setTimeData({
                time: localDateTimeData?.localDateTime,
            })
        }
    }, [localDateTimeData])

    useEffect(() => {
          if (timeData?.time) {
              setStartTimeData(subtractDaysFromLocalDateTime(1))
              setEndTimeData(dayjs(timeData?.time.slice(0, -6)).format('YYYY-MM-DDTHH:mm:ss'))
          }
          // eslint-disable-next-line
    }, [timeData])

    useEffect(() => {
        dispatch(fetchDateTimeRequest())
        setSelectedLogType(params?.id)
        // if (timeData?.time) {
        //     setStartTimeData(subtractDaysFromLocalDateTime(1))
        //     setEndTimeData(subtractDaysFromLocalDateTime(0))
        // }
        setLoadPage(false)
        // eslint-disable-next-line
    }, [params?.id])

    useEffect(() => {
        if (startTimeData && endTimeData && localDateTimeData) {
            window.scrollTo(0, 0)
            setCurrentData([])   
            setCumulativeOffset(100)
            logUsageEvent(shaReportMessage.sysLogPage.replace("{SYS_LOG_TYPE}", SystemLoggingConstants.eventLog[params?.id]))
            dispatch(fetchSysLogRequest({ body: { ...requestData, requestId: uuidv4() } }))
        }
        // eslint-disable-next-line
    }, [requestData.startDateTime,requestData.endDateTime,selectedLogType])

    useEffect(() => {
        setComponentId(uuidv4())
        return () => {
            setComponentId(null)
        }
        // eslint-disable-next-line
    }, [])

    const callNextLogs = () => {
        const updatedRequestData = { ...requestData, offset: cumulativeOffset, }
        apiData?.logList?.length !== 0 && dispatch(fetchSysLogRequest({ body: updatedRequestData }))
        setCumulativeOffset((prev) => prev + requestData?.limit)
    }

    const HeaderOptions = () => {
        return (
            <div className="sys-log-option-row">
                {params?.id === 'firewall' && (
                    <ButtonBG id="sysLogSettingsButton"
                        className="sys-log-button-1 b"
                        onEvent={() => setSelectedPageType(2)}
                        label={SystemLoggingConstants?.settings}
                        eventLabel={shaReportMessage.sysLogSettingsClick}
                    />
                )}
                <ButtonBG id="sysLogOptionsButton"
                    className="sys-log-button-1 b"
                    onEvent={() => setSelectedPageType(1)}
                    label={SystemLoggingConstants?.opt}
                    eventLabel={shaReportMessage.sysLogOptionsClick}
                />
                <ButtonBG id="sysLogRefreshButton" className="sys-log-button-1 b" onEvent={refreshPage} label={SystemLoggingConstants?.refresh} eventLabel={shaReportMessage.sysLogRefreshClick} />
                <RouterButton id="sysLogSaveButton" className="sys-log-button-1 sys-log-save-button b" onEvent={saveLogs} label={SystemLoggingConstants?.save} eventLabel={shaReportMessage.sysLogSaveClick} />
            </div>
        )
    }

    useEffect(() => {
        if (apiData && Object?.keys(apiData)?.length !== 0 && apiData?.isLogList) {
            setIsDataRemaining(apiData?.logList?.length !== 0)
            setCurrentData(c => { return [...c, ...apiData?.logList] })
            setLoadPage(true);
        }
    }, [apiData])

    return (
        <>
            <HeaderWithBody
                title={SystemLoggingConstants?.title}
                breadcrumbData={SystemLoggingConstants?.breadcrumbData?.concat([
                    [SystemLoggingConstants?.availablePages?.[params?.id], ''],
                ])}
                extra={TypeSelectionHeader({
                    currentSelectedType: selectedLogType,
                    setSelectedPageType: setSelectedPageType,
                    navigate: navigate,
                })}
                lineMargin={'sys-log-no-mar'}
                body={selectedPageType === 0 && HeaderOptions()}
            />
            {loadPage ?
                <div className="sys-log-page">
                    <div className="flex-1">
                        {selectedPageType === 0 &&
                            Object?.keys(
                                SystemLoggingConstants?.availablePages
                            )?.indexOf(params?.id) !== -1 && (
                                <MainLoggingPage
                                    selectedLogType={selectedLogType}
                                    currentValue={currentData}
                                    clearLog={clearLog}
                                    nextLog={callNextLogs}
                                    hasMore={isDataRemaining}
                                    defaultTimezone={localDateTimeData?.timeZone}
                                />
                            )}
                        {selectedPageType === 1 &&
                            Object?.keys(
                                SystemLoggingConstants?.availablePages
                            )?.indexOf(params?.id) !== -1 && (
                                <TimeSettingsPage
                                    filterLogs={filterLogs}
                                    back={() => setSelectedPageType(0)}
                                    defaultTime={localDateTimeData?.localDateTime?.endsWith('Z') ? localDateTimeData?.localDateTime?.slice(0, -1) : localDateTimeData?.localDateTime?.slice(0, -6)}
                                    defaultTimezone={localDateTimeData?.localDateTime?.endsWith('Z') ? "Z" : localDateTimeData?.localDateTime?.slice(-6)}
                                />
                            )}
                        {selectedPageType === 2 &&
                            Object?.keys(
                                SystemLoggingConstants?.availablePages
                            )?.indexOf(params?.id) !== -1 && (
                                <FirewallLoggingSettings
                                    back={() => setSelectedPageType(0)}
                                    refreshPage={refreshPage}
                                />
                            )}
                    </div>
                    {selectedPageType !== 0 && <Footer />}
                </div>
                : <VZLoader showWarning={false} timeoutLoader={0} inDiv={true} />}
        </>
    )

}

export default SystemLogging


This is my main component the issue is that when ever i am changing the week and then changing the param its calling two times 
here are the payloads -  {"requestId":"ddac5443-26c7-4de5-bda0-c2e24200522c","logType":"system","startDateTime":"2024-10-08T01:08:32","endDateTime":"2024-10-15T01:08:32","offset":0,"limit":100}
for the second call payload is {"requestId":"1cf43234-abe2-427e-99a1-2dba27912606","logType":"advanced","startDateTime":"2024-10-14T01:08:32","endDateTime":"2024-10-15T01:08:32","offset":0,"limit":100}

but i want only the second call not the first call because when the param changes we need to just subsract one daY FROM the enddate 

could you help me to fix this 
